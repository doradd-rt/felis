!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AGG	./probe_utils.h	21;"	d
AbsorbNewVersionNoLock	./vhandle.cc	/^unsigned int SortedArrayVHandle::AbsorbNewVersionNoLock(unsigned int end, unsigned int extra_shift)$/;"	f	class:felis::SortedArrayVHandle
ActivateResource	./pwv_graph.h	/^  void ActivateResource(uint64_t sid, Resource res) {$/;"	f	class:felis::PWVGraph
ActivateResources	./pwv_graph.cc	/^void PWVGraph::ActivateResources(uint64_t sid, Resource *res, int nr_res)$/;"	f	class:felis::PWVGraph
Adapt	./masstree_index_impl.cc	/^void MasstreeMap::Iterator<MasstreeIteratorImpl>::Adapt()$/;"	f	class:felis::MasstreeMap::Iterator
Add	./gc.cc	/^uint64_t GarbageBlockSlab::Add(VHandle *row, int q_idx)$/;"	f	class:felis::GarbageBlockSlab
Add	./piece.cc	/^void BasePieceCollection::Add(PieceRoutine *child)$/;"	f	class:felis::BasePieceCollection
Add	./probe_utils.h	/^  void Add(Value *node) {$/;"	f	class:agg::Agg
Add	./routine_sched.cc	/^void EpochExecutionDispatchService::Add(int core_id, PieceRoutine **routines,$/;"	f	class:felis::EpochExecutionDispatchService
Add	./txn_cc.h	/^  void Add(int16_t node, uint16_t bitmap) {$/;"	f	class:felis::NodeBitmap
AddBubble	./routine_sched.cc	/^void EpochExecutionDispatchService::AddBubble()$/;"	f	class:felis::EpochExecutionDispatchService
AddEntry	./slice.h	/^  void AddEntry(int slice_id, SliceOwnerType type = IndexOwner, int node = -1,$/;"	f	class:felis::SliceMappingTable
AddExtraBasicPool	./mem.cc	/^void ParallelPool::AddExtraBasicPool(int core, size_t cap, int node)$/;"	f	class:mem::ParallelPool
AddObject	./shipping.h	/^  void AddObject(T *object) {$/;"	f	class:felis::ObjectSliceScanner
AddObject	./shipping.h	/^  void AddObject(T *object) {$/;"	f	class:felis::Shipment
AddRef	./commit_buffer.cc	/^bool CommitBuffer::AddRef(int core_id, VHandle *vhandle, uint64_t sid)$/;"	f	class:felis::CommitBuffer
AddResource	./pwv_graph.h	/^  void AddResource(uint64_t sid, Resource res) {$/;"	f	class:felis::PWVGraph
AddResources	./pwv_graph.cc	/^void PWVGraph::AddResources(uint64_t sid, Resource *res, int nr_res)$/;"	f	class:felis::PWVGraph
AddRoute	./node_config.h	/^    void AddRoute(int dst) { delta[dst - 1]++; }$/;"	f	class:felis::TransportBatcher::LocalMetadata
AddRow	./gc.cc	/^uint64_t GC::AddRow(VHandle *row, uint64_t epoch_nr)$/;"	f	class:felis::GC
AddToPriorityQueue	./routine_sched.cc	/^EpochExecutionDispatchService::AddToPriorityQueue($/;"	f	class:felis::EpochExecutionDispatchService
AddToReadyQueue	./piece.cc	/^void BasePieceCollection::ExecutionRoutine::AddToReadyQueue(go::Scheduler::Queue *q, bool next_ready)$/;"	f	class:felis::BasePieceCollection::ExecutionRoutine
AddVHandle	./vhandle_cch.h	/^  void AddVHandle(VHandle *vhandle) {$/;"	f	class:felis::VHandleCollectionHandler
AdvanceStatus	./node_config.h	/^  void AdvanceStatus() {$/;"	f	class:felis::IncomingTraffic
Agg	./probe_utils.h	/^class Agg : public Impl {$/;"	c	namespace:agg
Alloc	./epoch.cc	/^void *EpochPromiseAllocationService::Alloc(size_t size)$/;"	f	class:felis::EpochPromiseAllocationService
Alloc	./mem.cc	/^void *BasicPool::Alloc()$/;"	f	class:mem::BasicPool
Alloc	./mem.cc	/^void *Brk::Alloc(size_t s)$/;"	f	class:mem::Brk
Alloc	./mem.cc	/^void *ParallelRegion::Alloc(size_t sz)$/;"	f	class:mem::ParallelRegion
Alloc	./mem.cc	/^void *SlabPool::Alloc()$/;"	f	class:mem::SlabPool
Alloc	./mem.cc	/^void *WeakPool::Alloc()$/;"	f	class:mem::WeakPool
Alloc	./mem.h	/^  void *Alloc() {$/;"	f	class:mem::ParallelAllocator
Alloc	./mem.h	/^  void *Alloc() {$/;"	f	class:mem::Pool
Alloc	./piece.cc	/^void *BasePieceCollection::Alloc(size_t size)$/;"	f	class:felis::BasePieceCollection
Alloc	./tcp_node.cc	/^void *SendChannel::Alloc(size_t sz)$/;"	f	class:felis::tcp::SendChannel
AllocEntry	./hashtable_index_impl.cc	/^HashEntry *ThreadInfo::AllocEntry()$/;"	f	class:felis::ThreadInfo
AllocFromHugePage	./hashtable_index_impl.cc	/^static void *AllocFromHugePage(size_t length)$/;"	f	namespace:felis
AllocFromInline	./vhandle.h	/^  uint8_t *AllocFromInline(size_t sz) {$/;"	f	class:felis::SortedArrayVHandle
AllocFromRoutine	./mem.cc	/^void *AllocFromRoutine(size_t sz)$/;"	f	namespace:mem
AllocHead	./contention_manager.cc	/^VersionBufferHead *VersionBufferHeadAllocation::AllocHead(int owner_core)$/;"	f	class:felis::VersionBufferHeadAllocation
AllocMemory	./mem.cc	/^void *AllocMemory(mem::MemAllocType alloc_type, size_t length, int numa_node, bool on_demand)$/;"	f	namespace:mem
AllocSlab	./mem.cc	/^void *SlabMemory::AllocSlab(bool large_slab, void *&data_ptr)$/;"	f	class:mem::SlabMemory
AllocStateTxnWorker	./epoch.h	/^class AllocStateTxnWorker : public EpochClientBaseWorker {$/;"	c	namespace:felis
AllocateBuffer	./vhandle_sync.cc	/^static void *AllocateBuffer()$/;"	f	namespace:felis
AllocateEpochObjectOnCurrentNode	./epoch.h	/^  GenericEpochObject<T> AllocateEpochObjectOnCurrentNode() {$/;"	f	class:felis::Epoch
AllocatorModule	./module.cc	/^  AllocatorModule() {$/;"	f	class:felis::AllocatorModule
AllocatorModule	./module.cc	/^class AllocatorModule : public Module<CoreModule> {$/;"	c	namespace:felis	file:
Append	./contention_manager.cc	/^void VersionBufferHandle::Append(VHandle *handle, uint64_t sid, uint64_t epoch_nr,$/;"	f	class:felis::VersionBufferHandle
Append	./slice.cc	/^void Slice::Append(ShippingHandle *handle)$/;"	f	class:felis::Slice
Append	./slice.cc	/^void SliceQueue::Append(ShippingHandle *handle)$/;"	f	class:felis::SliceQueue
AppendNewAccess	./vhandle.cc	/^bool CalvinVHandle::AppendNewAccess(uint64_t sid, uint64_t epoch_nr, bool is_read)$/;"	f	class:felis::CalvinVHandle
AppendNewVersion	./txn.cc	/^void BaseTxn::BaseTxnRow::AppendNewVersion(int ondemand_split_weight)$/;"	f	class:felis::BaseTxn::BaseTxnRow
AppendNewVersion	./vhandle.cc	/^bool CalvinVHandle::AppendNewVersion(uint64_t sid, uint64_t epoch_nr)$/;"	f	class:felis::CalvinVHandle
AppendNewVersion	./vhandle.cc	/^bool LinkListVHandle::AppendNewVersion(uint64_t sid, uint64_t epoch_nr)$/;"	f	class:felis::LinkListVHandle
AppendNewVersion	./vhandle.cc	/^void SortedArrayVHandle::AppendNewVersion(uint64_t sid, uint64_t epoch_nr, int ondemand_split_weight)$/;"	f	class:felis::SortedArrayVHandle
AppendNewVersionNoLock	./vhandle.cc	/^void SortedArrayVHandle::AppendNewVersionNoLock(uint64_t sid, uint64_t epoch_nr, int ondemand_split_weight)$/;"	f	class:felis::SortedArrayVHandle
ApplyFromConf	./mem.cc	/^void ParallelRegion::ApplyFromConf(json11::Json conf_doc)$/;"	f	class:mem::ParallelRegion
AssignAffinity	./piece.cc	/^void BasePieceCollection::AssignAffinity(uint64_t aff)$/;"	f	class:felis::BasePieceCollection
AssignSchedulingKey	./piece.cc	/^void BasePieceCollection::AssignSchedulingKey(uint64_t key)$/;"	f	class:felis::BasePieceCollection
AttachRoutine	./piece_cc.h	/^  PieceRoutine *AttachRoutine(const Closure &capture, int placement, Func func,$/;"	f	class:felis::PieceCollection
AutoIncrement	./index_common.h	/^  uint64_t AutoIncrement(int zone = 0) {$/;"	f	class:felis::Table
Average	./probe_utils.h	/^struct Average {$/;"	s	namespace:agg
BUFFER_RECEIVE	./shipping.cc	263;"	d	file:
Balance	./locality_manager.cc	/^void LocalityManager::Balance()$/;"	f	class:felis::LocalityManager
BasePieceCollection	./piece.cc	/^BasePieceCollection::BasePieceCollection(int limit)$/;"	f	class:felis::BasePieceCollection
BasePieceCollection	./piece.h	/^class BasePieceCollection {$/;"	c	namespace:felis
BaseShipment	./shipping.cc	/^BaseShipment::BaseShipment(std::string host, unsigned int port, bool defer_connect)$/;"	f	class:felis::BaseShipment
BaseShipment	./shipping.h	/^  BaseShipment(int fd) : fd(fd), connected(true), finished(false) {}$/;"	f	class:felis::BaseShipment
BaseShipment	./shipping.h	/^class BaseShipment {$/;"	c	namespace:felis
BaseTxn	./txn.h	/^  BaseTxn(uint64_t serial_id)$/;"	f	class:felis::BaseTxn
BaseTxn	./txn.h	/^class BaseTxn {$/;"	c	namespace:felis
BaseTxnHandle	./txn.h	/^    BaseTxnHandle() {}$/;"	f	class:felis::BaseTxn::BaseTxnHandle
BaseTxnHandle	./txn.h	/^    BaseTxnHandle(uint64_t sid, uint64_t epoch_nr) : sid(sid), epoch_nr(epoch_nr) {}$/;"	f	class:felis::BaseTxn::BaseTxnHandle
BaseTxnHandle	./txn.h	/^  class BaseTxnHandle {$/;"	c	class:felis::BaseTxn
BaseTxnIndexOpContext	./txn.cc	/^BaseTxn::BaseTxnIndexOpContext::BaseTxnIndexOpContext($/;"	f	class:felis::BaseTxn::BaseTxnIndexOpContext
BaseTxnIndexOpContext	./txn.h	/^    BaseTxnIndexOpContext() {}$/;"	f	struct:felis::BaseTxn::BaseTxnIndexOpContext
BaseTxnIndexOpContext	./txn.h	/^  struct BaseTxnIndexOpContext {$/;"	s	class:felis::BaseTxn
BaseTxnIndexOpInsert	./txn.cc	/^VHandle *BaseTxn::BaseTxnIndexOpInsert(const BaseTxnIndexOpContext &ctx, int idx)$/;"	f	class:felis::BaseTxn
BaseTxnIndexOpLookup	./txn.cc	/^BaseTxn::LookupRowResult BaseTxn::BaseTxnIndexOpLookup(const BaseTxnIndexOpContext &ctx, int idx)$/;"	f	class:felis::BaseTxn
BaseTxnRow	./txn.h	/^    BaseTxnRow(uint64_t sid, uint64_t epoch_nr, VHandle *vhandle)$/;"	f	class:felis::BaseTxn::BaseTxnRow
BaseTxnRow	./txn.h	/^  class BaseTxnRow {$/;"	c	class:felis::BaseTxn
BaseVHandle	./vhandle.h	/^class BaseVHandle {$/;"	c	namespace:felis
BasicPool	./mem.h	/^class BasicPool : public WeakPool {$/;"	c	namespace:mem
BatchBufferIndex	./node_config.cc	/^size_t NodeConfiguration::BatchBufferIndex(int level, int src_node, int dst_node)$/;"	f	class:felis::NodeConfiguration
BinPack	./contention_manager.cc	/^size_t ContentionManager::BinPack(VHandle **knapsacks, unsigned int nr_knapsack, int label, size_t limit)$/;"	f	class:felis::ContentionManager
Block	./vhandle_cch.h	/^    Block() : alloc_core(mem::ParallelPool::CurrentAffinity()),$/;"	f	struct:felis::VHandleCollectionHandler::Block
Block	./vhandle_cch.h	/^  struct Block {$/;"	s	class:felis::VHandleCollectionHandler
BookNewVersionNoLock	./vhandle.h	/^  void BookNewVersionNoLock(uint64_t sid, unsigned int pos) {$/;"	f	class:felis::SortedArrayVHandle
Booting	./console.h	/^    Booting, Configuring, Listening, Connecting, Running, Exiting,$/;"	e	enum:felis::Console::ServerStatus
Brk	./mem.h	/^  Brk() : offset(0), limit(0), data(nullptr), thread_safe(false) {}$/;"	f	class:mem::Brk
Brk	./mem.h	/^  Brk(Brk &&rhs) {$/;"	f	class:mem::Brk
Brk	./mem.h	/^  Brk(void *p, size_t limit) : offset(0), limit(limit), data((uint8_t *) p), thread_safe(false) {}$/;"	f	class:mem::Brk
Brk	./mem.h	/^class Brk {$/;"	c	namespace:mem
BrkFromRoutine	./mem.cc	/^static Brk *BrkFromRoutine()$/;"	f	namespace:mem
Build	./pwv_graph.cc	/^void PWVGraph::Build()$/;"	f	class:felis::PWVGraph
Build	./sqltypes.h	/^  FirstBuilder Build() {$/;"	f	class:sql::Schemas
CACHE_LINE_SIZE	./piece.h	/^static_assert(sizeof(BasePieceCollection) % CACHE_LINE_SIZE == 0, "BasePromise is not cache line aligned");$/;"	m	namespace:felis
CACHE_LINE_SIZE	./piece.h	/^static_assert(sizeof(PieceRoutine) == CACHE_LINE_SIZE);$/;"	m	namespace:felis
CONSOLE_H	./console.h	2;"	d
CSUM_H	./csum.h	2;"	d
CalculateIncomingFromNode	./node_config.cc	/^size_t NodeConfiguration::CalculateIncomingFromNode(int src)$/;"	f	class:felis::NodeConfiguration
CalculateMedian	./probe_utils.h	/^  int CalculateMedian() { return CalculatePercentile(0.5); }$/;"	f	struct:agg::Histogram
CalculatePercentile	./probe_utils.h	/^  int CalculatePercentile(double scale) {$/;"	f	struct:agg::Histogram
CallTxns	./epoch.cc	/^void EpochClient::CallTxns(uint64_t epoch_nr, TxnMemberFunc func, const char *label)$/;"	f	class:felis::EpochClient
CallTxnsWorker	./epoch.h	/^class CallTxnsWorker : public EpochClientBaseWorker {$/;"	c	namespace:felis
CalvinVHandle	./vhandle.cc	/^CalvinVHandle::CalvinVHandle()$/;"	f	class:felis::CalvinVHandle
CalvinVHandle	./vhandle.h	/^class CalvinVHandle : public BaseVHandle {$/;"	c	namespace:felis
Channel	./tcp_node.cc	/^  struct Channel {$/;"	s	class:felis::tcp::SendChannel	file:
Char	./sqltypes.h	/^  Char() {$/;"	f	class:sql::Char
Char	./sqltypes.h	/^  Char(const Char &that) {$/;"	f	class:sql::Char
Char	./sqltypes.h	/^  Char(const char *s) {$/;"	f	class:sql::Char
Char	./sqltypes.h	/^  Char(const char *s, size_t n) {$/;"	f	class:sql::Char
Char	./sqltypes.h	/^  Char(const std::string &s) {$/;"	f	class:sql::Char
Char	./sqltypes.h	/^class Char {$/;"	c	namespace:sql
Check	./mem.h	/^  bool Check(size_t s) { return offset + s <= limit; }$/;"	f	class:mem::Brk
CheckPointer	./mem.cc	/^long BasicPool::CheckPointer(void *ptr)$/;"	f	class:mem::BasicPool
CheckSession	./shipping.cc	/^bool ShippingHandle::CheckSession()$/;"	f	class:felis::ShippingHandle
Checkpoint	./index_common.h	/^class Checkpoint {$/;"	c	namespace:felis
Chunk	./module.cc	/^    struct Chunk {$/;"	s	class:felis::CoroutineModule::CoroutineStackAllocator	file:
Clear	./commit_buffer.cc	/^void CommitBuffer::Clear(int core_id)$/;"	f	class:felis::CommitBuffer
Clear	./log.cc	/^void PerfLog::Clear()$/;"	f	class:PerfLog
ClearCallback	./txn_cc.h	/^  void ClearCallback() {$/;"	f	struct:felis::InvokeHandle
ClearStats	./gc.h	/^  void ClearStats() {$/;"	f	class:felis::GC
ClearWaitCountStats	./vhandle_sync.cc	/^void SimpleSync::ClearWaitCountStats()$/;"	f	class:felis::SimpleSync
ClearWaitCountStats	./vhandle_sync.cc	/^void SpinnerSlot::ClearWaitCountStats()$/;"	f	class:felis::SpinnerSlot
CloseAndShutdown	./node_config.cc	/^void NodeConfiguration::CloseAndShutdown()$/;"	f	class:felis::NodeConfiguration
Collect	./gc.cc	/^size_t GC::Collect(VHandle *handle, uint64_t cur_epoch_nr, size_t limit)$/;"	f	class:felis::GC
CollectBufferPlan	./node_config.cc	/^void NodeConfiguration::CollectBufferPlan(BasePieceCollection *root, unsigned long *cnts)$/;"	f	class:felis::NodeConfiguration
CollectBufferPlanImpl	./node_config.cc	/^void NodeConfiguration::CollectBufferPlanImpl(PieceRoutine *routine, unsigned long *cnts,$/;"	f	class:felis::NodeConfiguration
CommitBuffer	./commit_buffer.cc	/^CommitBuffer::CommitBuffer()$/;"	f	class:felis::CommitBuffer
CommitBuffer	./commit_buffer.h	/^class CommitBuffer {$/;"	c	namespace:felis
Compare	./hashtable_index_impl.h	/^  bool Compare(const Key &x) {$/;"	f	struct:felis::HashEntry
Complete	./completion.h	/^  void Complete(long dec = 1) {$/;"	f	class:felis::CompletionObject
Complete	./piece.cc	/^void BasePieceCollection::Complete()$/;"	f	class:felis::BasePieceCollection
Complete	./routine_sched.cc	/^void EpochExecutionDispatchService::Complete(int core_id)$/;"	f	class:felis::EpochExecutionDispatchService
Complete	./tcp_node.cc	/^void ReceiverChannel::Complete(size_t n)$/;"	f	class:felis::tcp::ReceiverChannel
CompletionObject	./completion.h	/^  CompletionObject(unsigned long count, T callback)$/;"	f	class:felis::CompletionObject
CompletionObject	./completion.h	/^class CompletionObject {$/;"	c	namespace:felis
ConfModule	./console_client.cc	/^  ConfModule() {$/;"	f	class:felis::ConfModule
ConfModule	./console_client.cc	/^class ConfModule : public Module<CoreModule> {$/;"	c	namespace:felis	file:
Configuring	./console.h	/^    Booting, Configuring, Listening, Connecting, Running, Exiting,$/;"	e	enum:felis::Console::ServerStatus
Connect	./shipping.cc	/^void BaseShipment::Connect()$/;"	f	class:felis::BaseShipment
Connecting	./console.h	/^    Booting, Configuring, Listening, Connecting, Running, Exiting,$/;"	e	enum:felis::Console::ServerStatus
Console	./console.cc	/^Console::Console()$/;"	f	class:felis::Console
Console	./console.h	/^class Console {$/;"	c	namespace:felis
ConsoleClient	./console_client.cc	/^  ConsoleClient(int fd) : fd(fd), len(0) {}$/;"	f	class:felis::ConsoleClient
ConsoleClient	./console_client.cc	/^class ConsoleClient {$/;"	c	namespace:felis	file:
ConsolidateFreeList	./mem.h	/^  struct ConsolidateFreeList {$/;"	s	class:mem::ParallelAllocator
Consume	./routine_sched.cc	/^void ConservativePriorityScheduler::Consume(PriorityQueueValue *node)$/;"	f	class:felis::ConservativePriorityScheduler
Consume	./routine_sched.cc	/^void PWVScheduler::Consume(PriorityQueueValue *value)$/;"	f	class:felis::PWVScheduler
Contains	./mem.cc	/^  bool Contains(void *ptr) {$/;"	f	struct:mem::SlabMemory
ContentionManager	./contention_manager.cc	/^ContentionManager::ContentionManager()$/;"	f	class:felis::ContentionManager
ContentionManager	./contention_manager.h	/^class ContentionManager {$/;"	c	namespace:felis
ContentionManagerPool	./mem.h	/^  ContentionManagerPool,$/;"	e	enum:mem::MemAllocType
ContinueInboundPhase	./node_config.cc	/^void NodeConfiguration::ContinueInboundPhase()$/;"	f	class:felis::NodeConfiguration
Convert	./epoch.h	/^  GenericEpochObject<P> Convert(P *ptr) {$/;"	f	class:felis::GenericEpochObject
Convert	./hashtable_index_impl.h	/^  static Key Convert(const VarStrView &k) {$/;"	f	struct:felis::HashEntry
CoreModule	./module.h	/^  CoreModule,$/;"	e	enum:felis::ModuleType
Coroutine	./mem.h	/^  Coroutine,$/;"	e	enum:mem::MemAllocType
CoroutineModule	./module.cc	/^  CoroutineModule() {$/;"	f	class:felis::CoroutineModule
CoroutineModule	./module.cc	/^class CoroutineModule : public Module<CoreModule> {$/;"	c	namespace:felis	file:
CoroutineStackAllocator	./module.cc	/^    CoroutineStackAllocator() {$/;"	f	class:felis::CoroutineModule::CoroutineStackAllocator
CoroutineStackAllocator	./module.cc	/^  class CoroutineStackAllocator : public go::RoutineStackAllocator {$/;"	c	class:felis::CoroutineModule	file:
Count	./probe_utils.h	/^  size_t Count() {$/;"	f	struct:agg::Histogram
Create	./index_common.h	/^  void Create() {$/;"	f	class:felis::TableManager
CreateFromCapture	./piece.cc	/^PieceRoutine *PieceRoutine::CreateFromCapture(size_t capture_len)$/;"	f	class:felis::PieceRoutine
CreateFromPacket	./piece.cc	/^PieceRoutine::CreateFromPacket(uint8_t *p, size_t packet_len)$/;"	f	class:felis::PieceRoutine
CurrentAffinity	./mem.cc	/^int ParallelAllocationPolicy::CurrentAffinity()$/;"	f	class:mem::ParallelAllocationPolicy
DBG_DISPATCH	./log.h	81;"	d
DBG_WORKLOAD	./log.h	80;"	d
DBOBJ	./sqltypes.h	444;"	d
DERIVED	./sqltypes.h	451;"	d
DataOwner	./slice.h	/^  PrimaryOwner, IndexOwner, DataOwner, NumOwnerTypes$/;"	e	enum:felis::SliceOwnerType
Decode	./sqltypes.h	/^  void Decode(const VarStr *str) {$/;"	f	class:sql::Object
DecodeFrom	./sqltypes.h	/^  const uint8_t *DecodeFrom(const uint8_t *buf) { return buf; }$/;"	f	class:sql::GapField
DecodeFrom	./sqltypes.h	/^  const uint8_t *DecodeFrom(const uint8_t *buf) {$/;"	f	class:sql::Field
DecodeFrom	./sqltypes.h	/^  const uint8_t *DecodeFrom(const uint8_t *buf) {$/;"	f	struct:sql::TupleField
DecodeFrom	./sqltypes.h	/^  static void DecodeFrom(InheritBasePtr *ptr, const uint8_t *buf) {$/;"	f	struct:sql::ValueSerializer
DecodeFrom	./sqltypes.h	/^  static void DecodeFrom(Object<Base> *ptr, const uint8_t *buf) {$/;"	f	struct:sql::Serializer
DecodeFrom	./sqltypes.h	/^  static void DecodeFrom(ObjectType *p, const uint8_t *buf) {$/;"	f	struct:sql::Serializer
DecodeFrom	./sqltypes.h	/^  static void DecodeFrom(T *ptr, const uint8_t *buf) {$/;"	f	struct:sql::Serializer
DecodeFrom	./sqltypes.h	/^  static void DecodeFrom(uint16_t *ptr, const uint8_t *buf) {$/;"	f	struct:sql::KeySerializer
DecodeFrom	./sqltypes.h	/^  static void DecodeFrom(uint32_t *ptr, const uint8_t *buf) {$/;"	f	struct:sql::KeySerializer
DecodeFrom	./txn.cc	/^const uint8_t *BaseTxn::BaseTxnIndexOpContext::DecodeFrom(const uint8_t *buf)$/;"	f	class:felis::BaseTxn::BaseTxnIndexOpContext
DecodeFrom	./txn_cc.h	/^    const uint8_t *DecodeFrom(const uint8_t *buf) {$/;"	f	struct:felis::Txn::TxnIndexOpContextEx
DecodeIOVec	./entity.cc	/^void RowEntity::DecodeIOVec(struct iovec *vec)$/;"	f	class:felis::RowEntity
DecodeNode	./piece.cc	/^size_t PieceRoutine::DecodeNode(uint8_t *p, size_t len)$/;"	f	class:felis::PieceRoutine
DecodeView	./sqltypes.h	/^  void DecodeView(const VarStrView &view) {$/;"	f	class:sql::Object
DefaultHash	./hashtable_index_impl.cc	/^uint32_t DefaultHash(const VarStrView &k)$/;"	f	namespace:felis
Delete	./txn.h	/^    bool Delete() { return WriteVarStr(nullptr); }$/;"	f	class:felis::BaseTxn::BaseTxnRow
DerivedSchemas	./sqltypes.h	/^  DerivedSchemas() {$/;"	f	class:sql::DerivedSchemas
DerivedSchemas	./sqltypes.h	/^class DerivedSchemas : public Object<LastField> {$/;"	c	namespace:sql
DestroyMetaSlab	./mem.cc	/^void SlabMemory::DestroyMetaSlab(MetaSlab *metaslab)$/;"	f	class:mem::SlabMemory
DirectRead	./vhandle.cc	/^VarStr *CalvinVHandle::DirectRead()$/;"	f	class:felis::CalvinVHandle
DispatchPeekListener	./piece.h	/^  class DispatchPeekListener {$/;"	c	class:felis::PromiseRoutineDispatchService
DoAdvance	./epoch.cc	/^void EpochManager::DoAdvance(EpochClient *client)$/;"	f	class:felis::EpochManager
DoDumpNetwork	./receiver.cc	/^static void DoDumpNetwork(int nfds, int fds[], bool nullfile, size_t buffer_size = (512 << 20))$/;"	f	file:
DoFlush	./node_config.cc	/^void LocalDispatcherImpl::DoFlush()$/;"	f	class:felis::LocalDispatcherImpl
DoFlush	./tcp_node.cc	/^void SendChannel::DoFlush(bool async)$/;"	f	class:felis::tcp::SendChannel
Done	./sqltypes.h	/^    Object<T> Done() { return *obj; }$/;"	f	struct:sql::GapField::FieldBuilder
DumpEdges	./pwv_graph.h	/^    fmt::memory_buffer DumpEdges() {$/;"	f	struct:felis::PWVGraph::Node
DumpEdges	./pwv_graph.h	/^  fmt::memory_buffer DumpEdges(uint64_t sid) {$/;"	f	class:felis::PWVGraph
ENTITY_H	./entity.h	4;"	d
EPOCH_H	./epoch.h	2;"	d
Edge	./pwv_graph.h	/^  struct Edge {$/;"	s	class:felis::PWVGraph
Encode	./sqltypes.h	/^  VarStr *Encode() const {$/;"	f	class:sql::Object
EncodeIOVec	./entity.cc	/^int RowEntity::EncodeIOVec(struct iovec *vec, int max_nr_vec)$/;"	f	class:felis::RowEntity
EncodeNode	./piece.cc	/^uint8_t *PieceRoutine::EncodeNode(uint8_t *p)$/;"	f	class:felis::PieceRoutine
EncodeSize	./sqltypes.h	/^  size_t EncodeSize() const { return 0; }$/;"	f	class:sql::GapField
EncodeSize	./sqltypes.h	/^  size_t EncodeSize() const {$/;"	f	class:sql::Field
EncodeSize	./sqltypes.h	/^  size_t EncodeSize() const {$/;"	f	struct:sql::TupleField
EncodeSize	./sqltypes.h	/^  static size_t EncodeSize(const Object<Base> *ptr) {$/;"	f	struct:sql::Serializer
EncodeSize	./sqltypes.h	/^  static size_t EncodeSize(const ObjectType *p) {$/;"	f	struct:sql::Serializer
EncodeSize	./sqltypes.h	/^  static size_t EncodeSize(const T *ptr) { return sizeof(T); }$/;"	f	struct:sql::Serializer
EncodeSize	./txn.cc	/^size_t BaseTxn::BaseTxnIndexOpContext::EncodeSize() const$/;"	f	class:felis::BaseTxn::BaseTxnIndexOpContext
EncodeSize	./txn_cc.h	/^    size_t EncodeSize() const {$/;"	f	struct:felis::Txn::TxnIndexOpContextEx
EncodeTo	./sqltypes.h	/^  static void EncodeTo(uint8_t *buf, const InheritBasePtr *ptr) {$/;"	f	struct:sql::ValueSerializer
EncodeTo	./sqltypes.h	/^  static void EncodeTo(uint8_t *buf, const Object<Base> *ptr) {$/;"	f	struct:sql::Serializer
EncodeTo	./sqltypes.h	/^  static void EncodeTo(uint8_t *buf, const ObjectType *p) {$/;"	f	struct:sql::Serializer
EncodeTo	./sqltypes.h	/^  static void EncodeTo(uint8_t *buf, const T *ptr) {$/;"	f	struct:sql::Serializer
EncodeTo	./sqltypes.h	/^  static void EncodeTo(uint8_t *buf, const uint16_t *ptr) {$/;"	f	struct:sql::KeySerializer
EncodeTo	./sqltypes.h	/^  static void EncodeTo(uint8_t *buf, const uint32_t *ptr) {$/;"	f	struct:sql::KeySerializer
EncodeTo	./sqltypes.h	/^  uint8_t *EncodeTo(uint8_t *buf) const { return buf; }$/;"	f	class:sql::GapField
EncodeTo	./sqltypes.h	/^  uint8_t *EncodeTo(uint8_t *buf) const {$/;"	f	class:sql::Field
EncodeTo	./sqltypes.h	/^  uint8_t *EncodeTo(uint8_t *buf) const {$/;"	f	struct:sql::TupleField
EncodeTo	./txn.cc	/^uint8_t *BaseTxn::BaseTxnIndexOpContext::EncodeTo(uint8_t *buf) const$/;"	f	class:felis::BaseTxn::BaseTxnIndexOpContext
EncodeTo	./txn_cc.h	/^    uint8_t *EncodeTo(uint8_t *buf) const {$/;"	f	struct:felis::Txn::TxnIndexOpContextEx
EncodeToPtr	./sqltypes.h	/^  VarStr *EncodeToPtr(void *ptr) const {$/;"	f	class:sql::Object
EncodeToPtrOrDefault	./sqltypes.h	/^  VarStr *EncodeToPtrOrDefault(void *ptr) const {$/;"	f	class:sql::Object
EncodeToSliceId	./txn_cc.h	/^  int EncodeToSliceId(int idx) { return -1 - idx; }$/;"	f	class:felis::RangeParam
EncodeToSliceId	./txn_cc.h	/^  int EncodeToSliceId(int idx) {$/;"	f	class:felis::KeyParam
EncodeView	./sqltypes.h	/^  VarStrView EncodeView(void *ptr) const {$/;"	f	class:sql::Object
EncodeViewRoutine	./sqltypes.h	/^  VarStrView EncodeViewRoutine() const {$/;"	f	class:sql::Object
End	./log.cc	/^void PerfLog::End()$/;"	f	class:PerfLog
EndOfPhase	./felis_probes.h	/^struct EndOfPhase {$/;"	s	namespace:felis::probes
EndOfPhase	./node_config.h	/^    PollMappingTable, PollRoutines, EndOfPhase,$/;"	m	class:felis::IncomingTraffic::Status
EnlargePair64Array	./vhandle.cc	/^static uint64_t *EnlargePair64Array(SortedArrayVHandle *row,$/;"	f	namespace:felis
EnsureReady	./commit_buffer.cc	/^void CommitBuffer::EnsureReady()$/;"	f	class:felis::CommitBuffer
EnsureSpace	./vhandle.cc	/^void CalvinVHandle::EnsureSpace()$/;"	f	class:felis::CalvinVHandle
EntityPool	./mem.h	/^  EntityPool,$/;"	e	enum:mem::MemAllocType
Entry	./commit_buffer.h	/^    Entry(VHandle *vhandle, uint32_t sid) : vhandle(vhandle), short_sid(sid), wcnt(1) {}$/;"	f	struct:felis::CommitBuffer::Entry
Entry	./commit_buffer.h	/^  struct Entry {$/;"	s	class:felis::CommitBuffer
Entry	./vhandle.h	/^  struct Entry {$/;"	s	class:felis::LinkListVHandle
Epoch	./epoch.h	/^  Epoch() : epoch_nr(0), client(nullptr), mem(nullptr) {}$/;"	f	class:felis::Epoch
Epoch	./epoch.h	/^  Epoch(uint64_t epoch_nr, EpochClient *client, EpochMemory *mem)$/;"	f	class:felis::Epoch
Epoch	./epoch.h	/^class Epoch {$/;"	c	namespace:felis
Epoch	./mem.h	/^  Epoch,$/;"	e	enum:mem::MemAllocType
EpochCallback	./epoch.h	/^  EpochCallback(EpochClient *client) : client(client), label(nullptr) {}$/;"	f	class:felis::EpochCallback
EpochCallback	./epoch.h	/^class EpochCallback {$/;"	c	namespace:felis
EpochClient	./epoch.cc	/^EpochClient::EpochClient()$/;"	f	class:felis::EpochClient
EpochClient	./epoch.h	/^class EpochClient {$/;"	c	namespace:felis
EpochClientBaseWorker	./epoch.h	/^  EpochClientBaseWorker(int t, EpochClient *client)$/;"	f	class:felis::EpochClientBaseWorker
EpochClientBaseWorker	./epoch.h	/^class EpochClientBaseWorker : public go::Routine {$/;"	c	namespace:felis
EpochControl	./epoch.h	/^  EpochControl(EpochClient *client) : client(client) {$/;"	f	class:felis::EpochControl
EpochControl	./epoch.h	/^class EpochControl : public go::Routine {$/;"	c	namespace:felis
EpochDispatcher	./epoch.h	/^  EpochDispatcher(char* read_top, uint32_t log_len, EpochClient *client, char *gen_type)$/;"	f	class:felis::EpochDispatcher
EpochDispatcher	./epoch.h	/^class EpochDispatcher : public go::Routine {$/;"	c	namespace:felis
EpochExecutionDispatchService	./routine_sched.cc	/^EpochExecutionDispatchService::EpochExecutionDispatchService()$/;"	f	class:felis::EpochExecutionDispatchService
EpochManager	./epoch.cc	/^EpochManager::EpochManager(EpochMemory *mem, Epoch *epoch)$/;"	f	class:felis::EpochManager
EpochManager	./epoch.h	/^class EpochManager {$/;"	c	namespace:felis
EpochMemory	./epoch.cc	/^EpochMemory::EpochMemory()$/;"	f	class:felis::EpochMemory
EpochMemory	./epoch.h	/^class EpochMemory {$/;"	c	namespace:felis
EpochObject	./epoch.h	/^  EpochObject() : epoch_nr(0), node_id(0), offset(0) {}$/;"	f	class:felis::EpochObject
EpochObject	./epoch.h	/^  EpochObject(uint64_t epoch_nr, int node_id, uint64_t offset) : epoch_nr(epoch_nr), node_id(node_id), offset(offset) {}$/;"	f	class:felis::EpochObject
EpochObject	./epoch.h	/^class EpochObject {$/;"	c	namespace:felis
EpochPromiseAllocationService	./epoch.cc	/^EpochPromiseAllocationService::EpochPromiseAllocationService()$/;"	f	class:felis::EpochPromiseAllocationService
EpochPromiseAllocationService	./epoch.h	/^class EpochPromiseAllocationService : public PromiseAllocationService {$/;"	c	namespace:felis
EpochQueueItem	./mem.h	/^  EpochQueueItem,$/;"	e	enum:mem::MemAllocType
EpochQueuePromise	./mem.h	/^  EpochQueuePromise,$/;"	e	enum:mem::MemAllocType
EpochTxnSet	./epoch.cc	/^EpochTxnSet::EpochTxnSet()$/;"	f	class:felis::EpochTxnSet
EpochTxnSet	./epoch.h	/^struct EpochTxnSet {$/;"	s	namespace:felis
EpochWorkers	./epoch.h	/^  EpochWorkers(int t, EpochClient *client)$/;"	f	struct:felis::EpochWorkers
EpochWorkers	./epoch.h	/^struct EpochWorkers {$/;"	s	namespace:felis
ExecutionRoutine	./piece.h	/^    ExecutionRoutine() {$/;"	f	class:felis::BasePieceCollection::ExecutionRoutine
ExecutionRoutine	./piece.h	/^  class ExecutionRoutine : public go::Routine {$/;"	c	class:felis::BasePieceCollection
Exiting	./console.h	/^    Booting, Configuring, Listening, Connecting, Running, Exiting,$/;"	e	enum:felis::Console::ServerStatus
ExportModule	./module.h	/^  ExportModule,$/;"	e	enum:felis::ModuleType
FELIS_PROBES_H	./felis_probes.h	3;"	d
FIELD	./sqltypes.h	432;"	d
Field	./sqltypes.h	/^  Field() {}$/;"	f	class:sql::Field
Field	./sqltypes.h	/^class Field : public Field<FieldSerializer, N - 1>, public FieldValue<N> {$/;"	c	namespace:sql
Field	./sqltypes.h	/^class Field<FieldSerializer, __COUNTER__> : public GapField<FieldSerializer> {};$/;"	c	namespace:sql
FieldBuilder	./sqltypes.h	/^  struct FieldBuilder : public FieldValue<N>::template Builder<typename Field<FieldSerializer, N + 1>::template FieldBuilder<T>, T> {};$/;"	s	class:sql::Field
FieldBuilder	./sqltypes.h	/^  struct FieldBuilder {$/;"	s	class:sql::GapField
FieldValue	./sqltypes.h	/^template <int N> class FieldValue {};$/;"	c	namespace:sql
FinalizeFlush	./contention_manager.cc	/^void ContentionManager::FinalizeFlush(uint64_t epoch_nr)$/;"	f	class:felis::ContentionManager
FindConfigSection	./console.h	/^  json11::Json FindConfigSection(const char *section_name) const {$/;"	f	class:felis::Console
FindEdge	./pwv_graph.h	/^    Edge *FindEdge(Resource r) {$/;"	f	struct:felis::PWVGraph::Node
FindSlabMemory	./mem.cc	/^static SlabMemory *FindSlabMemory(void *ptr, int default_numa_node)$/;"	f	namespace:mem
Finish	./tcp_node.cc	/^void SendChannel::Finish(size_t sz)$/;"	f	class:felis::tcp::SendChannel
FinishCompletion	./piece.h	/^  virtual void FinishCompletion(int level) {}$/;"	f	class:felis::PromiseRoutineTransportService
FinishCompletion	./tcp_node.cc	/^void TcpNodeTransport::FinishCompletion(int level)$/;"	f	class:felis::TcpNodeTransport
Flush	./node_config.cc	/^void LocalTransport::Flush()$/;"	f	class:felis::LocalTransport
Flush	./node_config.h	/^  void Flush() {$/;"	f	class:felis::Flushable
FlushBufferPlan	./node_config.cc	/^bool NodeConfiguration::FlushBufferPlan(unsigned long *per_core_cnts)$/;"	f	class:felis::NodeConfiguration
FlushIntoNoLock	./contention_manager.cc	/^void VersionBufferHandle::FlushIntoNoLock(VHandle *handle, uint64_t epoch_nr, unsigned int end)$/;"	f	class:felis::VersionBufferHandle
FlushOnCore	./node_config.cc	/^void LocalDispatcherImpl::FlushOnCore(int tid, unsigned int start, unsigned int end)$/;"	f	class:felis::LocalDispatcherImpl
FlushScheduler	./piece.cc	/^void BasePieceCollection::FlushScheduler()$/;"	f	class:felis::BasePieceCollection
Flushable	./node_config.h	/^class Flushable {$/;"	c	namespace:felis
FlusherRoutine	./tcp_node.cc	/^    FlusherRoutine(go::BufferChannel *chn, go::TcpOutputChannel *out)$/;"	f	class:felis::tcp::SendChannel::FlusherRoutine
FlusherRoutine	./tcp_node.cc	/^  class FlusherRoutine : public go::Routine {$/;"	c	class:felis::tcp::SendChannel	file:
ForEachWithBitmap	./txn.h	/^    static void ForEachWithBitmap(uint16_t bitmap, Func f) {$/;"	f	struct:felis::BaseTxn::BaseTxnIndexOpContext
Free	./mem.cc	/^void BasicPool::Free(void *ptr)$/;"	f	class:mem::BasicPool
Free	./mem.cc	/^void ParallelRegion::Free(void *ptr, int alloc_core, size_t sz)$/;"	f	class:mem::ParallelRegion
Free	./mem.cc	/^void SlabPool::Free(void *ptr)$/;"	f	class:mem::SlabPool
Free	./mem.cc	/^void WeakPool::Free(void *ptr)$/;"	f	class:mem::WeakPool
Free	./mem.h	/^  void Free(void *ptr) {$/;"	f	class:mem::Pool
Free	./mem.h	/^  void Free(void *ptr, int alloc_core) {$/;"	f	class:mem::ParallelAllocator
Free	./txn_cc.h	/^    void Free() {$/;"	f	class:felis::Txn::TxnRow
FreeEntry	./hashtable_index_impl.cc	/^void ThreadInfo::FreeEntry(HashEntry *e)$/;"	f	class:felis::ThreadInfo
FreeIfGarbage	./gc.cc	/^bool GC::FreeIfGarbage(VHandle *row, VarStr *p, VarStr *next)$/;"	f	class:felis::GC
FreeNodeEntry	./routine_sched.cc	/^  struct FreeNodeEntry : public util::GenericListNode<FreeNodeEntry> {$/;"	s	class:felis::final	file:
FreeSlab	./mem.cc	/^void SlabMemory::FreeSlab(void *slab)$/;"	f	class:mem::SlabMemory
FreeToInline	./vhandle.h	/^  void FreeToInline(uint8_t *p, size_t sz) {$/;"	f	class:felis::SortedArrayVHandle
FreeVarStr	./txn.cc	/^void BaseTxn::BaseTxnRow::FreeVarStr()$/;"	f	class:felis::BaseTxn::BaseTxnRow
FromPtr	./varstr.h	/^  static VarStr *FromPtr(void *ptr, uint16_t length) {$/;"	f	class:felis::final
FromRoutine	./pwv_graph.cc	/^RVPInfo *RVPInfo::FromRoutine(PieceRoutine *r)$/;"	f	class:felis::RVPInfo
FutureValue	./txn_cc.h	/^  FutureValue() {}$/;"	f	class:felis::FutureValue
FutureValue	./txn_cc.h	/^  FutureValue(const FutureValue<T> &rhs) : value(rhs.value) {$/;"	f	class:felis::FutureValue
FutureValue	./txn_cc.h	/^  FutureValue(const FutureValue<void> &rhs) : ready(rhs.ready.load()) {}$/;"	f	class:felis::FutureValue
FutureValue	./txn_cc.h	/^class FutureValue : public FutureValue<void> {$/;"	c	namespace:felis
FutureValue	./txn_cc.h	/^class FutureValue<void> {$/;"	c	namespace:felis
FuzzyCompare	./threshold_autotune.h	/^  static int FuzzyCompare(uint64_t x, uint64_t y) {$/;"	f	class:felis::ThresholdAutoTuneController
GC	./gc.h	/^class GC {$/;"	c	namespace:felis
GC_H	./gc.h	2;"	d
GapField	./sqltypes.h	/^class GapField {$/;"	c	namespace:sql
GarbageBlock	./gc.cc	/^struct GarbageBlock : public util::GenericListNode<GarbageBlock> {$/;"	s	namespace:felis	file:
GarbageBlockSlab	./gc.cc	/^GarbageBlockSlab::GarbageBlockSlab(int core_id)$/;"	f	class:felis::GarbageBlockSlab
GarbageBlockSlab	./gc.cc	/^struct GarbageBlockSlab {$/;"	s	namespace:felis	file:
GarbageCollect	./vhandle.cc	/^void CalvinVHandle::GarbageCollect()$/;"	f	class:felis::CalvinVHandle
GarbageCollect	./vhandle.cc	/^void LinkListVHandle::GarbageCollect()$/;"	f	class:felis::LinkListVHandle
GarbageCollect	./vhandle.cc	/^void SortedArrayVHandle::GarbageCollect()$/;"	f	class:felis::SortedArrayVHandle
GenerateBenchmarks	./epoch.cc	/^void EpochClient::GenerateBenchmarks()$/;"	f	class:felis::EpochClient
GenerateNodeBitmap	./txn_cc.h	/^  NodeBitmap GenerateNodeBitmap(KParams ...params) {$/;"	f	class:felis::Txn
GenerateSerialId	./epoch.cc	/^uint64_t EpochClient::GenerateSerialId(uint64_t epoch_nr, uint64_t sequence)$/;"	f	class:felis::EpochClient
GenericDispatchPeekListener	./piece.h	/^    GenericDispatchPeekListener(F f) : func(f) {}$/;"	f	class:felis::PromiseRoutineDispatchService::GenericDispatchPeekListener
GenericDispatchPeekListener	./piece.h	/^  class GenericDispatchPeekListener : public DispatchPeekListener {$/;"	c	class:felis::PromiseRoutineDispatchService
GenericEpochObject	./epoch.h	/^  GenericEpochObject(const EpochObject &obj) : EpochObject(obj) {}$/;"	f	class:felis::GenericEpochObject
GenericEpochObject	./epoch.h	/^class GenericEpochObject : public EpochObject {$/;"	c	namespace:felis
GenericMemory	./mem.h	/^  GenericMemory,$/;"	e	enum:mem::MemAllocType
Get	./index_common.h	/^  typename TableSpec::IndexBackend &Get() {$/;"	f	class:felis::TableManager
Get	./opts.h	/^  std::string Get(const char *def = nullptr) const {$/;"	f	struct:felis::Option
GetCpuMHz	./epoch.cc	/^static double GetCpuMHz()$/;"	f	namespace:felis
GetCurrentAutoIncrement	./index_common.h	/^  uint64_t GetCurrentAutoIncrement(int zone = 0) {$/;"	f	class:felis::Table
GetDataRegion	./mem.cc	/^ParallelRegion &GetDataRegion() { return g_data_region; }$/;"	f	namespace:mem
GetFlushRange	./node_config.h	/^  std::tuple<uint, uint> GetFlushRange(int tid) {$/;"	f	class:felis::LocalDispatcherImpl
GetFlushRange	./tcp_node.cc	/^  std::tuple<unsigned int, unsigned int> GetFlushRange(int tid) {$/;"	f	class:felis::tcp::SendChannel
GetGeneration	./shipping.h	/^  unsigned long long GetGeneration() { return generation.load(std::memory_order_acquire); }$/;"	f	class:felis::ShippingHandle
GetLocalData	./node_config.h	/^  LocalMetadata &GetLocalData(int level, int core) { return thread_local_data[core][level]; }$/;"	f	class:felis::TransportBatcher
GetMemStats	./mem.cc	/^PoolStatistics GetMemStats(MemAllocType alloc_type)$/;"	f	namespace:mem
GetMemStatsNoLock	./mem.cc	/^static PoolStatistics GetMemStatsNoLock(MemAllocType alloc_type)$/;"	f	namespace:mem
GetMetaSlab	./mem.cc	/^  MetaSlab *GetMetaSlab(void *slab) {$/;"	f	struct:mem::SlabMemory
GetNextHandle	./shipping.cc	/^ShippingHandle *SliceScanner::GetNextHandle()$/;"	f	class:felis::SliceScanner
GetNextThreshold	./threshold_autotune.h	/^  long GetNextThreshold(long current_thre, uint64_t current_nr_splitted, uint64_t current_exec_time) {$/;"	f	class:felis::ThresholdAutoTuneController
GetNumberOfNodes	./piece.h	/^  virtual uint8_t GetNumberOfNodes() { return 0; }$/;"	f	class:felis::PromiseRoutineTransportService
GetOrInstall	./contention_manager.cc	/^VersionBufferHandle ContentionManager::GetOrInstall(VHandle *handle)$/;"	f	class:felis::ContentionManager
GetOrInstallBuffer	./contention_manager.cc	/^  VersionBufferHandle GetOrInstallBuffer(ContentionManager *appender, VHandle *handle) {$/;"	f	struct:felis::VersionBufferHead
GetOrInstallBufferPos	./contention_manager.cc	/^long VersionBufferHead::GetOrInstallBufferPos(ContentionManager *appender, VHandle *handle)$/;"	f	class:felis::VersionBufferHead
GetRVPInfo	./routine_sched.cc	/^RVPInfo *PWVScheduler::GetRVPInfo(PriorityQueueValue *value)$/;"	f	class:felis::PWVScheduler
GetScheduleCore	./locality_manager.cc	/^uint64_t LocalityManager::GetScheduleCore(int core, int weight)$/;"	f	class:felis::LocalityManager
GetSlab	./mem.cc	/^  Slab *GetSlab(void *ptr, bool large_slab) {$/;"	f	struct:mem::SlabMemory
GetTable	./index_common.h	/^  Table *GetTable(int idx) {$/;"	f	class:felis::TableManager
GetThreadInfo	./masstree_index_impl.cc	/^threadinfo *MasstreeIndex::GetThreadInfo()$/;"	f	class:felis::MasstreeIndex
GetWaitCountStat	./vhandle_sync.cc	/^long SimpleSync::GetWaitCountStat(int core)$/;"	f	class:felis::SimpleSync
GetWaitCountStat	./vhandle_sync.cc	/^long SpinnerSlot::GetWaitCountStat(int core)$/;"	f	class:felis::SpinnerSlot
Greater	./routine_sched.cc	/^  static bool Greater(const PriorityQueueHeapEntry &a, const PriorityQueueHeapEntry &b) {$/;"	f	class:felis::final	file:
HASHTABLE_INDEX_IMPL	./hashtable_index_impl.h	2;"	d
HandleAPI	./console.h	/^  std::string HandleAPI(const json11::Json &j) {$/;"	f	class:felis::Console
HandleGetStatus	./console.cc	/^json11::Json Console::HandleGetStatus(const json11::Json &j)$/;"	f	class:felis::Console
HandleJsonAPI	./console.cc	/^json11::Json Console::HandleJsonAPI(const json11::Json &j)$/;"	f	class:felis::Console
HandleStatusChange	./console.cc	/^json11::Json Console::HandleStatusChange(const json11::Json &j)$/;"	f	class:felis::Console
HashEntry	./hashtable_index_impl.h	/^struct HashEntry {$/;"	s	namespace:felis
HashFunc	./hashtable_index_impl.h	/^typedef uint32_t (*HashFunc)(const VarStrView &);$/;"	t	namespace:felis
HashtableIndex	./hashtable_index_impl.cc	/^HashtableIndex::HashtableIndex(std::tuple<HashFunc, size_t, bool> conf)$/;"	f	class:felis::HashtableIndex
Histogram	./probe_utils.h	/^  Histogram() {$/;"	f	struct:agg::Histogram
Histogram	./probe_utils.h	/^struct Histogram {$/;"	s	namespace:agg
INDEX_COMMON_H	./index_common.h	3;"	d
INDEX_H	./index.h	2;"	d
INITIAL_CRC32_VALUE	./csum.h	26;"	d
INIT_ROUTINE_BRK	./mem.h	447;"	d
ImmediateDelete	./masstree_index_impl.cc	/^void MasstreeIndex::ImmediateDelete(const VarStrView &k)$/;"	f	class:felis::MasstreeIndex
Impl	./sqltypes.h	/^  typedef FieldSerializer<ImplType> Impl;$/;"	t	class:sql::Field
ImplType	./sqltypes.h	/^  typedef typename FieldValue<N>::Type ImplType;$/;"	t	class:sql::Field
IncomingTraffic	./node_config.h	/^class IncomingTraffic {$/;"	c	namespace:felis
IncreaseSize	./vhandle.cc	/^void SortedArrayVHandle::IncreaseSize(int delta, uint64_t epoch_nr)$/;"	f	class:felis::SortedArrayVHandle
Increment	./completion.h	/^  void Increment(unsigned long inc) {$/;"	f	class:felis::CompletionObject
IncrementPos	./contention_manager.cc	/^  void IncrementPos() {$/;"	f	struct:felis::VersionBufferHead
IndexOwner	./slice.h	/^  PrimaryOwner, IndexOwner, DataOwner, NumOwnerTypes$/;"	e	enum:felis::SliceOwnerType
IndexReverseIterator	./index_common.h	/^  virtual Table::Iterator *IndexReverseIterator(const VarStrView &start) {$/;"	f	class:felis::Table
IndexReverseIterator	./index_common.h	/^  virtual Table::Iterator *IndexReverseIterator(const VarStrView &start, const VarStrView &end) {$/;"	f	class:felis::Table
IndexReverseIterator	./masstree_index_impl.cc	/^Table::Iterator *MasstreeIndex::IndexReverseIterator(const VarStrView &start)$/;"	f	class:felis::MasstreeIndex
IndexReverseIterator	./masstree_index_impl.cc	/^Table::Iterator *MasstreeIndex::IndexReverseIterator(const VarStrView &start, const VarStrView &end)$/;"	f	class:felis::MasstreeIndex
IndexSearchIterator	./index_common.h	/^  virtual Table::Iterator *IndexSearchIterator(const VarStrView &start) {$/;"	f	class:felis::Table
IndexSearchIterator	./index_common.h	/^  virtual Table::Iterator *IndexSearchIterator(const VarStrView &start, const VarStrView &end) {$/;"	f	class:felis::Table
IndexSearchIterator	./masstree_index_impl.cc	/^Table::Iterator *MasstreeIndex::IndexSearchIterator(const VarStrView &start)$/;"	f	class:felis::MasstreeIndex
IndexSearchIterator	./masstree_index_impl.cc	/^Table::Iterator *MasstreeIndex::IndexSearchIterator(const VarStrView &start, const VarStrView &end)$/;"	f	class:felis::MasstreeIndex
IndexSearchIterator	./stdmap_index_impl.h	/^  Iterator IndexSearchIterator(const VarStr *k, int relation_id, uint64_t sid,$/;"	f	class:dolly::StdMapIndex
IndexSearchIterator	./stdmap_index_impl.h	/^  Iterator IndexSearchIterator(const VarStr *start, const VarStr *end, int relation_id,$/;"	f	class:dolly::StdMapIndex
IngestPending	./routine_sched.cc	/^void ConservativePriorityScheduler::IngestPending(PriorityQueueHashEntry *hent, PriorityQueueValue *value)$/;"	f	class:felis::ConservativePriorityScheduler
IngestPending	./routine_sched.cc	/^void PWVScheduler::IngestPending(PriorityQueueHashEntry *hent, PriorityQueueValue *value)$/;"	f	class:felis::PWVScheduler
InheritBasePtr	./sqltypes.h	/^struct InheritBasePtr {$/;"	s	namespace:sql
Init	./node_config.cc	/^void TransportBatcher::Init(int nr_nodes, int nr_cores)$/;"	f	class:felis::TransportBatcher
Init	./node_config.h	/^    void Init(int nr_nodes) { Reset(nr_nodes); }$/;"	f	class:felis::TransportBatcher::LocalMetadata
Init	./sqltypes.h	/^    void Init() {}$/;"	f	struct:sql::GapField::FieldBuilder
InitBrk	./txn.cc	/^void BaseTxn::InitBrk(long nr_epochs)$/;"	f	class:felis::BaseTxn
InitConsoleClient	./console_client.cc	/^void ConfModule::InitConsoleClient(std::string host, unsigned short port)$/;"	f	class:felis::ConfModule
InitModule	./module.h	/^void Module<Type>::InitModule(std::string name)$/;"	f	class:felis::Module
InitNode	./slice.cc	/^void SliceMappingTable::InitNode(int node_id) {$/;"	f	class:felis::SliceMappingTable
InitPool	./entity.cc	/^void RowEntity::InitPool()$/;"	f	class:felis::RowEntity
InitPool	./gc.cc	/^void GC::InitPool()$/;"	f	class:felis::GC
InitPool	./vhandle.cc	/^void BaseVHandle::InitPool()$/;"	f	class:felis::BaseVHandle
InitPools	./mem.cc	/^void ParallelRegion::InitPools()$/;"	f	class:mem::ParallelRegion
InitPools	./vhandle.cc	/^void LinkListVHandle::Entry::InitPools()$/;"	f	class:felis::LinkListVHandle::Entry
InitPools	./vhandle.h	/^  static void InitPools() {$/;"	f	class:felis::LinkListVHandle
InitRequiredModules	./module.h	/^void Module<Type>::InitRequiredModules()$/;"	f	class:felis::Module
InitSlab	./mem.cc	/^void InitSlab(size_t memsz)$/;"	f	namespace:mem
InitTotalNumberOfCores	./mem.cc	/^void InitTotalNumberOfCores(int nr_cores)$/;"	f	namespace:mem
InitVersion	./index.cc	/^void InitVersion(felis::VHandle *handle, VarStr *obj = (VarStr *) kPendingValue)$/;"	f	namespace:felis
Initialize	./slice.cc	/^void SliceManager::Initialize(int nr_slices)$/;"	f	class:felis::SliceManager
InitializeDispatcher	./epoch.cc	/^void EpochClient::InitializeDispatcher(char* input, uint32_t count, std::string gen_type)$/;"	f	class:felis::EpochClient
InitializeEpoch	./epoch.cc	/^void EpochClient::InitializeEpoch()$/;"	f	class:felis::EpochClient
InitializeLogger	./log.cc	/^void InitializeLogger(const std::string &hostname)$/;"	f
InsertOrCreate	./stdmap_index_impl.h	/^  VHandle *InsertOrCreate(const VarStr *k) {$/;"	f	class:dolly::StdMapIndex
InstallRowSlice	./slice.h	/^  void InstallRowSlice(int i, RowShipment *shipment) {$/;"	f	class:felis::SliceManager
InstanceInit	./contention_manager.cc	/^InstanceInit<felis::ContentionManager>::InstanceInit()$/;"	f	class:util::InstanceInit
InstanceInit	./contention_manager.h	/^template <> struct InstanceInit<felis::ContentionManager> {$/;"	s	namespace:util
InstanceInit	./epoch.cc	/^InstanceInit<EpochManager>::InstanceInit()$/;"	f	class:util::InstanceInit
InstanceInit	./epoch.h	/^template <> struct InstanceInit<felis::EpochManager> {$/;"	s	namespace:util
InstanceInit	./gc.h	/^template <> struct InstanceInit<GC> {$/;"	s	namespace:util
InstanceInit	./node_config.h	/^  InstanceInit() {$/;"	f	struct:util::InstanceInit
InstanceInit	./node_config.h	/^struct InstanceInit<felis::NodeConfiguration> {$/;"	s	namespace:util
InstanceInit	./pwv_graph.h	/^template <> struct InstanceInit<felis::PWVGraphManager> {$/;"	s	namespace:util
InstanceInit	./slice.h	/^  InstanceInit() {$/;"	f	struct:util::InstanceInit
InstanceInit	./slice.h	/^struct InstanceInit<felis::SliceLocator<TableType>> {$/;"	s	namespace:util
InstanceInit	./slice.h	/^struct InstanceInit<felis::SliceMappingTable> {$/;"	s	namespace:util
InstanceInit	./tcp_node.h	/^  InstanceInit() {$/;"	f	struct:util::InstanceInit
InstanceInit	./tcp_node.h	/^struct InstanceInit<felis::TcpNodeTransport> {$/;"	s	namespace:util
InstanceInit	./vhandle_sync.h	/^  InstanceInit() { instance = new felis::SimpleSync(); }$/;"	f	struct:util::InstanceInit
InstanceInit	./vhandle_sync.h	/^  InstanceInit() { instance = new felis::SpinnerSlot(); }$/;"	f	struct:util::InstanceInit
InstanceInit	./vhandle_sync.h	/^struct InstanceInit<felis::SimpleSync> {$/;"	s	namespace:util
InstanceInit	./vhandle_sync.h	/^struct InstanceInit<felis::SpinnerSlot> {$/;"	s	namespace:util
Invoke	./txn_cc.h	/^  void Invoke(const typename Txn<TxnState>::State &state,$/;"	f	struct:felis::InvokeHandle
InvokeHandle	./txn_cc.h	/^struct InvokeHandle {$/;"	s	namespace:felis
InvokeWithContext	./txn_cc.h	/^  void InvokeWithContext(const Context& ctx) const {$/;"	f	struct:felis::InvokeHandle
IsConverging	./shipping.cc	/^bool SliceScanner::IsConverging() {$/;"	f	class:felis::SliceScanner
IsDataGarbage	./gc.cc	/^bool GC::IsDataGarbage(VHandle *row, VarStr *data)$/;"	f	class:felis::GC
IsPendingVal	./vhandle_sync.h	/^  bool IsPendingVal(uintptr_t val)  {$/;"	f	class:felis::SpinnerSlot
IsPendingVal	./vhandle_sync.h	/^  bool IsPendingVal(uintptr_t val) {$/;"	f	class:felis::SimpleSync
IsReady	./routine_sched.cc	/^bool EpochExecutionDispatchService::IsReady(int core_id)$/;"	f	class:felis::EpochExecutionDispatchService
IsValid	./masstree_index_impl.cc	/^bool MasstreeMap::Iterator<MasstreeMap::forward_scan_iterator_impl>::IsValid() const$/;"	f	class:felis::MasstreeMap::Iterator
IsValid	./masstree_index_impl.cc	/^bool MasstreeMap::Iterator<MasstreeMap::reverse_scan_iterator_impl>::IsValid() const$/;"	f	class:felis::MasstreeMap::Iterator
IsValid	./stdmap_index_impl.h	/^    bool IsValid() const { return current != end; }$/;"	f	struct:dolly::StdMapIndex::StdMapIteratorImpl
Iterator	./index_common.h	/^  class Iterator {$/;"	c	class:felis::Table
Iterator	./masstree_index_impl.cc	/^  struct Iterator : public Table::Iterator,$/;"	s	class:felis::MasstreeMap	file:
Iterator	./stdmap_index_impl.h	/^  typedef StdMapIteratorImpl Iterator;$/;"	t	class:dolly::StdMapIndex
JsonResponse	./console.h	/^  json11::Json JsonResponse() {$/;"	f	class:felis::Console
JsonResponse	./console.h	/^  json11::Json JsonResponse(json11::Json::object props) {$/;"	f	class:felis::Console
KEYS	./sqltypes.h	449;"	d
KeyParam	./txn_cc.h	/^  KeyParam(const typename Table::Key &k)$/;"	f	class:felis::KeyParam
KeyParam	./txn_cc.h	/^  KeyParam(const typename Table::Key *start, int len)$/;"	f	class:felis::KeyParam
KeyParam	./txn_cc.h	/^class KeyParam {$/;"	c	namespace:felis
KeyParamsToBitmap	./txn_cc.h	/^  void KeyParamsToBitmap(uint16_t bitmap_per_node[], int bitshift) {}$/;"	f	class:felis::Txn
KeyParamsToBitmap	./txn_cc.h	/^  void KeyParamsToBitmap(uint16_t bitmap_per_node[],$/;"	f	class:felis::Txn
KeySerializer	./sqltypes.h	/^struct KeySerializer : public Serializer<T> {};$/;"	s	namespace:sql
KeySerializer	./sqltypes.h	/^struct KeySerializer<InheritBasePtr> {}; \/\/ Shouldn't call this!$/;"	s	namespace:sql
KeySerializer	./sqltypes.h	/^struct KeySerializer<uint16_t> : public Serializer<uint16_t> {$/;"	s	namespace:sql
KeySerializer	./sqltypes.h	/^struct KeySerializer<uint32_t> : public Serializer<uint32_t> {$/;"	s	namespace:sql
LITERALS_H	./literals.h	2;"	d
LOCALITY_MANAGER_H	./locality_manager.h	2;"	d
LOG_H	./log.h	4;"	d
LOG_SIZE	./epoch.cc	262;"	d	file:
LinkListVHandle	./vhandle.cc	/^LinkListVHandle::LinkListVHandle()$/;"	f	class:felis::LinkListVHandle
LinkListVHandle	./vhandle.h	/^class LinkListVHandle : public BaseVHandle {$/;"	c	namespace:felis
Listening	./console.h	/^    Booting, Configuring, Listening, Connecting, Running, Exiting,$/;"	e	enum:felis::Console::ServerStatus
Load	./module.h	/^  void Load() {$/;"	f	class:felis::Module
LocalBatch	./node_config.h	/^  struct LocalBatch {$/;"	s	class:felis::NodeConfiguration
LocalDispatcherImpl	./node_config.cc	/^LocalDispatcherImpl::LocalDispatcherImpl(int idx)$/;"	f	class:felis::LocalDispatcherImpl
LocalDispatcherImpl	./node_config.h	/^class LocalDispatcherImpl : public Flushable<LocalDispatcherImpl> {$/;"	c	namespace:felis
LocalMetadata	./node_config.h	/^    LocalMetadata() {}$/;"	f	class:felis::TransportBatcher::LocalMetadata
LocalMetadata	./node_config.h	/^  class LocalMetadata {$/;"	c	class:felis::TransportBatcher
LocalTransport	./node_config.cc	/^LocalTransport::LocalTransport() : lb(new LocalDispatcherImpl(0)) {}$/;"	f	class:felis::LocalTransport
LocalTransport	./node_config.h	/^class LocalTransport : public PromiseRoutineTransportService {$/;"	c	namespace:felis
LocalityManager	./locality_manager.cc	/^LocalityManager::LocalityManager()$/;"	f	class:felis::LocalityManager
LocalityManager	./locality_manager.h	/^class LocalityManager {$/;"	c	namespace:felis
LocalitySchedule	./felis_probes.h	/^struct LocalitySchedule {$/;"	s	namespace:felis::probes
LocateNodeInsert	./slice.cc	/^std::vector<int> SliceMappingTable::LocateNodeInsert(int slice_id, SliceOwnerType type) {$/;"	f	class:felis::SliceMappingTable
LocateNodeLookup	./slice.cc	/^int SliceMappingTable::LocateNodeLookup(int slice_id, SliceOwnerType type) {$/;"	f	class:felis::SliceMappingTable
LogHistogram	./probe_utils.h	/^  LogHistogram() {$/;"	f	struct:agg::LogHistogram
LogHistogram	./probe_utils.h	/^struct LogHistogram {$/;"	s	namespace:agg
LoggingModule	./module.cc	/^  LoggingModule() {$/;"	f	class:felis::LoggingModule
LoggingModule	./module.cc	/^class LoggingModule : public Module<CoreModule> {$/;"	c	namespace:felis	file:
LookupDuplicate	./commit_buffer.cc	/^CommitBuffer::Entry *CommitBuffer::LookupDuplicate(VHandle *vhandle, uint64_t sid)$/;"	f	class:felis::CommitBuffer
MASSTREE_INDEX_IMPL_H	./masstree_index_impl.h	2;"	d
MEM_H	./mem.h	2;"	d
MODULE_H	./module.h	2;"	d
MakeContext	./txn_cc.h	/^  ContextType<Types...> MakeContext(Types... params) {$/;"	f	class:felis::Txn
MakeTuple	./sqltypes.h	/^template <typename ...Types> Tuple<Types...> MakeTuple(Types... params) { return Tuple<Types...>(params...); }$/;"	f	namespace:sql
MapIterator	./stdmap_index_impl.h	/^    typedef typename std::map<VarStr, VHandle>::iterator MapIterator;$/;"	t	struct:dolly::StdMapIndex::StdMapIteratorImpl
MarkDirty	./shipping.cc	/^bool ShippingHandle::MarkDirty()$/;"	f	class:felis::ShippingHandle
MarkRoutine	./pwv_graph.cc	/^void RVPInfo::MarkRoutine(PieceRoutine *r, uint8_t cnt)$/;"	f	class:felis::RVPInfo
MasstreeDollyParam	./masstree_index_impl.cc	/^struct MasstreeDollyParam : public Masstree::nodeparams<15, 15> {$/;"	s	namespace:felis	file:
MasstreeMap	./masstree_index_impl.cc	/^class MasstreeMap : public Masstree::basic_table<MasstreeDollyParam> {$/;"	c	namespace:felis	file:
MemAllocType	./mem.h	/^enum MemAllocType {$/;"	g	namespace:mem
MemTypeToString	./mem.cc	/^std::string MemTypeToString(MemAllocType alloc_type) {$/;"	f	namespace:mem
Merge	./node_config.cc	/^unsigned long TransportBatcher::Merge(int level, LocalMetadata &local, int node)$/;"	f	class:felis::TransportBatcher
MergeOrAdd	./txn_cc.h	/^  void MergeOrAdd(int16_t node, uint16_t bitmap) {$/;"	f	class:felis::NodeBitmap
MetaSlab	./mem.cc	/^  MetaSlab(uint8_t *ptr) : ptr(ptr), alloc_bitmap(0) {}$/;"	f	class:mem::MetaSlab	file:
MetaSlab	./mem.cc	/^class MetaSlab : public util::GenericListNode<MetaSlab> {$/;"	c	namespace:mem	file:
MigrationApproachingEnd	./shipping.cc	/^void SliceScanner::MigrationApproachingEnd()$/;"	f	class:felis::SliceScanner
MigrationEnd	./shipping.cc	/^void SliceScanner::MigrationEnd()$/;"	f	class:felis::SliceScanner
Module	./module.h	/^Module<Type>::Module()$/;"	f	class:felis::Module
Module	./module.h	/^class Module {$/;"	c	namespace:felis
ModuleType	./module.h	/^enum ModuleType {$/;"	g	namespace:felis
NODE_CONFIG_H	./node_config.h	2;"	d
New	./mem.h	/^  static Brk *New(void *buf, size_t sz) {$/;"	f	class:mem::Brk
New	./routine_sched.cc	/^ConservativePriorityScheduler *ConservativePriorityScheduler::New(size_t maxlen, int numa_node)$/;"	f	class:felis::ConservativePriorityScheduler
New	./routine_sched.cc	/^PWVScheduler *PWVScheduler::New(size_t maxlen, int numa_node)$/;"	f	class:felis::PWVScheduler
New	./sqltypes.h	/^  static ThisType New(Args... args) {$/;"	f	class:sql::Schemas
New	./varstr.h	/^  static VarStr *New(uint16_t length) {$/;"	f	class:felis::final
New	./vhandle.cc	/^SortedArrayVHandle *SortedArrayVHandle::New()$/;"	f	class:felis::SortedArrayVHandle
NewInline	./vhandle.cc	/^SortedArrayVHandle *SortedArrayVHandle::NewInline()$/;"	f	class:felis::SortedArrayVHandle
NewMetaSlab	./mem.cc	/^MetaSlab *SlabMemory::NewMetaSlab()$/;"	f	class:mem::SlabMemory
NewRow	./index.cc	/^VHandle *Table::NewRow()$/;"	f	class:felis::Table
NewSize	./varstr.h	/^  static size_t NewSize(uint16_t length) { return sizeof(VarStr) + length; }$/;"	f	class:felis::final
NewStackBrk	./mem.h	446;"	d
Next	./masstree_index_impl.cc	/^void MasstreeMap::Iterator<MasstreeIteratorImpl>::Next()$/;"	f	class:felis::MasstreeMap::Iterator
Next	./stdmap_index_impl.h	/^    void Next(uint64_t sid, CommitBuffer &buffer) {$/;"	f	struct:dolly::StdMapIndex::StdMapIteratorImpl
Node	./pwv_graph.h	/^  struct Node {$/;"	s	class:felis::PWVGraph
NodeBitmap	./txn_cc.h	/^  NodeBitmap() : len(0) {}$/;"	f	class:felis::NodeBitmap
NodeBitmap	./txn_cc.h	/^  NodeBitmap(const NodeBitmap &rhs) : len(rhs.len) {$/;"	f	class:felis::NodeBitmap
NodeBitmap	./txn_cc.h	/^class NodeBitmap {$/;"	c	namespace:felis
NodeConfig	./node_config.h	/^  struct NodeConfig {$/;"	s	class:felis::NodeConfiguration
NodeConfiguration	./node_config.cc	/^NodeConfiguration::NodeConfiguration()$/;"	f	class:felis::NodeConfiguration
NodeConfiguration	./node_config.h	/^class NodeConfiguration {$/;"	c	namespace:felis
NodePeerConfig	./node_config.h	/^  struct NodePeerConfig {$/;"	s	class:felis::NodeConfiguration
NodeRowShipmentReceiverRoutine	./tcp_node.cc	/^  NodeRowShipmentReceiverRoutine(std::string host, unsigned short port) : host(host), port(port) {}$/;"	f	class:felis::tcp::NodeRowShipmentReceiverRoutine
NodeRowShipmentReceiverRoutine	./tcp_node.cc	/^class NodeRowShipmentReceiverRoutine : public go::Routine {$/;"	c	namespace:felis::tcp	file:
NodeServerModule	./module.cc	/^  NodeServerModule() {$/;"	f	class:felis::NodeServerModule
NodeServerModule	./module.cc	/^class NodeServerModule : public Module<CoreModule> {$/;"	c	namespace:felis	file:
NodeServerRoutine	./tcp_node.cc	/^  NodeServerRoutine(felis::TcpNodeTransport *transport) : transport(transport) {}$/;"	f	class:felis::tcp::NodeServerRoutine
NodeServerRoutine	./tcp_node.cc	/^class NodeServerRoutine : public go::Routine {$/;"	c	namespace:felis::tcp	file:
NodeSize	./piece.cc	/^size_t PieceRoutine::NodeSize() const$/;"	f	class:felis::PieceRoutine
Notify	./vhandle_sync.cc	/^void SpinnerSlot::Notify(uint64_t bitmap)$/;"	f	class:felis::SpinnerSlot
NotifyFree	./pwv_graph.cc	/^void PWVGraph::NotifyFree(Node *node)$/;"	f	class:felis::PWVGraph
NotifyRVPChange	./pwv_graph.cc	/^void PWVGraph::NotifyRVPChange(uint64_t sid)$/;"	f	class:felis::PWVGraph
NotifyRVPChange	./pwv_graph.h	/^  void NotifyRVPChange(uint64_t sid, int idx) {$/;"	f	class:felis::PWVGraphManager
NumMemTypes	./mem.h	/^  NumMemTypes,$/;"	e	enum:mem::MemAllocType
NumOwnerTypes	./slice.h	/^  PrimaryOwner, IndexOwner, DataOwner, NumOwnerTypes$/;"	e	enum:felis::SliceOwnerType
NumVersionsOnGC	./felis_probes.h	/^struct NumVersionsOnGC {$/;"	s	namespace:felis::probes
NumberOfTxns	./epoch.h	/^  unsigned long NumberOfTxns() {$/;"	f	class:felis::EpochClient
Object	./sqltypes.h	/^  Object(const Base &b) : Base(b) {}$/;"	f	class:sql::Object
Object	./sqltypes.h	/^class Object : public Base {$/;"	c	namespace:sql
ObjectShippingHandle	./shipping.h	/^  ObjectShippingHandle(T *object) : ShippingHandle(), object(object) {}$/;"	f	struct:felis::ObjectShippingHandle
ObjectShippingHandle	./shipping.h	/^struct ObjectShippingHandle : public ShippingHandle {$/;"	s	namespace:felis
ObjectSliceScanner	./shipping.h	/^  ObjectSliceScanner(Slice * slice, Shipment<T> *shipment)$/;"	f	class:felis::ObjectSliceScanner
ObjectSliceScanner	./shipping.h	/^class ObjectSliceScanner : public SliceScanner {$/;"	c	namespace:felis
ObjectType	./sqltypes.h	/^  typedef inline_str_base<SizeType, N> ObjectType;$/;"	t	struct:sql::Serializer
ObjectType	./sqltypes.h	/^  typedef std::vector<T> ObjectType;$/;"	t	struct:sql::Serializer
OfferData	./vhandle_sync.cc	/^void SimpleSync::OfferData(volatile uintptr_t *addr, uintptr_t obj)$/;"	f	class:felis::SimpleSync
OfferData	./vhandle_sync.cc	/^void SpinnerSlot::OfferData(volatile uintptr_t *addr, uintptr_t obj)$/;"	f	class:felis::SpinnerSlot
OffloadCore	./locality_manager.cc	/^void LocalityManager::OffloadCore(int core, WeightDist &w, long limit)$/;"	f	class:felis::LocalityManager
OnCounterReceived	./tcp_node.cc	/^void TcpNodeTransport::OnCounterReceived()$/;"	f	class:felis::TcpNodeTransport
OnDemandSplit	./felis_probes.h	/^struct OnDemandSplit {$/;"	s	namespace:felis::probes
OnExecuteComplete	./epoch.cc	/^void EpochClient::OnExecuteComplete()$/;"	f	class:felis::EpochClient
OnInitializeComplete	./epoch.cc	/^void EpochClient::OnInitializeComplete()$/;"	f	class:felis::EpochClient
OnInsertComplete	./epoch.cc	/^void EpochClient::OnInsertComplete()$/;"	f	class:felis::EpochClient
OnNewRow	./slice.h	/^  RowEntity *OnNewRow(int slice_id, RowEntity *ent) {$/;"	f	class:felis::SliceManager
OnNewRow	./slice.h	/^  T *OnNewRow(Slice ** slices, ScannerType ** scanners, int slice_idx, T *ent) {$/;"	f	class:felis::SliceManager
OnNewRow	./slice.h	/^  void OnNewRow(int slice_id, int table, VarStr *kstr, VHandle *handle) {$/;"	f	class:felis::SliceManager
OnNodeFree	./routine_sched.cc	/^  static void OnNodeFree(void *p) {$/;"	f	class:felis::final	file:
OnNodeFreeImpl	./routine_sched.cc	/^void PWVScheduler::OnNodeFreeImpl(FreeNodeEntry *node_ent)$/;"	f	class:felis::PWVScheduler
OnNodeRVPChange	./routine_sched.cc	/^  static void OnNodeRVPChange(void *p) {$/;"	f	class:felis::final	file:
OnNodeRVPChangeImpl	./routine_sched.cc	/^void PWVScheduler::OnNodeRVPChangeImpl(FreeNodeEntry *node_ent)$/;"	f	class:felis::PWVScheduler
OnUpdateRow	./slice.h	/^  RowEntity *OnUpdateRow(int slice_id, RowEntity *ent) {$/;"	f	class:felis::SliceManager
OnUpdateRow	./slice.h	/^  T *OnUpdateRow(ScannerType **scanners, int slice_idx, T* ent) {$/;"	f	class:felis::SliceManager
OnUpdateRow	./slice.h	/^  void OnUpdateRow(VHandle *handle) {$/;"	f	class:felis::SliceManager
Option	./opts.h	/^  Option(const char *name, bool is_arg = true) : prefix(name), id(g_options.size()), is_arg(is_arg) {$/;"	f	struct:felis::Option
Option	./opts.h	/^struct Option {$/;"	s	namespace:felis
Options	./opts.h	/^struct Options {$/;"	s	namespace:felis
OutgoingTraffic	./node_config.h	/^class OutgoingTraffic {$/;"	c	namespace:felis
PIECE_CC_H	./piece_cc.h	2;"	d
PIECE_H	./piece.h	2;"	d
PROBE_LIST	./felis_probes.h	107;"	d
PROBE_PROXY	./probe_utils.h	16;"	d
PROBE_UTILS_H	./probe_utils.h	3;"	d
PWVGraph	./pwv_graph.cc	/^PWVGraph::PWVGraph(int numa_node)$/;"	f	class:felis::PWVGraph
PWVGraph	./pwv_graph.h	/^class PWVGraph {$/;"	c	namespace:felis
PWVGraphManager	./pwv_graph.cc	/^PWVGraphManager::PWVGraphManager()$/;"	f	class:felis::PWVGraphManager
PWVGraphManager	./pwv_graph.h	/^class PWVGraphManager {$/;"	c	namespace:felis
PWVScheduler	./routine_sched.cc	/^  PWVScheduler(void *p, size_t lmt)$/;"	f	class:felis::final	file:
PWV_GRAPH_H	./pwv_graph.h	2;"	d
PackLeftOver	./contention_manager.cc	/^void ContentionManager::PackLeftOver(VHandle **knapsacks, unsigned int nr_knapsack, int label)$/;"	f	class:felis::ContentionManager
PageSize	./mem.h	/^  static size_t PageSize(bool large_slab) {$/;"	f	class:mem::SlabPool
PageSize	./mem.h	/^  static size_t PageSize(size_t chunk_size) {$/;"	f	class:mem::SlabPool
ParallelAllocationPolicy	./mem.h	/^class ParallelAllocationPolicy {$/;"	c	namespace:mem
ParallelAllocator	./mem.h	/^  ParallelAllocator() : total_cap(0) {$/;"	f	class:mem::ParallelAllocator
ParallelAllocator	./mem.h	/^  ParallelAllocator(ParallelAllocator<PoolType> &&rhs) {$/;"	f	class:mem::ParallelAllocator
ParallelAllocator	./mem.h	/^class ParallelAllocator : public ParallelAllocationPolicy {$/;"	c	namespace:mem
ParallelPool	./mem.cc	/^ParallelPool::ParallelPool(MemAllocType alloc_type, size_t chunk_size, size_t total_cap)$/;"	f	class:mem::ParallelPool
ParallelPool	./mem.h	/^  ParallelPool() : ParallelAllocator() {}$/;"	f	class:mem::ParallelPool
ParallelPool	./mem.h	/^  ParallelPool(ParallelPool &&rhs) : ParallelAllocator(std::move(rhs)) {}$/;"	f	class:mem::ParallelPool
ParallelPool	./mem.h	/^class ParallelPool : public ParallelAllocator<BasicPool> {$/;"	c	namespace:mem
ParallelRegion	./mem.cc	/^ParallelRegion::ParallelRegion()$/;"	f	class:mem::ParallelRegion
ParallelRegion	./mem.h	/^class ParallelRegion {$/;"	c	namespace:mem
ParallelSlabPool	./mem.cc	/^ParallelSlabPool::ParallelSlabPool(MemAllocType alloc_type, size_t chunk_size, unsigned int buffer)$/;"	f	class:mem::ParallelSlabPool
ParallelSlabPool	./mem.h	/^  ParallelSlabPool() : ParallelAllocator() {}$/;"	f	class:mem::ParallelSlabPool
ParallelSlabPool	./mem.h	/^  ParallelSlabPool(ParallelSlabPool &&rhs) : ParallelAllocator(std::move(rhs)) {}$/;"	f	class:mem::ParallelSlabPool
ParallelSlabPool	./mem.h	/^class ParallelSlabPool : public ParallelAllocator<SlabPool> {$/;"	c	namespace:mem
ParentTupleFields	./sqltypes.h	/^  typedef TupleField<Types...> ParentTupleFields;$/;"	t	struct:sql::TupleField
ParseControllerAddress	./console_client.cc	/^void ParseControllerAddress(std::string arg)$/;"	f	namespace:felis
ParseExtentedOptions	./opts.h	/^  static inline bool ParseExtentedOptions(std::string arg)$/;"	f	struct:felis::Options
ParseLargeNumber	./opts.h	/^static inline long long ParseLargeNumber(std::string s)$/;"	f	namespace:felis
ParseNodeConfig	./node_config.cc	/^static void ParseNodeConfig(util::Optional<NodeConfiguration::NodeConfig> &config, json11::Json json)$/;"	f	namespace:felis
ParseNodePeerConfig	./node_config.cc	/^static NodeConfiguration::NodePeerConfig ParseNodePeerConfig(json11::Json json, std::string name)$/;"	f	namespace:felis
Peek	./routine_sched.cc	/^EpochExecutionDispatchService::Peek(int core_id, DispatchPeekListener &should_pop)$/;"	f	class:felis::EpochExecutionDispatchService
PeekForTurn	./vhandle.cc	/^bool CalvinVHandle::PeekForTurn(uint64_t sid)$/;"	f	class:felis::CalvinVHandle
PendingFlush	./tcp_node.cc	/^long SendChannel::PendingFlush(int core_id)$/;"	f	class:felis::tcp::SendChannel
PerfLog	./log.cc	/^PerfLog::PerfLog()$/;"	f	class:PerfLog
PerfLog	./log.h	/^class PerfLog {$/;"	c
PeriodicIO	./piece.h	/^  virtual bool PeriodicIO(int core) { return false; }$/;"	f	class:felis::PromiseRoutineTransportService
PeriodicIO	./tcp_node.cc	/^bool TcpNodeTransport::PeriodicIO(int core)$/;"	f	class:felis::TcpNodeTransport
PhysicalSize	./contention_manager.cc	/^  static size_t PhysicalSize() {$/;"	f	struct:felis::VersionPrealloc
Pick	./routine_sched.cc	/^PriorityQueueValue *ConservativePriorityScheduler::Pick()$/;"	f	class:felis::ConservativePriorityScheduler
Pick	./routine_sched.cc	/^PriorityQueueValue *PWVScheduler::Pick()$/;"	f	class:felis::PWVScheduler
PieceCollection	./piece_cc.h	/^class PieceCollection : public BasePieceCollection {$/;"	c	namespace:felis
PieceRoutine	./piece.h	/^struct PieceRoutine {$/;"	s	namespace:felis
PlaceholderParam	./txn_cc.h	/^  PlaceholderParam(int nr = 1) : nr(nr) {}$/;"	f	class:felis::PlaceholderParam
PlaceholderParam	./txn_cc.h	/^class PlaceholderParam {$/;"	c	namespace:felis
PlanLoad	./locality_manager.cc	/^void LocalityManager::PlanLoad(int core, long delta)$/;"	f	class:felis::LocalityManager
Poll	./tcp_node.cc	/^size_t ReceiverChannel::Poll(PieceRoutine **routines, size_t cnt)$/;"	f	class:felis::tcp::ReceiverChannel
PollMappingTable	./node_config.h	/^    PollMappingTable, PollRoutines, EndOfPhase,$/;"	m	class:felis::IncomingTraffic::Status
PollMappingTable	./tcp_node.cc	/^bool ReceiverChannel::PollMappingTable()$/;"	f	class:felis::tcp::ReceiverChannel
PollRoutines	./node_config.h	/^    PollMappingTable, PollRoutines, EndOfPhase,$/;"	m	class:felis::IncomingTraffic::Status
PollRoutines	./tcp_node.cc	/^size_t ReceiverChannel::PollRoutines(PieceRoutine **routines, size_t cnt)$/;"	f	class:felis::tcp::ReceiverChannel
Pool	./mem.h	/^class Pool : public BasicPool {$/;"	c	namespace:mem
PoolStatistics	./mem.h	/^struct PoolStatistics {$/;"	s	namespace:mem
PopulateTxnsFromLogs	./epoch.cc	/^void EpochClient::PopulateTxnsFromLogs(char* &input, uint32_t log_len)$/;"	f	class:felis::EpochClient
PreComplete	./epoch.cc	/^void EpochCallback::PreComplete()$/;"	f	class:felis::EpochCallback
Preempt	./piece.cc	/^bool BasePieceCollection::ExecutionRoutine::Preempt()$/;"	f	class:felis::BasePieceCollection::ExecutionRoutine
Preempt	./routine_sched.cc	/^bool EpochExecutionDispatchService::Preempt(int core_id, BasePieceCollection::ExecutionRoutine *routine_state)$/;"	f	class:felis::EpochExecutionDispatchService
Prefetch	./gc.cc	/^  void Prefetch() {$/;"	f	struct:felis::GarbageBlock
Prefetch	./vhandle.h	/^  void Prefetch() const { __builtin_prefetch(versions); }$/;"	f	class:felis::SortedArrayVHandle
Prefetch	./vhandle_cch.h	/^    void Prefetch() {$/;"	f	struct:felis::VHandleCollectionHandler::Block
PrefetchInbound	./piece.h	/^  virtual void PrefetchInbound() {};$/;"	f	class:felis::PromiseRoutineTransportService
PrefetchInbound	./tcp_node.cc	/^void TcpNodeTransport::PrefetchInbound()$/;"	f	class:felis::TcpNodeTransport
Prepare	./entity.h	/^  void Prepare(void *prepared_buf) { this->k = (VarStr *) prepared_buf; }$/;"	f	class:felis::final
Prepare0	./txn.h	/^  void Prepare0() {$/;"	f	class:felis::BaseTxn
PrepareGCForAllCores	./gc.cc	/^void GC::PrepareGCForAllCores()$/;"	f	class:felis::GC
PrepareInsert0	./txn.h	/^  void PrepareInsert0() {$/;"	f	class:felis::BaseTxn
PrepareSend	./shipping.cc	/^void ShippingHandle::PrepareSend()$/;"	f	class:felis::ShippingHandle
PrepareState	./txn.h	/^  virtual void PrepareState() {}$/;"	f	class:felis::BaseTxn
PreviousFields	./sqltypes.h	/^  typedef Field<FieldSerializer, N - 1> PreviousFields;$/;"	t	class:sql::Field
PrimaryOwner	./slice.h	/^  PrimaryOwner, IndexOwner, DataOwner, NumOwnerTypes$/;"	e	enum:felis::SliceOwnerType
PrintLoads	./locality_manager.cc	/^void LocalityManager::PrintLoads()$/;"	f	class:felis::LocalityManager
PrintMemStats	./mem.cc	/^void PrintMemStats() {$/;"	f	namespace:mem
PrintStats	./gc.cc	/^void GC::PrintStats()$/;"	f	class:felis::GC
PrintUsageEachClass	./mem.cc	/^void ParallelRegion::PrintUsageEachClass()$/;"	f	class:mem::ParallelRegion
PriorityQueueHashEntry	./routine_sched.h	/^struct PriorityQueueHashEntry : public util::GenericListNode<PriorityQueueHashEntry> {$/;"	s	namespace:felis
PriorityQueueHeapEntry	./routine_sched.cc	/^  struct PriorityQueueHeapEntry {$/;"	s	class:felis::final	file:
PriorityQueueValue	./routine_sched.h	/^struct PriorityQueueValue : public util::GenericListNode<PriorityQueueValue> {$/;"	s	namespace:felis
ProbeMain	./felis_probes.cc	/^static struct ProbeMain {$/;"	s	file:
Process	./gc.cc	/^size_t GC::Process(VHandle *handle, uint64_t cur_epoch_nr, size_t limit)$/;"	f	class:felis::GC
ProcessPending	./routine_sched.cc	/^EpochExecutionDispatchService::ProcessPending(PriorityQueue &q)$/;"	f	class:felis::EpochExecutionDispatchService
ProcessVHandle	./vhandle_cch.h	/^  void ProcessVHandle(VHandle *vhandle) {$/;"	f	class:felis::VHandleCollectionHandler
Promise	./mem.h	/^  Promise,$/;"	e	enum:mem::MemAllocType
PromiseAllocationService	./piece.h	/^class PromiseAllocationService {$/;"	c	namespace:felis
PromiseRoutineDispatchService	./piece.h	/^class PromiseRoutineDispatchService {$/;"	c	namespace:felis
PromiseRoutineTransportService	./piece.h	/^class PromiseRoutineTransportService {$/;"	c	namespace:felis
PushRelease	./node_config.cc	/^bool LocalDispatcherImpl::PushRelease(int tid, unsigned int start, unsigned int end)$/;"	f	class:felis::LocalDispatcherImpl
PushRelease	./tcp_node.cc	/^bool SendChannel::PushRelease(int tid, unsigned int start, unsigned int end)$/;"	f	class:felis::tcp::SendChannel
Queue	./node_config.h	/^  struct Queue {$/;"	s	class:felis::LocalDispatcherImpl
QueueRoutine	./node_config.cc	/^void LocalDispatcherImpl::QueueRoutine(PieceRoutine *routine)$/;"	f	class:felis::LocalDispatcherImpl
QueueRoutine	./piece.cc	/^void BasePieceCollection::QueueRoutine(PieceRoutine **routines, size_t nr_routines, int core_id)$/;"	f	class:felis::BasePieceCollection
Quiescence	./entity.h	/^  static void Quiescence() { pool.Quiescence(); };$/;"	f	class:felis::final
Quiescence	./mem.cc	/^void ParallelRegion::Quiescence()$/;"	f	class:mem::ParallelRegion
Quiescence	./mem.h	/^  void Quiescence() {$/;"	f	class:mem::ParallelAllocator
Quiescence	./vhandle.h	/^  static void Quiescence() { pool.Quiescence(); inline_pool.Quiescence(); }$/;"	f	class:felis::BaseVHandle
READ_ONLY_TABLE	./slice.h	197;"	d
REMINDER	./log.h	41;"	d
ROUTINE_SCHED_H	./routine_sched.h	2;"	d
RVPInfo	./pwv_graph.h	/^struct RVPInfo {$/;"	s	namespace:felis
RangeParam	./txn_cc.h	/^  RangeParam(const typename Table::Key &start, const typename Table::Key &end)$/;"	f	class:felis::RangeParam
RangeParam	./txn_cc.h	/^class RangeParam {$/;"	c	namespace:felis
Read	./txn_cc.h	/^    template <typename T> T Read() {$/;"	f	class:felis::Txn::TxnRow
ReadExactVersion	./vhandle.cc	/^VarStr *SortedArrayVHandle::ReadExactVersion(unsigned int version_idx)$/;"	f	class:felis::SortedArrayVHandle
ReadRequests	./console_client.cc	/^void ConsoleClient::ReadRequests()$/;"	f	class:felis::ConsoleClient
ReadVarStr	./txn.cc	/^VarStr *BaseTxn::BaseTxnRow::ReadVarStr()$/;"	f	class:felis::BaseTxn::BaseTxnRow
ReadWithVersion	./vhandle.cc	/^VarStr *CalvinVHandle::ReadWithVersion(uint64_t sid)$/;"	f	class:felis::CalvinVHandle
ReadWithVersion	./vhandle.cc	/^VarStr *LinkListVHandle::ReadWithVersion(uint64_t sid)$/;"	f	class:felis::LinkListVHandle
ReadWithVersion	./vhandle.cc	/^VarStr *SortedArrayVHandle::ReadWithVersion(uint64_t sid)$/;"	f	class:felis::SortedArrayVHandle
Receive	./shipping.h	/^  bool Receive(T *shipment) {$/;"	f	class:felis::ShipmentReceiver
ReceiveACK	./shipping.cc	/^void BaseShipment::ReceiveACK()$/;"	f	class:felis::BaseShipment
ReceiverChannel	./tcp_node.cc	/^  ReceiverChannel(go::TcpSocket *sock, felis::TcpNodeTransport *transport)$/;"	f	class:felis::tcp::ReceiverChannel
ReceiverChannel	./tcp_node.cc	/^class ReceiverChannel : public IncomingTraffic {$/;"	c	namespace:felis::tcp	file:
RefillSlab	./mem.cc	/^Slab *SlabPool::RefillSlab()$/;"	f	class:mem::SlabPool
RegionPool	./mem.h	/^  RegionPool,$/;"	e	enum:mem::MemAllocType
Register	./mem.cc	/^void SlabPool::Register()$/;"	f	class:mem::SlabPool
Register	./mem.cc	/^void WeakPool::Register()$/;"	f	class:mem::WeakPool
Register	./mem.h	/^  void Register() {$/;"	f	class:mem::ParallelAllocator
RegisterCheckpointFormat	./index_common.h	/^  static void RegisterCheckpointFormat(std::string fmt, Checkpoint *pimpl) { impl[fmt] = pimpl; }$/;"	f	class:felis::Checkpoint
RegisterFreeListener	./pwv_graph.cc	/^void PWVGraph::RegisterFreeListener(uint64_t sid, void (*on_node_free)(void *))$/;"	f	class:felis::PWVGraph
RegisterIncoming	./node_config.h	/^  void RegisterIncoming(int idx, IncomingTraffic *t) {$/;"	f	class:felis::NodeConfiguration
RegisterOutgoing	./node_config.h	/^  void RegisterOutgoing(int idx, OutgoingTraffic *t) {$/;"	f	class:felis::NodeConfiguration
RegisterRVPListener	./pwv_graph.cc	/^void PWVGraph::RegisterRVPListener(uint64_t sid, void (*on_node_rvp_change)(void *))$/;"	f	class:felis::PWVGraph
RegisterSchedEntry	./pwv_graph.cc	/^void PWVGraph::RegisterSchedEntry(uint64_t sid, void *sched_entry)$/;"	f	class:felis::PWVGraph
Relation	./stdmap_index_impl.h	/^typedef RelationPolicy<StdMapIndex, SortedArrayVHandle> Relation;$/;"	t	namespace:dolly
RelationManager	./stdmap_index_impl.h	/^typedef RelationManagerPolicy<Relation> RelationManager;$/;"	t	namespace:dolly
Remove	./gc.cc	/^void GarbageBlockSlab::Remove(GarbageBlock *blk, int idx)$/;"	f	class:felis::GarbageBlockSlab
Remove	./probe_utils.h	/^  void Remove(Value *node) {$/;"	f	class:agg::Agg
RemoveEntry	./slice.h	/^  void RemoveEntry(int slice_id, SliceOwnerType type = IndexOwner,$/;"	f	class:felis::SliceMappingTable
RemoveRow	./gc.cc	/^void GC::RemoveRow(VHandle *row, uint64_t gc_handle)$/;"	f	class:felis::GC
ReplayUpdate	./slice.cc	/^void SliceMappingTable::ReplayUpdate(int op) {$/;"	f	class:felis::SliceMappingTable
ReserveEdge	./pwv_graph.h	/^  void ReserveEdge(uint64_t sid, int n = 1) {$/;"	f	class:felis::PWVGraph
Reset	./commit_buffer.cc	/^void CommitBuffer::Reset()$/;"	f	class:felis::CommitBuffer
Reset	./contention_manager.cc	/^void ContentionManager::Reset()$/;"	f	class:felis::ContentionManager
Reset	./epoch.cc	/^void EpochMemory::Reset()$/;"	f	class:felis::EpochMemory
Reset	./epoch.cc	/^void EpochPromiseAllocationService::Reset()$/;"	f	class:felis::EpochPromiseAllocationService
Reset	./epoch.h	/^  void Reset() {$/;"	f	class:felis::EpochClientBaseWorker
Reset	./epoch.h	/^  void Reset(EpochMemberFunc f) { Init(); ctx = nullptr; func = f; }$/;"	f	class:felis::EpochControl
Reset	./locality_manager.cc	/^void LocalityManager::Reset()$/;"	f	class:felis::LocalityManager
Reset	./mem.h	/^  void Reset() { offset = 0; }$/;"	f	class:mem::Brk
Reset	./node_config.cc	/^void TransportBatcher::Reset(int nr_nodes, int nr_cores)$/;"	f	class:felis::TransportBatcher
Reset	./node_config.h	/^    void Reset(int nr_nodes) {$/;"	f	class:felis::TransportBatcher::LocalMetadata
Reset	./pwv_graph.cc	/^void PWVGraph::Reset()$/;"	f	class:felis::PWVGraph
Reset	./routine_sched.cc	/^void EpochExecutionDispatchService::Reset()$/;"	f	class:felis::EpochExecutionDispatchService
Reset	./routine_sched.cc	/^void PWVScheduler::Reset()$/;"	f	class:felis::PWVScheduler
Reset	./tcp_node.cc	/^  void Reset() {$/;"	f	class:felis::tcp::ReceiverChannel	file:
ResetAutoIncrement	./index_common.h	/^  void ResetAutoIncrement(int zone = 0, uint64_t ts = 0) {$/;"	f	class:felis::Table
ResetBufferPlan	./node_config.cc	/^void NodeConfiguration::ResetBufferPlan()$/;"	f	class:felis::NodeConfiguration
ResetCursor	./shipping.cc	/^void SliceScanner::ResetCursor() {$/;"	f	class:felis::SliceScanner
ResetThreadInfo	./masstree_index_impl.cc	/^void MasstreeIndex::ResetThreadInfo()$/;"	f	class:felis::MasstreeIndex
ReturnSlab	./mem.cc	/^void SlabPool::ReturnSlab()$/;"	f	class:mem::SlabPool
RowEntity	./entity.cc	/^RowEntity::RowEntity(int rel_id, VarStr *k, VHandle *handle, int slice_id)$/;"	f	class:felis::RowEntity
RowEntity	./entity.h	/^  RowEntity() : RowEntity(-1, nullptr, nullptr, -1) {}$/;"	f	class:felis::final
RowScannerRoutine	./shipping.h	/^class RowScannerRoutine : public go::Routine {$/;"	c	namespace:felis
RowShipmentReceiver	./shipping.h	/^  RowShipmentReceiver(go::TcpSocket *sock) : ShipmentReceiver<RowEntity>(sock) {}$/;"	f	class:felis::RowShipmentReceiver
RowShipmentReceiver	./shipping.h	/^class RowShipmentReceiver : public ShipmentReceiver<RowEntity> {$/;"	c	namespace:felis
Run	./epoch.cc	/^void AllocStateTxnWorker::Run()$/;"	f	class:felis::AllocStateTxnWorker
Run	./epoch.cc	/^void CallTxnsWorker::Run()$/;"	f	class:felis::CallTxnsWorker
Run	./epoch.cc	/^void EpochDispatcher::Run()$/;"	f	class:felis::EpochDispatcher
Run	./piece.cc	/^void BasePieceCollection::ExecutionRoutine::Run()$/;"	f	class:felis::BasePieceCollection::ExecutionRoutine
Run	./shipping.cc	/^void RowScannerRoutine::Run()$/;"	f	class:felis::RowScannerRoutine
Run	./shipping.cc	/^void RowShipmentReceiver::Run()$/;"	f	class:felis::RowShipmentReceiver
Run	./tcp_node.cc	/^void NodeRowShipmentReceiverRoutine::Run()$/;"	f	class:felis::tcp::NodeRowShipmentReceiverRoutine
Run	./tcp_node.cc	/^void NodeServerRoutine::Run()$/;"	f	class:felis::tcp::NodeServerRoutine
Run	./tcp_node.cc	/^void SendChannel::FlusherRoutine::Run()$/;"	f	class:felis::tcp::SendChannel::FlusherRoutine
Run0	./txn.h	/^  void Run0() {$/;"	f	class:felis::BaseTxn
RunGC	./gc.cc	/^void GC::RunGC()$/;"	f	class:felis::GC
RunHandler	./vhandle_cch.h	/^  void RunHandler() {$/;"	f	class:felis::VHandleCollectionHandler
RunSend	./shipping.h	/^  bool RunSend() {$/;"	f	class:felis::Shipment
Running	./console.h	/^    Booting, Configuring, Listening, Connecting, Running, Exiting,$/;"	e	enum:felis::Console::ServerStatus
SHARD_TABLE	./slice.h	191;"	d
SHIPPING_H_	./shipping.h	2;"	d
SLICE_H	./slice.h	4;"	d
SQLTYPES_H	./sqltypes.h	4;"	d
STDMAP_INDEX_IMPL_H	./stdmap_index_impl.h	2;"	d
Scan	./shipping.h	/^  void Scan() {$/;"	f	class:felis::ObjectSliceScanner
ScanAll	./slice.h	/^  template <typename ScannerType> void ScanAll(ScannerType ** scanners) {$/;"	f	class:felis::SliceManager
ScanAllRow	./slice.h	/^  void ScanAllRow() { ScanAll(row_slice_scanners); }$/;"	f	class:felis::SliceManager
ScanAndFinalize	./contention_manager.cc	/^void VersionBufferHead::ScanAndFinalize(int owner_core, long from, long to,$/;"	f	class:felis::VersionBufferHead
ScanShippingHandle	./shipping.h	/^  void ScanShippingHandle() {$/;"	f	class:felis::ObjectSliceScanner
ScanShippingHandle	./slice.cc	/^void SliceManager::ScanShippingHandle() {$/;"	f	class:felis::SliceManager
ScannerBegin	./shipping.cc	/^void SliceScanner::ScannerBegin()$/;"	f	class:felis::SliceScanner
ScannerEnd	./shipping.cc	/^void SliceScanner::ScannerEnd()$/;"	f	class:felis::SliceScanner
Schemas	./sqltypes.h	/^  Schemas() {}$/;"	f	class:sql::Schemas
Schemas	./sqltypes.h	/^class Schemas : public Object<LastField> {$/;"	c	namespace:sql
Search	./hashtable_index_impl.cc	/^VHandle *HashtableIndex::Search(const VarStrView &k)$/;"	f	class:felis::HashtableIndex
Search	./index_common.h	/^  virtual VHandle *Search(const VarStrView &k) { return nullptr; }$/;"	f	class:felis::Table
Search	./masstree_index_impl.cc	/^VHandle *MasstreeIndex::Search(const VarStrView &k)$/;"	f	class:felis::MasstreeIndex
Search	./stdmap_index_impl.h	/^  VHandle *Search(const VarStr *k) {$/;"	f	class:dolly::StdMapIndex
SearchOrCreate	./hashtable_index_impl.cc	/^VHandle *HashtableIndex::SearchOrCreate(const VarStrView &k)$/;"	f	class:felis::HashtableIndex
SearchOrCreate	./hashtable_index_impl.cc	/^VHandle *HashtableIndex::SearchOrCreate(const VarStrView &k, bool *created)$/;"	f	class:felis::HashtableIndex
SearchOrCreate	./index_common.h	/^  virtual VHandle *SearchOrCreate(const VarStrView &k) { return nullptr; }$/;"	f	class:felis::Table
SearchOrCreate	./index_common.h	/^  virtual VHandle *SearchOrCreate(const VarStrView &k, bool *created) { return nullptr; }$/;"	f	class:felis::Table
SearchOrCreate	./masstree_index_impl.cc	/^VHandle *MasstreeIndex::SearchOrCreate(const VarStrView &k)$/;"	f	class:felis::MasstreeIndex
SearchOrCreate	./masstree_index_impl.cc	/^VHandle *MasstreeIndex::SearchOrCreate(const VarStrView &k, bool *created)$/;"	f	class:felis::MasstreeIndex
SearchOrCreateImpl	./masstree_index_impl.cc	/^VHandle *MasstreeIndex::SearchOrCreateImpl(const VarStrView &k, Func f)$/;"	f	class:felis::MasstreeIndex
SelectRow	./locality_manager.cc	/^VHandle *LocalityManager::SelectRow(uint64_t bitmap, VHandle *const *it)$/;"	f	class:felis::LocalityManager
SendChannel	./tcp_node.cc	/^SendChannel::SendChannel(go::TcpSocket *sock, int dst_node)$/;"	f	class:felis::tcp::SendChannel
SendChannel	./tcp_node.cc	/^class SendChannel : public Flushable<SendChannel>, public OutgoingTraffic {$/;"	c	namespace:felis::tcp	file:
SendIOVec	./shipping.cc	/^void BaseShipment::SendIOVec(struct iovec *vec, int nr_vec)$/;"	f	class:felis::BaseShipment
SendStartPhase	./node_config.cc	/^void NodeConfiguration::SendStartPhase()$/;"	f	class:felis::NodeConfiguration
Serializer	./sqltypes.h	/^struct Serializer {$/;"	s	namespace:sql
Serializer	./sqltypes.h	/^struct Serializer<Object<Base>> {$/;"	s	namespace:sql
Serializer	./sqltypes.h	/^struct Serializer<inline_str_base<SizeType, N>> {$/;"	s	namespace:sql
Serializer	./sqltypes.h	/^struct Serializer<std::vector<T>> {$/;"	s	namespace:sql
ServerStatus	./console.h	/^  enum ServerStatus {$/;"	g	class:felis::Console
SetCurrentAffinity	./mem.cc	/^void ParallelAllocationPolicy::SetCurrentAffinity(int aff)$/;"	f	class:mem::ParallelAllocationPolicy
SetEntry	./slice.cc	/^void SliceMappingTable::SetEntry(int slice_id, bool owned, SliceOwnerType type,$/;"	f	class:felis::SliceMappingTable
SetupNodeName	./node_config.cc	/^void NodeConfiguration::SetupNodeName(std::string name)$/;"	f	class:felis::NodeConfiguration
SetupServer	./receiver.cc	/^static int SetupServer(const char *addr, int port)$/;"	f	file:
Shipment	./shipping.h	/^class Shipment : public BaseShipment {$/;"	c	namespace:felis
ShipmentReceiver	./shipping.h	/^  ShipmentReceiver(go::TcpSocket *sock) : sock(sock) {}$/;"	f	class:felis::ShipmentReceiver
ShipmentReceiver	./shipping.h	/^class ShipmentReceiver : public go::Routine {$/;"	c	namespace:felis
ShippingHandle	./shipping.cc	/^ShippingHandle::ShippingHandle()$/;"	f	class:felis::ShippingHandle
ShippingHandle	./shipping.h	/^class ShippingHandle : public util::ListNode {$/;"	c	namespace:felis
ShouldPickWaiting	./routine_sched.cc	/^bool ConservativePriorityScheduler::ShouldPickWaiting(const WaitState &ws)$/;"	f	class:felis::ConservativePriorityScheduler
ShouldPickWaiting	./routine_sched.cc	/^bool PWVScheduler::ShouldPickWaiting(const WaitState &ws)$/;"	f	class:felis::PWVScheduler
ShouldRetryBeforePick	./routine_sched.cc	/^bool PWVScheduler::ShouldRetryBeforePick(std::atomic_ulong *zq_start, std::atomic_ulong *zq_end,$/;"	f	class:felis::PWVScheduler
ShouldScanSkip	./vhandle.cc	/^bool SortedArrayVHandle::ShouldScanSkip(uint64_t sid)$/;"	f	class:felis::SortedArrayVHandle
ShouldSkip	./entity.cc	/^bool RowEntity::ShouldSkip()$/;"	f	class:felis::RowEntity
ShouldSkip	./stdmap_index_impl.h	/^    bool ShouldSkip(uint64_t sid, CommitBuffer &buffer) {$/;"	f	struct:dolly::StdMapIndex::StdMapIteratorImpl
Show	./log.cc	/^void PerfLog::Show(const char *msg)$/;"	f	class:PerfLog
Show	./log.h	/^  void Show(std::string str) { Show(str.c_str()); }$/;"	f	class:PerfLog
ShowAllModules	./module.h	/^void Module<Type>::ShowAllModules()$/;"	f	class:felis::Module
ShowUsage	./receiver.cc	/^static void ShowUsage(const char *prog)$/;"	f	file:
Signal	./txn_cc.h	/^  void Signal() { ready = true; }$/;"	f	class:felis::FutureValue
Signal	./txn_cc.h	/^  void Signal(T v) {$/;"	f	class:felis::FutureValue
SimpleSync	./vhandle_sync.cc	/^SimpleSync::SimpleSync()$/;"	f	class:felis::SimpleSync
SimpleSync	./vhandle_sync.h	/^class SimpleSync : public VHandleSyncService {$/;"	c	namespace:felis
SimpleSyncData	./vhandle_sync.cc	/^struct SimpleSyncData {$/;"	s	namespace:felis	file:
SizeToClass	./mem.h	/^  static int SizeToClass(size_t sz) {$/;"	f	class:mem::ParallelRegion
Slab	./mem.cc	/^  Slab(util::GenericListNode<Slab> *qhead, MemAllocType alloc_type, size_t chunk_size, void *p) {$/;"	f	class:mem::Slab	file:
Slab	./mem.cc	/^class Slab : public util::GenericListNode<Slab> {$/;"	c	namespace:mem	file:
SlabMemory	./mem.cc	/^struct SlabMemory {$/;"	s	namespace:mem	file:
SlabPool	./mem.cc	/^SlabPool::SlabPool(MemAllocType alloc_type, unsigned int chunk_size,$/;"	f	class:mem::SlabPool
SlabPool	./mem.h	/^class SlabPool {$/;"	c	namespace:mem
Slice	./slice.cc	/^Slice::Slice(int slice_id)$/;"	f	class:felis::Slice
Slice	./slice.h	/^class Slice {$/;"	c	namespace:felis
SliceLocator	./slice.h	/^class SliceLocator {$/;"	c	namespace:felis
SliceManager	./slice.h	/^  SliceManager() {}$/;"	f	class:felis::SliceManager
SliceManager	./slice.h	/^class SliceManager {$/;"	c	namespace:felis
SliceMappingTable	./slice.cc	/^SliceMappingTable::SliceMappingTable() {$/;"	f	class:felis::SliceMappingTable
SliceMappingTable	./slice.h	/^class SliceMappingTable {$/;"	c	namespace:felis
SliceOwnerType	./slice.h	/^enum SliceOwnerType {$/;"	g	namespace:felis
SliceQueue	./slice.h	/^  SliceQueue() : size(0), need_lock(false) {$/;"	f	struct:felis::SliceQueue
SliceQueue	./slice.h	/^struct SliceQueue {$/;"	s	namespace:felis
SliceScanner	./shipping.cc	/^SliceScanner::SliceScanner(Slice * slice) : slice(slice)$/;"	f	class:felis::SliceScanner
SliceScanner	./shipping.h	/^class SliceScanner {$/;"	c	namespace:felis
SortedArrayVHandle	./vhandle.cc	/^SortedArrayVHandle::SortedArrayVHandle()$/;"	f	class:felis::SortedArrayVHandle
SortedArrayVHandle	./vhandle.h	/^class SortedArrayVHandle : public BaseVHandle {$/;"	c	namespace:felis
Spin	./vhandle_sync.cc	/^bool SpinnerSlot::Spin(uint64_t sid, uint64_t ver, ulong &wait_cnt, volatile uintptr_t *ptr)$/;"	f	class:felis::SpinnerSlot
SpinnerSlot	./vhandle_sync.cc	/^SpinnerSlot::SpinnerSlot()$/;"	f	class:felis::SpinnerSlot
SpinnerSlot	./vhandle_sync.h	/^class SpinnerSlot : public VHandleSyncService {$/;"	c	namespace:felis
SpinnerSlotData	./vhandle_sync.cc	/^struct SpinnerSlotData {$/;"	s	namespace:felis	file:
Start	./epoch.cc	/^void EpochClient::Start()$/;"	f	class:felis::EpochClient
Start	./log.cc	/^void PerfLog::Start()$/;"	f	class:PerfLog
StatAddObject	./shipping.cc	/^void SliceScanner::StatAddObject()$/;"	f	class:felis::SliceScanner
State	./txn_cc.h	/^  typedef GenericEpochObject<TxnState> State;$/;"	t	class:felis::Txn
Status	./node_config.h	/^  enum class Status {$/;"	c	class:felis::IncomingTraffic
StdMapIndex	./stdmap_index_impl.h	/^class StdMapIndex {$/;"	c	namespace:dolly
StdMapIteratorImpl	./stdmap_index_impl.h	/^    StdMapIteratorImpl(MapIterator current_it, MapIterator end_it, int rid, uint64_t sid,$/;"	f	struct:dolly::StdMapIndex::StdMapIteratorImpl
StdMapIteratorImpl	./stdmap_index_impl.h	/^  struct StdMapIteratorImpl {$/;"	s	class:dolly::StdMapIndex
SubmitOnCore	./node_config.cc	/^void LocalDispatcherImpl::SubmitOnCore(PieceRoutine **routines, unsigned int start, unsigned int end, int thread)$/;"	f	class:felis::LocalDispatcherImpl
Sum	./probe_utils.h	/^struct Sum {$/;"	s	namespace:agg
TBD	./log.h	35;"	d
TCP_NODE_H	./tcp_node.h	2;"	d
THRESHOLD_AUTOTUNE_H	./threshold_autotune.h	2;"	d
TLSThreadInfo	./masstree_index_impl.cc	/^static thread_local threadinfo *TLSThreadInfo;$/;"	m	namespace:felis	file:
TRACE_COMPLETION	./log.h	77;"	d
TRACE_EXEC_ROUTINE	./log.h	75;"	d
TRACE_GC	./log.h	76;"	d
TXN_CC_H	./txn_cc.h	4;"	d
TXN_H	./txn.h	2;"	d
Table	./index_common.h	/^  Table() : id(-1), read_only(false) {$/;"	f	class:felis::Table
Table	./index_common.h	/^class Table {$/;"	c	namespace:felis
Table	./masstree_index_impl.cc	/^    : Table()$/;"	f	namespace:felis
TableManager	./index_common.h	/^  TableManager() {}$/;"	f	class:felis::TableManager
TableManager	./index_common.h	/^class TableManager {$/;"	c	namespace:felis
TcpNodeTransport	./tcp_node.cc	/^TcpNodeTransport::TcpNodeTransport()$/;"	f	class:felis::TcpNodeTransport
TcpNodeTransport	./tcp_node.h	/^class TcpNodeTransport : public PromiseRoutineTransportService {$/;"	c	namespace:felis
ThreadInfo	./hashtable_index_impl.cc	/^struct ThreadInfo {$/;"	s	namespace:felis	file:
ThresholdAutoTuneController	./threshold_autotune.h	/^class ThresholdAutoTuneController {$/;"	c	namespace:felis
ToHex	./varstr.h	/^  std::string ToHex() const {$/;"	f	class:felis::final
ToInt	./opts.h	/^  int ToInt(const char *def = nullptr) const {$/;"	f	struct:felis::Option
ToLargeNumber	./opts.h	/^  long long ToLargeNumber(const char *def = nullptr) const {$/;"	f	struct:felis::Option
ToString	./vhandle.cc	/^std::string SortedArrayVHandle::ToString() const$/;"	f	class:felis::SortedArrayVHandle
ToType	./varstr.h	/^  const T ToType() const {$/;"	f	class:felis::final
ToView	./varstr.h	/^  VarStrView ToView() const {$/;"	f	class:felis::final
TotalBatchCounter	./node_config.h	/^  std::atomic_ulong &TotalBatchCounter(int idx) { return total_batch_counters[idx]; }$/;"	f	class:felis::NodeConfiguration
TotalMemoryAllocated	./mem.cc	/^long TotalMemoryAllocated()$/;"	f	namespace:mem
TpccDelivery	./felis_probes.h	/^struct TpccDelivery {$/;"	s	namespace:felis::probes
TpccNewOrder	./felis_probes.h	/^struct TpccNewOrder {$/;"	s	namespace:felis::probes
TpccPayment	./felis_probes.h	/^struct TpccPayment {$/;"	s	namespace:felis::probes
TraceDependency	./piece.h	/^  virtual int TraceDependency(uint64_t) { return -1; }$/;"	f	class:felis::PromiseRoutineDispatchService
TraceDependency	./routine_sched.cc	/^int EpochExecutionDispatchService::TraceDependency(uint64_t key)$/;"	f	class:felis::EpochExecutionDispatchService
TransportBatcher	./node_config.h	/^  TransportBatcher() {}$/;"	f	class:felis::TransportBatcher
TransportBatcher	./node_config.h	/^class TransportBatcher {$/;"	c	namespace:felis
TransportPromiseRoutine	./node_config.cc	/^void LocalTransport::TransportPromiseRoutine(PieceRoutine *routine)$/;"	f	class:felis::LocalTransport
TransportPromiseRoutine	./tcp_node.cc	/^void TcpNodeTransport::TransportPromiseRoutine(PieceRoutine *routine)$/;"	f	class:felis::TcpNodeTransport
TryFlushForCore	./node_config.cc	/^bool LocalTransport::TryFlushForCore(int core_id)$/;"	f	class:felis::LocalTransport
TryFlushForThread	./node_config.h	/^  std::tuple<bool, bool> TryFlushForThread(int i) {$/;"	f	class:felis::Flushable
TryLock	./node_config.h	/^  bool TryLock(int i) {$/;"	f	class:felis::LocalDispatcherImpl
TryLock	./tcp_node.cc	/^  bool TryLock() {$/;"	f	class:felis::tcp::ReceiverChannel	file:
TryLock	./tcp_node.cc	/^  bool TryLock(int i) {$/;"	f	class:felis::tcp::SendChannel
TupleField	./sqltypes.h	/^  TupleField() : ParentTupleFields() {}$/;"	f	struct:sql::TupleField
TupleField	./sqltypes.h	/^  TupleField() {}$/;"	f	struct:sql::TupleField
TupleField	./sqltypes.h	/^  TupleField(const T &v) : value(v) {}$/;"	f	struct:sql::TupleField
TupleField	./sqltypes.h	/^  TupleField(const T &v, const Types&... args) : value(v), ParentTupleFields(args...) {}$/;"	f	struct:sql::TupleField
TupleField	./sqltypes.h	/^struct TupleField : public TupleField<Types...> {$/;"	s	namespace:sql
TupleField	./sqltypes.h	/^struct TupleField<T> {$/;"	s	namespace:sql
TupleFieldType	./sqltypes.h	/^struct TupleFieldType {$/;"	s	namespace:sql
TupleFieldType	./sqltypes.h	/^struct TupleFieldType<0, TupleField, T, Types...> {$/;"	s	namespace:sql
TupleImpl	./sqltypes.h	/^  TupleImpl(const TupleField<Types...> &rhs) : TupleField<Types...>(rhs) {}$/;"	f	class:sql::TupleImpl
TupleImpl	./sqltypes.h	/^class TupleImpl : public TupleField<Types...> {$/;"	c	namespace:sql
Txn	./mem.h	/^  Txn,$/;"	e	enum:mem::MemAllocType
Txn	./txn_cc.h	/^  Txn(uint64_t serial_id) : BaseTxn(serial_id) {}$/;"	f	class:felis::Txn
Txn	./txn_cc.h	/^  Txn(uint64_t serial_id, long serv_time_) : BaseTxn(serial_id, serv_time_) {}$/;"	f	class:felis::Txn
Txn	./txn_cc.h	/^class Txn : public BaseTxn {$/;"	c	namespace:felis
TxnHandle	./txn_cc.h	/^    TxnHandle(const BaseTxnHandle &rhs) : BaseTxnHandle(rhs) {}$/;"	f	class:felis::Txn::TxnHandle
TxnHandle	./txn_cc.h	/^  class TxnHandle : public BaseTxnHandle {$/;"	c	class:felis::Txn
TxnIndexInsert	./txn_cc.h	/^  NodeBitmap TxnIndexInsert(CompletionParam *pp,$/;"	f	class:felis::Txn
TxnIndexInsertOpImpl	./txn_cc.h	/^    TxnIndexInsertOpImpl(const BaseTxnIndexOpContext &ctx, int idx) {$/;"	f	struct:felis::Txn::TxnIndexInsertOpImpl
TxnIndexInsertOpImpl	./txn_cc.h	/^  struct TxnIndexInsertOpImpl {$/;"	s	class:felis::Txn
TxnIndexLookup	./txn_cc.h	/^  NodeBitmap TxnIndexLookup(CompletionParam *pp,$/;"	f	class:felis::Txn
TxnIndexLookupOpImpl	./txn_cc.h	/^    TxnIndexLookupOpImpl(const BaseTxnIndexOpContext &ctx, int idx) {$/;"	f	struct:felis::Txn::TxnIndexLookupOpImpl
TxnIndexLookupOpImpl	./txn_cc.h	/^  struct TxnIndexLookupOpImpl {$/;"	s	class:felis::Txn
TxnIndexOp	./txn_cc.h	/^  NodeBitmap TxnIndexOp(OnCompleteParam *pp,$/;"	f	class:felis::Txn
TxnIndexOpContext	./txn_cc.h	/^    TxnIndexOpContext() {}$/;"	f	struct:felis::Txn::TxnIndexOpContext
TxnIndexOpContext	./txn_cc.h	/^    TxnIndexOpContext(BaseTxnHandle handle, EpochObject state, uint16_t bitmap, T ...params) {$/;"	f	struct:felis::Txn::TxnIndexOpContext
TxnIndexOpContext	./txn_cc.h	/^  struct TxnIndexOpContext : public BaseTxn::BaseTxnIndexOpContext {$/;"	s	class:felis::Txn
TxnIndexOpContextEx	./txn_cc.h	/^  struct TxnIndexOpContextEx : public TxnIndexOpContext, public Extra {$/;"	s	class:felis::Txn
TxnIndexOpContextEx	./txn_cc.h	/^  struct TxnIndexOpContextEx<void> : public TxnIndexOpContext {$/;"	s	class:felis::Txn
TxnIndexOpWithNodeBitmap	./txn_cc.h	/^  NodeBitmap TxnIndexOpWithNodeBitmap(NodeBitmap nodes_bitmap,$/;"	f	class:felis::Txn
TxnProc	./txn_cc.h	/^  TxnProc(int node, Func func, Types... params) {$/;"	f	class:felis::Txn
TxnRow	./txn_cc.h	/^  class TxnRow : public BaseTxnRow {$/;"	c	class:felis::Txn
TxnSet	./epoch.h	/^    TxnSet(size_t nr) : nr(nr) {}$/;"	f	struct:felis::EpochTxnSet::TxnSet
TxnSet	./epoch.h	/^  struct TxnSet {$/;"	s	struct:felis::EpochTxnSet
TxnStateCompletion	./txn_cc.h	/^class TxnStateCompletion {$/;"	c	namespace:felis
Type	./sqltypes.h	/^  typedef TupleField<T, Types...> Type;$/;"	t	struct:sql::TupleFieldType
Type	./sqltypes.h	/^  typedef typename TupleFieldType<N - 1, TupleField, Types...>::Type Type;$/;"	t	struct:sql::TupleFieldType
Unlock	./node_config.h	/^  void Unlock(int i) {$/;"	f	class:felis::LocalDispatcherImpl
Unlock	./tcp_node.cc	/^  void Unlock() {$/;"	f	class:felis::tcp::ReceiverChannel	file:
Unlock	./tcp_node.cc	/^  void Unlock(int i) {$/;"	f	class:felis::tcp::SendChannel
UpdateBatchCountersFromReceiver	./node_config.cc	/^int NodeConfiguration::UpdateBatchCountersFromReceiver(unsigned long *data)$/;"	f	class:felis::NodeConfiguration
UpdateFlushStart	./node_config.h	/^  void UpdateFlushStart(int tid, unsigned int flush_start) {$/;"	f	class:felis::LocalDispatcherImpl
UpdateFlushStart	./tcp_node.cc	/^  void UpdateFlushStart(int tid, unsigned int flush_start) {$/;"	f	class:felis::tcp::SendChannel
UpdateForKey	./txn_cc.h	/^  InvokeHandle<TxnState, Types...> UpdateForKey($/;"	f	class:felis::Txn
UpdateForKeyAffinity	./txn.cc	/^int64_t BaseTxn::UpdateForKeyAffinity(int node, VHandle *row)$/;"	f	class:felis::BaseTxn
UpdateServerStatus	./console.h	/^  void UpdateServerStatus(ServerStatus status) {$/;"	f	class:felis::Console
UpdateSliceMappingTablesFromReceiver	./slice.h	/^  void UpdateSliceMappingTablesFromReceiver(int nr_ops, uint32_t *data) {$/;"	f	class:felis::SliceMappingTable
VALUES	./sqltypes.h	450;"	d
VARSTR_H	./varstr.h	2;"	d
VHANDLE_BATCHAPPENDER_H	./contention_manager.h	2;"	d
VHANDLE_CCH_H	./vhandle_cch.h	2;"	d
VHANDLE_H	./vhandle.h	4;"	d
VHandle	./vhandle.h	/^class VHandle : public CalvinVHandle {};$/;"	c	namespace:felis
VHandle	./vhandle.h	/^class VHandle : public SortedArrayVHandle {};$/;"	c	namespace:felis
VHandleAbsorb	./felis_probes.h	/^struct VHandleAbsorb {$/;"	s	namespace:felis::probes
VHandleAppend	./felis_probes.h	/^struct VHandleAppend {$/;"	s	namespace:felis::probes
VHandleAppendSlowPath	./felis_probes.h	/^struct VHandleAppendSlowPath {$/;"	s	namespace:felis::probes
VHandleCollectionHandler	./vhandle_cch.h	/^  VHandleCollectionHandler() {$/;"	f	class:felis::VHandleCollectionHandler
VHandleCollectionHandler	./vhandle_cch.h	/^class VHandleCollectionHandler {$/;"	c	namespace:felis
VHandleExpand	./felis_probes.h	/^struct VHandleExpand {$/;"	s	namespace:felis::probes
VHandleSyncService	./vhandle.h	/^class VHandleSyncService {$/;"	c	namespace:felis
VHandleToResource	./pwv_graph.cc	/^PWVGraph::Resource PWVGraph::VHandleToResource(VHandle *vhandle)$/;"	f	class:felis::PWVGraph
Value	./probe_utils.h	/^    Value(Agg &agg) : parent(&agg) {$/;"	f	struct:agg::Agg::Value
Value	./probe_utils.h	/^  struct Value : public Impl {$/;"	s	class:agg::Agg
ValueSerializer	./sqltypes.h	/^struct ValueSerializer : public Serializer<T> {};$/;"	s	namespace:sql
ValueSerializer	./sqltypes.h	/^struct ValueSerializer<InheritBasePtr> : public Serializer<InheritBasePtr> {$/;"	s	namespace:sql
ValueType	./sqltypes.h	/^  typedef T ValueType;$/;"	t	struct:sql::TupleFieldType
ValueType	./sqltypes.h	/^  typedef typename TupleFieldType<N - 1, TupleField, Types...>::ValueType ValueType;$/;"	t	struct:sql::TupleFieldType
VarStr	./varstr.h	/^  VarStr() {}$/;"	f	class:felis::final
VarStrView	./varstr.h	/^  VarStrView() : w(0) {}$/;"	f	class:felis::final
VarStrView	./varstr.h	/^  VarStrView(uint16_t len, const uint8_t *data) {$/;"	f	class:felis::final
VersionBuffer	./contention_manager.cc	/^struct VersionBuffer {$/;"	s	namespace:felis	file:
VersionBufferHandle	./contention_manager.h	/^struct VersionBufferHandle {$/;"	s	namespace:felis
VersionBufferHead	./contention_manager.cc	/^struct VersionBufferHead {$/;"	s	namespace:felis	file:
VersionBufferHeadAllocation	./contention_manager.cc	/^struct VersionBufferHeadAllocation {$/;"	s	namespace:felis	file:
VersionPrealloc	./contention_manager.cc	/^  VersionPrealloc() : ptr(nullptr) {}$/;"	f	struct:felis::VersionPrealloc
VersionPrealloc	./contention_manager.cc	/^  VersionPrealloc(uint8_t *p) : ptr(p) {}$/;"	f	struct:felis::VersionPrealloc
VersionPrealloc	./contention_manager.cc	/^struct VersionPrealloc {$/;"	s	namespace:felis	file:
VersionRead	./felis_probes.h	/^struct VersionRead {$/;"	s	namespace:felis::probes
VersionWrite	./felis_probes.h	/^struct VersionWrite {$/;"	s	namespace:felis::probes
VhandlePool	./mem.h	/^  VhandlePool,$/;"	e	enum:mem::MemAllocType
Wait	./txn_cc.h	/^  T &Wait() {$/;"	f	class:felis::FutureValue
Wait	./txn_cc.h	/^  void Wait() {$/;"	f	class:felis::FutureValue
WaitCountPerMS	./epoch.cc	/^long EpochClient::WaitCountPerMS()$/;"	f	class:felis::EpochClient
WaitCounters	./felis_probes.h	/^struct WaitCounters {$/;"	s	namespace:felis::probes
WaitForAllClient	./receiver.cc	/^static void WaitForAllClient(int server_fd, int nfds, int fds[])$/;"	f	file:
WaitForData	./vhandle_sync.cc	/^void SimpleSync::WaitForData(volatile uintptr_t *addr, uint64_t sid, uint64_t ver, void *handle)$/;"	f	class:felis::SimpleSync
WaitForData	./vhandle_sync.cc	/^void SpinnerSlot::WaitForData(volatile uintptr_t *addr, uint64_t sid, uint64_t ver,$/;"	f	class:felis::SpinnerSlot
WaitForServerStatus	./console.h	/^  void WaitForServerStatus(ServerStatus status) {$/;"	f	class:felis::Console
WaitForTurn	./vhandle.cc	/^uint64_t CalvinVHandle::WaitForTurn(uint64_t sid)$/;"	f	class:felis::CalvinVHandle
WaitState	./routine_sched.h	/^struct WaitState {$/;"	s	namespace:felis
WeakPool	./mem.cc	/^WeakPool::WeakPool(MemAllocType alloc_type, size_t chunk_size, size_t cap, void *data)$/;"	f	class:mem::WeakPool
WeakPool	./mem.cc	/^WeakPool::WeakPool(MemAllocType alloc_type, size_t chunk_size, size_t cap,$/;"	f	class:mem::WeakPool
WeakPool	./mem.h	/^  WeakPool() : data(nullptr), len(0), head(nullptr), capacity(0), need_unmap(false) {}$/;"	f	class:mem::WeakPool
WeakPool	./mem.h	/^  WeakPool(WeakPool &&rhs) {$/;"	f	class:mem::WeakPool
WeakPool	./mem.h	/^class WeakPool {$/;"	c	namespace:mem
WeightDist	./locality_manager.h	/^  struct WeightDist {$/;"	s	class:felis::LocalityManager
WithVersion	./vhandle.cc	/^volatile uintptr_t *SortedArrayVHandle::WithVersion(uint64_t sid, int &pos)$/;"	f	class:felis::SortedArrayVHandle
WorkloadModule	./module.h	/^  WorkloadModule,$/;"	e	enum:felis::ModuleType
Write	./txn_cc.h	/^    template <typename T> bool Write(const T &o) {$/;"	f	class:felis::Txn::TxnRow
WriteExactVersion	./vhandle.cc	/^bool SortedArrayVHandle::WriteExactVersion(unsigned int version_idx, VarStr *obj, uint64_t epoch_nr)$/;"	f	class:felis::SortedArrayVHandle
WriteResponse	./console_client.cc	/^bool ConsoleClient::WriteResponse(std::string response)$/;"	f	class:felis::ConsoleClient
WriteTryInline	./txn_cc.h	/^    template <typename T> bool WriteTryInline(const T &o) {$/;"	f	class:felis::Txn::TxnRow
WriteVarStr	./txn.cc	/^bool BaseTxn::BaseTxnRow::WriteVarStr(VarStr *obj)$/;"	f	class:felis::BaseTxn::BaseTxnRow
WriteWithVersion	./vhandle.cc	/^bool CalvinVHandle::WriteWithVersion(uint64_t sid, VarStr *obj, uint64_t epoch_nr, bool dry_run)$/;"	f	class:felis::CalvinVHandle
WriteWithVersion	./vhandle.cc	/^bool LinkListVHandle::WriteWithVersion(uint64_t sid, VarStr *obj, uint64_t epoch_nr, bool dry_run)$/;"	f	class:felis::LinkListVHandle
WriteWithVersion	./vhandle.cc	/^bool SortedArrayVHandle::WriteWithVersion(uint64_t sid, VarStr *obj, uint64_t epoch_nr)$/;"	f	class:felis::SortedArrayVHandle
_	./sqltypes.h	/^  typename TupleFieldType<N, TupleField, Types...>::ValueType _() const {$/;"	f	class:sql::TupleImpl
_COMPLETION_H	./completion.h	2;"	d
_FromKeyParam	./txn_cc.h	/^    int _FromKeyParam(uint16_t bitmap, int bitshift, int shift, R param) {$/;"	f	struct:felis::Txn::TxnIndexOpContext
_FromKeyParam	./txn_cc.h	/^    void _FromKeyParam(uint16_t bitmap, int bitshift, int shift, R param, T ...rest) {$/;"	f	struct:felis::Txn::TxnIndexOpContext
_G	./literals.h	/^constexpr unsigned long long operator"" _G(unsigned long long N) { return N << 30; }$/;"	f
_K	./literals.h	/^constexpr unsigned long long operator"" _K(unsigned long long N) { return N << 10; }$/;"	f
_M	./literals.h	/^constexpr unsigned long long operator"" _M(unsigned long long N) { return N << 20; }$/;"	f
_OPTS_H	./opts.h	2;"	d
_VHANDLE_SYNC_H	./vhandle_sync.h	2;"	d
__g_l1_measurement	./epoch.cc	/^volatile std::atomic_bool __g_l1_measurement = false;$/;"	m	namespace:felis	file:
__padding__	./piece.h	/^  uint8_t __padding__[16];$/;"	m	struct:felis::PieceRoutine
__padding__	./vhandle_sync.cc	/^  uint8_t __padding__[48];$/;"	m	struct:felis::SpinnerSlotData	file:
__padding__	./vhandle_sync.cc	/^  uint8_t __padding__[56];$/;"	m	struct:felis::SimpleSyncData	file:
abort_if	./log.h	29;"	d
absorb_memmove_avg	./felis_probes.cc	/^  agg::Agg<agg::Average> absorb_memmove_avg;$/;"	m	struct:ProbeMain	file:
absorb_memmove_size	./felis_probes.cc	/^  agg::Agg<agg::Histogram<1024, 0, 16>> absorb_memmove_size;$/;"	m	struct:ProbeMain	file:
absorb_memmove_size_detail	./felis_probes.cc	/^  agg::Agg<agg::Histogram<16, 0, 1>> absorb_memmove_size_detail;$/;"	m	struct:ProbeMain	file:
accesses	./vhandle.h	/^  uint64_t *accesses;$/;"	m	class:felis::CalvinVHandle
active	./pwv_graph.h	/^  util::GenericListNode<Node> active;$/;"	m	class:felis::PWVGraph
active_epoch	./masstree_index_impl.cc	/^volatile mrcu_epoch_type active_epoch;$/;"	v
addr	./shipping.h	/^  sockaddr_in addr;$/;"	m	class:felis::BaseShipment
affinity	./piece.h	/^  uint64_t affinity; \/\/ Which core to run on. -1 means not specified. >= nr_threads means random.$/;"	m	struct:felis::PieceRoutine
agg	./probe_utils.h	/^namespace agg {$/;"	n
all_config	./node_config.h	/^  std::array<util::Optional<NodeConfig>, kMaxNrNode> all_config;$/;"	m	class:felis::NodeConfiguration
all_configurations	./node_config.h	/^  std::array<util::Optional<NodeConfig>, kMaxNrNode> all_configurations() const {$/;"	f	class:felis::NodeConfiguration
all_row_shipments	./slice.cc	/^std::vector<RowShipment *> SliceManager::all_row_shipments()$/;"	f	class:felis::SliceManager
all_txns	./epoch.h	/^  EpochTxnSet *all_txns;$/;"	m	class:felis::EpochClient
alloc_bitmap	./mem.cc	/^  uint32_t alloc_bitmap;$/;"	m	class:mem::MetaSlab	file:
alloc_by_coreid	./vhandle.h	/^    int alloc_by_coreid;$/;"	m	struct:felis::LinkListVHandle::Entry
alloc_by_coreid	./vhandle.h	/^  short alloc_by_coreid;$/;"	m	class:felis::CalvinVHandle
alloc_by_regionid	./vhandle.h	/^  uint8_t alloc_by_regionid;$/;"	m	class:felis::SortedArrayVHandle
alloc_core	./gc.cc	/^  int alloc_core;$/;"	m	struct:felis::GarbageBlock	file:
alloc_core	./vhandle_cch.h	/^    int alloc_core;$/;"	m	struct:felis::VHandleCollectionHandler::Block
alloc_coreid	./entity.h	/^  int alloc_coreid;$/;"	m	class:felis::final
alloc_node	./module.cc	/^      uint64_t alloc_node;$/;"	m	struct:felis::CoroutineModule::CoroutineStackAllocator::Chunk	file:
alloc_regionid	./felis_probes.h	/^  int alloc_regionid;$/;"	m	struct:felis::probes::VHandleAppend
alloc_state_worker	./epoch.h	/^  AllocStateTxnWorker alloc_state_worker;$/;"	m	struct:felis::EpochWorkers
alloc_type	./mem.h	/^  MemAllocType alloc_type;$/;"	m	class:mem::ParallelAllocator
alloc_type	./mem.h	/^  MemAllocType alloc_type;$/;"	m	class:mem::SlabPool
alloc_type	./mem.h	/^  MemAllocType alloc_type;$/;"	m	class:mem::WeakPool
allocator_module	./module.cc	/^static AllocatorModule allocator_module;$/;"	m	namespace:felis	file:
append_start	./node_config.h	/^    std::atomic_uint append_start = 0;$/;"	m	struct:felis::LocalDispatcherImpl::Queue
append_start	./tcp_node.cc	/^    std::atomic_uint append_start;$/;"	m	struct:felis::tcp::SendChannel::Channel	file:
assign	./sqltypes.h	/^  inline void assign(const char *s, size_t n) {$/;"	f	class:sql::Char
assign	./sqltypes.h	/^  void assign(const char *s) {$/;"	f	class:sql::Char
assign	./sqltypes.h	/^  void assign(const char *s) {$/;"	f	class:sql::inline_str_base
assign	./sqltypes.h	/^  void assign(const char *s, size_t n) {$/;"	f	class:sql::inline_str_base
assign	./sqltypes.h	/^  void assign(const std::string &s) {$/;"	f	class:sql::Char
assign	./sqltypes.h	/^  void assign(const std::string &s) {$/;"	f	class:sql::inline_str_base
at	./pwv_graph.h	/^    Edge *at(uint8_t n) {$/;"	f	struct:felis::PWVGraph::Node
auto_increment_cnt	./index_common.h	/^  std::atomic_uint64_t *auto_increment_cnt;$/;"	m	class:felis::Table
backrefs	./contention_manager.cc	/^  VHandle *backrefs[kMaxPos];$/;"	m	struct:felis::VersionBufferHead	file:
base	./sqltypes.h	/^  VarStr *base = nullptr;$/;"	m	struct:sql::InheritBasePtr
base_pos	./contention_manager.cc	/^  long base_pos;$/;"	m	struct:felis::VersionBufferHead	file:
base_pos	./contention_manager.cc	/^  long base_pos;$/;"	m	struct:felis::VersionBufferHeadAllocation	file:
batcher	./node_config.h	/^  TransportBatcher &batcher() { return transport_batcher; }$/;"	f	class:felis::NodeConfiguration
begin	./txn_cc.h	/^  Pair *begin() { return pairs; }$/;"	f	class:felis::NodeBitmap
begin	./txn_cc.h	/^  const Pair *begin() const { return pairs; }$/;"	f	class:felis::NodeBitmap
best_core	./epoch.h	/^  int best_core;$/;"	m	class:felis::EpochClient
best_duration	./epoch.h	/^  int best_duration;$/;"	m	class:felis::EpochClient
bitmap	./contention_manager.cc	/^  uint64_t *bitmap() {$/;"	f	struct:felis::VersionPrealloc
bitmap	./gc.cc	/^  uint64_t bitmap;$/;"	m	struct:felis::GarbageBlock	file:
bitmap	./mem.h	/^    uint64_t bitmap = 0;$/;"	m	struct:mem::ParallelAllocator::ConsolidateFreeList
blocking	./felis_probes.h	/^  bool blocking;$/;"	m	struct:felis::probes::VersionRead
born	./shipping.h	/^  uint64_t born;$/;"	m	class:felis::ShippingHandle
brk	./pwv_graph.h	/^  mem::Brk brk;$/;"	m	class:felis::PWVGraph
brk	./routine_sched.cc	/^  mem::Brk brk;$/;"	m	class:felis::final	file:
brks	./epoch.h	/^    std::array<mem::Brk *, NodeConfiguration::kMaxNrThreads> brks; \/\/ per-core brks$/;"	m	struct:felis::EpochMemory::__anon3
brks	./epoch.h	/^  mem::Brk *brks[NodeConfiguration::kMaxNrThreads + 1];$/;"	m	class:felis::EpochPromiseAllocationService
broadcast_buffer	./slice.h	/^  std::vector<int> broadcast_buffer;$/;"	m	class:felis::SliceMappingTable
buf	./sqltypes.h	/^  char buf[N];$/;"	m	class:sql::Char
buf	./sqltypes.h	/^  mutable char buf[N + 1];$/;"	m	class:sql::inline_str_base
buf_cnt	./contention_manager.cc	/^  uint32_t buf_cnt;$/;"	m	struct:felis::VersionBuffer	file:
buf_pos	./vhandle.h	/^  std::atomic_long buf_pos = -1;$/;"	m	class:felis::SortedArrayVHandle
buffer	./console_client.cc	/^  char buffer[kMaxBufferSize];$/;"	m	class:felis::ConsoleClient	file:
buffer	./vhandle_sync.h	/^  SimpleSyncData *buffer;$/;"	m	class:felis::SimpleSync
buffer	./vhandle_sync.h	/^  SpinnerSlotData *buffer;$/;"	m	class:felis::SpinnerSlot
buffer_heads	./contention_manager.h	/^  std::array<VersionBufferHead *, NodeConfiguration::kMaxNrThreads> buffer_heads;$/;"	m	class:felis::ContentionManager
c_str	./sqltypes.h	/^  const char * c_str() const {$/;"	f	class:sql::inline_str_base
call_worker	./epoch.h	/^  CallTxnsWorker call_worker;$/;"	m	struct:felis::EpochWorkers
callback	./completion.h	/^  T callback;$/;"	m	class:felis::CompletionObject
callback	./epoch.h	/^  EpochCallback callback;$/;"	m	class:felis::EpochClient
callback	./piece.h	/^  void (*callback)(PieceRoutine *);$/;"	m	struct:felis::PieceRoutine
capacity	./mem.h	/^  size_t capacity() const { return total_cap; }$/;"	f	class:mem::ParallelAllocator
capacity	./mem.h	/^  size_t capacity;$/;"	m	class:mem::WeakPool
capacity	./vhandle.h	/^  size_t capacity;$/;"	m	class:felis::CalvinVHandle
capacity	./vhandle.h	/^  unsigned int capacity;$/;"	m	class:felis::SortedArrayVHandle
capture_data	./piece.h	/^  uint8_t *capture_data;$/;"	m	struct:felis::PieceRoutine
capture_len	./piece.h	/^  uint32_t capture_len;$/;"	m	struct:felis::PieceRoutine
channels	./tcp_node.cc	/^  util::CacheAligned<Channel> channels[NodeConfiguration::kMaxNrThreads + 1];$/;"	m	class:felis::tcp::SendChannel	file:
checkpoint_impl	./index_common.h	/^  static Checkpoint *checkpoint_impl(std::string fmt) { return impl[fmt]; }$/;"	f	class:felis::Checkpoint
chunk_size	./mem.h	/^  size_t chunk_size;$/;"	m	class:mem::ParallelAllocator
chunk_size	./mem.h	/^  unsigned int chunk_size;$/;"	m	class:mem::SlabPool
clear_refcnt	./commit_buffer.h	/^  std::atomic_uint64_t clear_refcnt; \/\/ 0 means all clear$/;"	m	class:felis::CommitBuffer
client	./epoch.h	/^  EpochClient *client; $/;"	m	class:felis::EpochDispatcher
client	./epoch.h	/^  EpochClient *client;$/;"	m	class:felis::Epoch
client	./epoch.h	/^  EpochClient *client;$/;"	m	class:felis::EpochCallback
client	./epoch.h	/^  EpochClient *client;$/;"	m	class:felis::EpochClientBaseWorker
client	./epoch.h	/^  EpochClient *client;$/;"	m	class:felis::EpochControl
cnt	./probe_utils.h	/^  long cnt = 0;$/;"	m	struct:agg::Average
collect_head	./gc.h	/^  std::atomic<GarbageBlock *> collect_head = nullptr;$/;"	m	class:felis::GC
commit_buffer	./epoch.h	/^  CommitBuffer *commit_buffer;$/;"	m	class:felis::EpochClient
comp	./epoch.h	/^  static inline std::atomic_ulong comp = 0;$/;"	m	class:felis::AllocStateTxnWorker
comp_count	./completion.h	/^  std::atomic_long comp_count;$/;"	m	class:felis::CompletionObject
completion	./epoch.h	/^  CompletionObject<EpochCallback &> completion;$/;"	m	class:felis::EpochClient
completion_object	./epoch.h	/^  auto completion_object() { return &completion; }$/;"	f	class:felis::EpochClient
cond	./console.h	/^  std::condition_variable cond;$/;"	m	class:felis::Console
conf	./console.h	/^  json11::Json conf;$/;"	m	class:felis::Console
conf	./epoch.h	/^  NodeConfiguration &conf;$/;"	m	class:felis::EpochClient
config	./node_config.h	/^  const NodeConfig &config(int idx = -1) const {$/;"	f	class:felis::NodeConfiguration
connected	./shipping.h	/^  bool connected;$/;"	m	class:felis::BaseShipment
console_module	./console_client.cc	/^static ConfModule console_module;$/;"	m	namespace:felis	file:
cont_affinity	./vhandle.h	/^  int8_t cont_affinity;$/;"	m	class:felis::SortedArrayVHandle
cont_lmgr	./epoch.h	/^  LocalityManager cont_lmgr;$/;"	m	class:felis::EpochClient
contention_affinity	./vhandle.h	/^  int8_t contention_affinity() const { return cont_affinity; }$/;"	f	class:felis::SortedArrayVHandle
control	./epoch.h	/^  EpochControl control;$/;"	m	class:felis::EpochClient
core	./felis_probes.h	/^  int core;$/;"	m	struct:felis::probes::LocalitySchedule
core_id	./gc.cc	/^  int core_id;$/;"	m	struct:felis::GarbageBlockSlab	file:
core_limit	./epoch.h	/^  int core_limit;$/;"	m	class:felis::EpochClient
core_prealloc	./locality_manager.h	/^  long core_prealloc[kPrealloc];$/;"	m	class:felis::LocalityManager
cores	./locality_manager.h	/^    long *cores;$/;"	m	struct:felis::LocalityManager::WeightDist
coroutine_module	./module.cc	/^static CoroutineModule coroutine_module;$/;"	m	namespace:felis	file:
counters	./node_config.h	/^    std::atomic_ulong counters[];$/;"	m	struct:felis::NodeConfiguration::LocalBatch
counters	./node_config.h	/^  std::array<std::array<std::atomic_ulong, kMaxNrNode>, kMaxLevels> counters;$/;"	m	class:felis::TransportBatcher
counters	./tcp_node.h	/^  std::atomic_int counters = 0;$/;"	m	class:felis::TcpNodeTransport
crctab	./csum.h	/^static const unsigned int crctab[] = {$/;"	v
csld_free_lists	./mem.h	/^  std::array<ConsolidateFreeList *, kMaxNrPools> csld_free_lists;$/;"	m	class:mem::ParallelAllocator
ctx_space	./module.cc	/^      uint8_t ctx_space[];$/;"	m	struct:felis::CoroutineModule::CoroutineStackAllocator::Chunk	file:
cur_epoch	./epoch.h	/^  std::atomic<Epoch *> cur_epoch;$/;"	m	class:felis::EpochManager
cur_epoch_nr	./epoch.h	/^  std::atomic_uint64_t cur_epoch_nr;$/;"	m	class:felis::EpochManager
cur_key	./index_common.h	/^    VarStrView cur_key;$/;"	m	class:felis::Table::Iterator
cur_start	./vhandle.h	/^  unsigned int cur_start;$/;"	m	class:felis::SortedArrayVHandle
cur_txns	./epoch.h	/^  std::atomic<EpochTxnSet *> cur_txns;$/;"	m	class:felis::EpochClient
current	./stdmap_index_impl.h	/^    MapIterator current, end;$/;"	m	struct:dolly::StdMapIndex::StdMapIteratorImpl
current_epoch	./epoch.h	/^  Epoch *current_epoch() const { return epoch(cur_epoch_nr); }$/;"	f	class:felis::EpochManager
current_epoch_nr	./epoch.h	/^  uint64_t current_epoch_nr() const { return cur_epoch_nr; }$/;"	f	class:felis::EpochManager
current_node	./shipping.h	/^  util::ListNode * current_node;$/;"	m	class:felis::SliceScanner
current_q	./shipping.h	/^  SliceQueue * current_q;$/;"	m	class:felis::SliceScanner
current_size	./mem.h	/^  size_t current_size() const { return offset; }$/;"	f	class:mem::Brk
current_start	./vhandle.h	/^  const size_t current_start() const { return cur_start;}$/;"	f	class:felis::SortedArrayVHandle
current_status	./node_config.h	/^  Status current_status() const {$/;"	f	class:felis::IncomingTraffic
data	./mem.h	/^  uint8_t *data;$/;"	m	class:mem::Brk
data	./mem.h	/^  void *data;$/;"	m	class:mem::WeakPool
data	./sqltypes.h	/^  const char * data() const {$/;"	f	class:sql::Char
data	./sqltypes.h	/^  const char *data() const {$/;"	f	class:sql::inline_str_base
data	./varstr.h	/^  const uint8_t *data() const {$/;"	f	class:felis::final
data	./varstr.h	/^  uint8_t *data() const { return (uint8_t *) (w >> 16); }$/;"	f	class:felis::final
data	./varstr.h	/^  uint8_t *data() {$/;"	f	class:felis::final
data_len	./mem.cc	/^  uint64_t data_len;$/;"	m	struct:mem::SlabMemory	file:
data_offset	./mem.cc	/^  uint64_t data_offset;$/;"	m	struct:mem::SlabMemory	file:
data_ptr	./mem.h	/^  void *data_ptr() const { return data; }$/;"	f	class:mem::WeakPool
debug	./log.h	/^static void debug(std::string_view fmt, T... args)$/;"	f
delivery_cnt	./felis_probes.cc	/^  agg::Agg<agg::Histogram<32, 0, 1>> delivery_cnt;$/;"	m	struct:ProbeMain	file:
delta	./node_config.h	/^    std::array<unsigned long, kMaxNrNode> delta; \/\/ for each destinations$/;"	m	class:felis::TransportBatcher::LocalMetadata
description	./module.h	/^    std::string description;$/;"	m	struct:felis::Module::__anon5
dice	./mem.h	/^    uint64_t dice = 0;$/;"	m	struct:mem::ParallelAllocator::ConsolidateFreeList
dice	./node_config.h	/^  std::atomic_ulong dice;$/;"	m	class:felis::LocalDispatcherImpl
dirty	./tcp_node.cc	/^    std::atomic_bool dirty;$/;"	m	struct:felis::tcp::SendChannel::Channel	file:
dispatcher	./epoch.h	/^  EpochDispatcher *dispatcher;$/;"	m	class:felis::EpochClient
dist	./epoch.h	/^  struct rand_gen *dist; \/\/ inter-arrival distribution$/;"	m	class:felis::EpochDispatcher	typeref:struct:felis::EpochDispatcher::rand_gen
dist	./locality_manager.h	/^    long *dist;$/;"	m	struct:felis::LocalityManager::WeightDist
dist_prealloc	./locality_manager.h	/^  long dist_prealloc[kPrealloc];$/;"	m	class:felis::LocalityManager
dolly	./stdmap_index_impl.h	/^namespace dolly {$/;"	n
done	./vhandle_sync.cc	/^  std::atomic_bool done;$/;"	m	struct:felis::SpinnerSlotData	file:
dst_node	./node_config.h	/^  int dst_node;$/;"	m	class:felis::OutgoingTraffic
dup	./commit_buffer.h	/^      std::atomic<Entry *> dup = nullptr;$/;"	m	union:felis::CommitBuffer::Entry::__anon1
dup_hashtable	./commit_buffer.h	/^  std::atomic<Entry *> *dup_hashtable;$/;"	m	class:felis::CommitBuffer
dup_hashtable_size	./commit_buffer.h	/^  unsigned long dup_hashtable_size;$/;"	m	class:felis::CommitBuffer
duration	./log.h	/^  uint32_t duration;$/;"	m	class:PerfLog
duration	./txn.h	/^  std::chrono::nanoseconds duration;$/;"	m	class:felis::BaseTxn
duration_ms	./log.h	/^  uint32_t duration_ms() const { return duration; }$/;"	f	class:PerfLog
empty	./mem.h	/^  util::GenericListNode<Slab> empty;$/;"	m	class:mem::SlabPool
enable_inline	./index_common.h	/^  bool enable_inline;$/;"	m	class:felis::Table
encoded_len	./entity.h	/^  uint64_t encoded_len;$/;"	m	class:felis::final
end	./stdmap_index_impl.h	/^    MapIterator current, end;$/;"	m	struct:dolly::StdMapIndex::StdMapIteratorImpl
end	./txn_cc.h	/^  Pair *end() { return pairs + len; }$/;"	f	class:felis::NodeBitmap
end	./txn_cc.h	/^  const Pair *end() const { return pairs + len; }$/;"	f	class:felis::NodeBitmap
end	./txn_cc.h	/^  const typename Table::Key *end;$/;"	m	class:felis::RangeParam
end_key	./index_common.h	/^    VarStrView end_key;$/;"	m	class:felis::Table::Iterator
ent	./routine_sched.cc	/^    PriorityQueueHashEntry *ent;$/;"	m	struct:felis::final::FreeNodeEntry	file:
ent	./routine_sched.cc	/^    PriorityQueueHashEntry *ent;$/;"	m	struct:felis::final::PriorityQueueHeapEntry	file:
entbrks	./commit_buffer.h	/^             mem::ParallelAllocationPolicy::kMaxNrPools> entbrks;$/;"	m	class:felis::CommitBuffer
epoch	./epoch.cc	/^Epoch *EpochManager::epoch(uint64_t epoch_nr) const$/;"	f	class:felis::EpochManager
epoch	./txn.h	/^  Epoch *epoch;$/;"	m	class:felis::BaseTxn
epoch_client	./epoch.h	/^  EpochClient *epoch_client() const { return client; }$/;"	f	class:felis::Epoch
epoch_nr	./epoch.h	/^  uint64_t epoch_nr;$/;"	m	class:felis::Epoch
epoch_nr	./epoch.h	/^  uint64_t epoch_nr;$/;"	m	class:felis::EpochObject
epoch_nr	./felis_probes.h	/^  uint64_t epoch_nr;$/;"	m	struct:felis::probes::EndOfPhase
epoch_nr	./felis_probes.h	/^  uint64_t epoch_nr;$/;"	m	struct:felis::probes::VersionWrite
epoch_nr	./txn.h	/^    uint64_t epoch_nr;$/;"	m	class:felis::BaseTxn::BaseTxnHandle
epoch_nr	./txn.h	/^    uint64_t epoch_nr;$/;"	m	class:felis::BaseTxn::BaseTxnRow
epoch_nr	./txn.h	/^  uint64_t epoch_nr() const { return sid >> 32; }$/;"	f	class:felis::BaseTxn
est_split	./contention_manager.h	/^  size_t est_split;$/;"	m	class:felis::ContentionManager
estimated_splits	./contention_manager.h	/^  size_t estimated_splits() const { return est_split; }$/;"	f	class:felis::ContentionManager
exec_time	./threshold_autotune.h	/^  uint64_t exec_time = std::numeric_limits<uint32_t>::max();$/;"	m	class:felis::ThresholdAutoTuneController
execution_time_ms	./epoch.h	/^    int execution_time_ms = 0;$/;"	m	struct:felis::EpochClient::__anon2
extra	./pwv_graph.h	/^    Edge *extra;$/;"	m	struct:felis::PWVGraph::Node
extra_handlers	./piece.h	/^  PieceRoutine **extra_handlers;$/;"	m	class:felis::BasePieceCollection
fd	./console_client.cc	/^  int fd;$/;"	m	class:felis::ConsoleClient	file:
fd	./shipping.h	/^  int fd;$/;"	m	class:felis::BaseShipment
felis	./checkpoint.cc	/^namespace felis {$/;"	n	file:
felis	./commit_buffer.cc	/^namespace felis {$/;"	n	file:
felis	./commit_buffer.h	/^namespace felis {$/;"	n
felis	./completion.h	/^namespace felis {$/;"	n
felis	./console.cc	/^namespace felis {$/;"	n	file:
felis	./console.h	/^namespace felis {$/;"	n
felis	./console_client.cc	/^namespace felis {$/;"	n	file:
felis	./contention_manager.cc	/^namespace felis {$/;"	n	file:
felis	./contention_manager.h	/^namespace felis {$/;"	n
felis	./entity.cc	/^namespace felis {$/;"	n	file:
felis	./entity.h	/^namespace felis {$/;"	n
felis	./epoch.cc	/^namespace felis {$/;"	n	file:
felis	./epoch.h	/^namespace felis {$/;"	n
felis	./felis_probes.h	/^namespace felis {$/;"	n
felis	./gc.cc	/^namespace felis {$/;"	n	file:
felis	./gc.h	/^namespace felis {$/;"	n
felis	./hashtable_index_impl.cc	/^namespace felis {$/;"	n	file:
felis	./hashtable_index_impl.h	/^namespace felis {$/;"	n
felis	./index.cc	/^namespace felis {$/;"	n	file:
felis	./index_common.h	/^namespace felis {$/;"	n
felis	./locality_manager.cc	/^namespace felis {$/;"	n	file:
felis	./locality_manager.h	/^namespace felis {$/;"	n
felis	./main.cc	/^namespace felis {$/;"	n	file:
felis	./masstree_index_impl.cc	/^namespace felis {$/;"	n	file:
felis	./masstree_index_impl.h	/^namespace felis {$/;"	n
felis	./module.cc	/^namespace felis {$/;"	n	file:
felis	./module.h	/^namespace felis {$/;"	n
felis	./node_config.cc	/^namespace felis {$/;"	n	file:
felis	./node_config.h	/^namespace felis {$/;"	n
felis	./opts.h	/^namespace felis {$/;"	n
felis	./piece.cc	/^namespace felis {$/;"	n	file:
felis	./piece.h	/^namespace felis {$/;"	n
felis	./piece_cc.h	/^namespace felis {$/;"	n
felis	./pwv_graph.cc	/^namespace felis {$/;"	n	file:
felis	./pwv_graph.h	/^namespace felis {$/;"	n
felis	./routine_sched.cc	/^namespace felis {$/;"	n	file:
felis	./routine_sched.h	/^namespace felis {$/;"	n
felis	./shipping.cc	/^namespace felis {$/;"	n	file:
felis	./shipping.h	/^namespace felis {$/;"	n
felis	./slice.cc	/^namespace felis {$/;"	n	file:
felis	./slice.h	/^namespace felis {$/;"	n
felis	./sqltypes.h	/^namespace felis {$/;"	n
felis	./tcp_node.cc	/^namespace felis {$/;"	n	file:
felis	./tcp_node.h	/^namespace felis {$/;"	n
felis	./threshold_autotune.h	/^namespace felis {$/;"	n
felis	./txn.cc	/^namespace felis {$/;"	n	file:
felis	./txn.h	/^namespace felis {$/;"	n
felis	./txn_cc.h	/^namespace felis {$/;"	n
felis	./varstr.h	/^namespace felis {$/;"	n
felis	./vhandle.cc	/^namespace felis {$/;"	n	file:
felis	./vhandle.h	/^namespace felis {$/;"	n
felis	./vhandle_cch.h	/^namespace felis {$/;"	n
felis	./vhandle_sync.cc	/^namespace felis {$/;"	n	file:
felis	./vhandle_sync.h	/^namespace felis {$/;"	n
final	./entity.h	/^class RowEntity final {$/;"	c	namespace:felis
final	./epoch.h	/^  void Run() override final;$/;"	m	class:felis::AllocStateTxnWorker
final	./epoch.h	/^  void Run() override final;$/;"	m	class:felis::CallTxnsWorker
final	./epoch.h	/^  void Run() override final;$/;"	m	class:felis::EpochDispatcher
final	./hashtable_index_impl.h	/^class HashtableIndex final : public Table {$/;"	c	namespace:felis
final	./masstree_index_impl.cc	/^    bool IsValid() const override final;$/;"	m	struct:felis::MasstreeMap::Iterator	file:
final	./masstree_index_impl.cc	/^    void Next() override final;$/;"	m	struct:felis::MasstreeMap::Iterator	file:
final	./masstree_index_impl.h	/^class MasstreeIndex final : public Table {$/;"	c	namespace:felis
final	./routine_sched.cc	/^class ConservativePriorityScheduler final : public PrioritySchedulingPolicy {$/;"	c	namespace:felis	file:
final	./routine_sched.cc	/^class PWVScheduler final : public PrioritySchedulingPolicy {$/;"	c	namespace:felis	file:
final	./shipping.h	/^  void Run() override final;$/;"	m	class:felis::RowShipmentReceiver
final	./tcp_node.cc	/^  virtual void Run() final;$/;"	m	class:felis::tcp::NodeServerRoutine	file:
final	./varstr.h	/^class VarStr final {$/;"	c	namespace:felis
final	./varstr.h	/^class VarStrView final {$/;"	c	namespace:felis
finished	./epoch.h	/^  std::atomic_bool finished;$/;"	m	class:felis::EpochClientBaseWorker
finished	./shipping.h	/^  bool finished;$/;"	m	class:felis::BaseShipment
first_version	./vhandle.h	/^  uint64_t first_version() const { return versions[0]; }$/;"	f	class:felis::SortedArrayVHandle
flusher_channel	./tcp_node.cc	/^    go::BufferChannel *flusher_channel;$/;"	m	class:felis::tcp::SendChannel::FlusherRoutine	file:
flusher_channel	./tcp_node.cc	/^  go::BufferChannel *flusher_channel;$/;"	m	class:felis::tcp::SendChannel	file:
flusher_start	./node_config.h	/^    unsigned int flusher_start = 0;$/;"	m	struct:felis::LocalDispatcherImpl::Queue
flusher_start	./tcp_node.cc	/^    unsigned int flusher_start;$/;"	m	struct:felis::tcp::SendChannel::Channel	file:
free	./gc.cc	/^  util::GenericListNode<GarbageBlock> free;$/;"	m	struct:felis::GarbageBlockSlab	file:
free	./hashtable_index_impl.cc	/^  std::atomic<HashEntry *> free = nullptr; \/\/ free list has a list of pre-allocated entries$/;"	m	struct:felis::ThreadInfo	file:
free	./routine_sched.cc	/^  util::GenericListNode<FreeNodeEntry> free, inactive, rvp;$/;"	m	class:felis::final	file:
free_lists	./mem.h	/^  std::array<uintptr_t *, kMaxNrPools> free_lists;$/;"	m	class:mem::ParallelAllocator
free_tails	./mem.h	/^  std::array<uintptr_t *, kMaxNrPools> free_tails;$/;"	m	class:mem::ParallelAllocator
from_serial_id	./pwv_graph.h	/^  Node *from_serial_id(uint64_t sid) const {$/;"	f	class:felis::PWVGraph
full	./gc.cc	/^  util::GenericListNode<GarbageBlock> full[kNrQueue];$/;"	m	struct:felis::GarbageBlockSlab	file:
func	./epoch.h	/^  EpochMemberFunc func;$/;"	m	class:felis::EpochControl
func	./piece.h	/^    F func;$/;"	m	class:felis::PromiseRoutineDispatchService::GenericDispatchPeekListener
g_affinity	./mem.cc	/^thread_local int ParallelAllocationPolicy::g_affinity = -1;$/;"	m	class:mem::ParallelAllocationPolicy	file:
g_affinity	./mem.h	/^  static thread_local int g_affinity;$/;"	m	class:mem::ParallelAllocationPolicy
g_alloc	./contention_manager.cc	/^std::array<VersionBufferHeadAllocation, kMaxNrNode \/ mem::kNrCorePerNode> g_alloc;$/;"	m	namespace:felis	file:
g_brk	./txn.cc	/^BaseTxn::BrkType BaseTxn::g_brk;$/;"	m	class:felis::BaseTxn	file:
g_brk	./txn.h	/^  static BrkType g_brk;$/;"	m	class:felis::BaseTxn
g_bytes_sent	./shipping.h	/^static std::atomic_ullong g_bytes_sent = 0;$/;"	m	namespace:felis
g_core_locks	./mem.cc	/^std::mutex * ParallelAllocationPolicy::g_core_locks;$/;"	m	class:mem::ParallelAllocationPolicy	file:
g_core_locks	./mem.h	/^  static std::mutex *g_core_locks;$/;"	m	class:mem::ParallelAllocationPolicy
g_core_shifting	./mem.cc	/^int ParallelAllocationPolicy::g_core_shifting = 0;$/;"	m	class:mem::ParallelAllocationPolicy	file:
g_core_shifting	./mem.h	/^  static int g_core_shifting;$/;"	m	class:mem::ParallelAllocationPolicy
g_corescaling_threshold	./epoch.cc	/^long EpochClient::g_corescaling_threshold = 0;$/;"	m	class:felis::EpochClient	file:
g_corescaling_threshold	./epoch.h	/^  static long g_corescaling_threshold;$/;"	m	class:felis::EpochClient
g_cur_numa_node	./txn.cc	/^int BaseTxn::g_cur_numa_node = 0;$/;"	m	class:felis::BaseTxn	file:
g_cur_numa_node	./txn.h	/^  static int g_cur_numa_node;$/;"	m	class:felis::BaseTxn
g_data_migration	./node_config.cc	/^bool NodeConfiguration::g_data_migration = false;$/;"	m	class:felis::NodeConfiguration	file:
g_data_migration	./node_config.h	/^  static bool g_data_migration;$/;"	m	class:felis::NodeConfiguration
g_data_region	./mem.cc	/^static ParallelRegion g_data_region;$/;"	m	namespace:mem	file:
g_enable_granola	./epoch.cc	/^bool EpochClient::g_enable_granola = false;$/;"	m	class:felis::EpochClient	file:
g_enable_granola	./epoch.h	/^  static bool g_enable_granola;$/;"	m	class:felis::EpochClient
g_enable_pwv	./epoch.cc	/^bool EpochClient::g_enable_pwv = false;$/;"	m	class:felis::EpochClient	file:
g_enable_pwv	./epoch.h	/^  static bool g_enable_pwv;$/;"	m	class:felis::EpochClient
g_epoch	./epoch.cc	/^static Epoch *g_epoch; \/\/ We don't support concurrent epochs for now.$/;"	m	namespace:felis	file:
g_extra_node_brk_limit	./pwv_graph.cc	/^size_t PWVGraph::g_extra_node_brk_limit = 8 << 20;$/;"	m	class:felis::PWVGraph	file:
g_extra_node_brk_limit	./pwv_graph.h	/^  static size_t g_extra_node_brk_limit;$/;"	m	class:felis::PWVGraph
g_finished	./epoch.h	/^  static inline std::atomic_int g_finished = 0;$/;"	m	class:felis::CallTxnsWorker
g_gc	./gc.cc	/^static GC g_gc;$/;"	m	namespace:util	file:
g_gc_every_epoch	./gc.cc	/^unsigned int GC::g_gc_every_epoch = 0;$/;"	m	class:felis::GC	file:
g_gc_every_epoch	./gc.h	/^  static unsigned int g_gc_every_epoch;$/;"	m	class:felis::GC
g_handlers	./console.cc	/^std::map<std::string, std::function<json11::Json (Console *, json11::Json)>> g_handlers;$/;"	m	namespace:felis	file:
g_lazy	./gc.cc	/^bool GC::g_lazy = false;$/;"	m	class:felis::GC	file:
g_lazy	./gc.h	/^  static bool g_lazy;$/;"	m	class:felis::GC
g_lock_elision	./vhandle.cc	/^bool VHandleSyncService::g_lock_elision = false;$/;"	m	class:felis::VHandleSyncService	file:
g_lock_elision	./vhandle.h	/^  static bool g_lock_elision;$/;"	m	class:felis::VHandleSyncService
g_max_epoch	./epoch.h	/^  static inline size_t g_max_epoch = 50;$/;"	m	class:felis::EpochClient
g_max_item	./routine_sched.cc	/^size_t EpochExecutionDispatchService::g_max_item = 20_M;$/;"	m	class:felis::EpochExecutionDispatchService	file:
g_mem_tracker	./mem.cc	/^static std::atomic_llong g_mem_tracker[NumMemTypes];$/;"	m	namespace:mem	file:
g_nr_cores	./mem.cc	/^int ParallelAllocationPolicy::g_nr_cores = 0;$/;"	m	class:mem::ParallelAllocationPolicy	file:
g_nr_cores	./mem.h	/^  static int g_nr_cores;$/;"	m	class:mem::ParallelAllocationPolicy
g_nr_threads	./node_config.cc	/^size_t NodeConfiguration::g_nr_threads = 16;$/;"	m	class:felis::NodeConfiguration	file:
g_nr_threads	./node_config.h	/^  static size_t g_nr_threads;$/;"	m	class:felis::NodeConfiguration
g_nr_threads	./piece.cc	/^size_t BasePieceCollection::g_nr_threads = 0;$/;"	m	class:felis::BasePieceCollection	file:
g_nr_threads	./piece.h	/^  static size_t g_nr_threads;$/;"	m	class:felis::BasePieceCollection
g_objects_added	./shipping.cc	/^static std::atomic_ulong g_objects_added = 0;$/;"	m	namespace:felis	file:
g_objects_shipped	./shipping.h	/^static std::atomic_ulong g_objects_shipped = 0;$/;"	m	namespace:felis
g_objects_skipped	./shipping.h	/^static std::atomic_ulong g_objects_skipped = 0;$/;"	m	namespace:felis
g_options	./opts.h	/^  static inline std::vector<Option *> g_options;$/;"	m	struct:felis::Option
g_prealloc_count	./contention_manager.cc	/^size_t ContentionManager::g_prealloc_count = 256_K;$/;"	m	class:felis::ContentionManager	file:
g_prealloc_count	./contention_manager.h	/^  static size_t g_prealloc_count;$/;"	m	class:felis::ContentionManager
g_preallocs	./contention_manager.cc	/^std::array<VersionPrealloc, NodeConfiguration::kMaxNrThreads> g_preallocs;$/;"	m	namespace:felis	file:
g_present	./opts.h	/^  static inline std::vector<bool> g_present;$/;"	m	struct:felis::Option
g_ps	./mem.cc	/^static std::vector<PoolStatistics *> g_ps[NumMemTypes];$/;"	m	namespace:mem	file:
g_ps_lock	./mem.cc	/^static std::mutex g_ps_lock;$/;"	m	namespace:mem	file:
g_scanning_session	./shipping.cc	/^static std::atomic_ulong g_scanning_session = kScanningSessionConverged;$/;"	m	namespace:felis	file:
g_slabmem	./mem.cc	/^static SlabMemory *g_slabmem;$/;"	m	namespace:mem	file:
g_slabs	./gc.cc	/^std::array<GarbageBlockSlab *, NodeConfiguration::kMaxNrThreads> GC::g_slabs;$/;"	m	class:felis::GC	file:
g_slabs	./gc.h	/^  static std::array<GarbageBlockSlab *, NodeConfiguration::kMaxNrThreads> g_slabs;$/;"	m	class:felis::GC
g_splitting_threshold	./epoch.cc	/^long EpochClient::g_splitting_threshold = std::numeric_limits<long>::max();$/;"	m	class:felis::EpochClient	file:
g_splitting_threshold	./epoch.h	/^  static long g_splitting_threshold;$/;"	m	class:felis::EpochClient
g_suffices	./opts.h	/^  static inline std::vector<std::string> g_suffices;$/;"	m	struct:felis::Option
g_threshold_autotune	./epoch.cc	/^static ThresholdAutoTuneController g_threshold_autotune;$/;"	m	namespace:felis	file:
g_txn_per_epoch	./epoch.cc	/^size_t EpochClient::g_txn_per_epoch = 100000;$/;"	m	class:felis::EpochClient	file:
g_txn_per_epoch	./epoch.h	/^  static size_t g_txn_per_epoch;$/;"	m	class:felis::EpochClient
g_workload_client	./epoch.cc	/^EpochClient *EpochClient::g_workload_client = nullptr;$/;"	m	class:felis::EpochClient	file:
g_workload_client	./epoch.h	/^  static EpochClient *g_workload_client;$/;"	m	class:felis::EpochClient
gc_handle	./vhandle.h	/^  std::atomic<uint64_t> gc_handle = 0;$/;"	m	class:felis::SortedArrayVHandle
generation	./shipping.h	/^  std::atomic_ullong generation;$/;"	m	class:felis::ShippingHandle
get	./sqltypes.h	/^  typename TupleFieldType<N, TupleField, Types...>::ValueType get() const {$/;"	f	class:sql::TupleImpl
get_contention_locality_manager	./epoch.h	/^  LocalityManager &get_contention_locality_manager() { return cont_lmgr; }$/;"	f	class:felis::EpochClient
get_map	./masstree_index_impl.h	/^  MasstreeMap *get_map() {$/;"	f	class:felis::final
get_pool	./mem.h	/^  PoolType *get_pool(int idx) const { return pools[idx]; }$/;"	f	class:mem::ParallelAllocator
get_prealloc	./contention_manager.cc	/^  uint8_t *get_prealloc() {$/;"	f	struct:felis::VersionBufferHead
get_ready_epoch_nr	./epoch.h	/^  uint64_t get_ready_epoch_nr() const { return ready_epoch_nr; }$/;"	f	class:felis::EpochManager
get_rel_id	./entity.h	/^  int get_rel_id() const { return rel_id; }$/;"	f	class:felis::final
get_worker	./epoch.h	/^  EpochWorkers *get_worker(int core_id) { return workers[core_id]; }$/;"	f	class:felis::EpochClient
global_log_epoch	./masstree_index_impl.cc	/^kvepoch_t global_log_epoch;$/;"	v
globalepoch	./masstree_index_impl.cc	/^volatile mrcu_epoch_type globalepoch = 1;$/;"	v
go	./node_config.h	/^namespace go {$/;"	n
graphs	./pwv_graph.h	/^  std::array<PWVGraph *, NodeConfiguration::kMaxNrThreads> graphs;$/;"	m	class:felis::PWVGraphManager
half	./gc.cc	/^  util::GenericListNode<GarbageBlock> half[kNrQueue];$/;"	m	struct:felis::GarbageBlockSlab	file:
half_full	./mem.cc	/^  util::GenericListNode<MetaSlab> half_full;$/;"	m	struct:mem::SlabMemory	file:
half_full	./mem.h	/^  util::GenericListNode<Slab> half_full;$/;"	m	class:mem::SlabPool
half_full_lock	./mem.cc	/^  util::SpinLock half_full_lock;$/;"	m	struct:mem::SlabMemory	file:
handle	./felis_probes.h	/^  void *handle;$/;"	m	struct:felis::probes::VHandleAbsorb
handle	./felis_probes.h	/^  void *handle;$/;"	m	struct:felis::probes::VHandleAppend
handle	./felis_probes.h	/^  void *handle;$/;"	m	struct:felis::probes::VHandleAppendSlowPath
handle	./felis_probes.h	/^  void *handle;$/;"	m	struct:felis::probes::VHandleExpand
handle	./felis_probes.h	/^  void *handle;$/;"	m	struct:felis::probes::VersionRead
handle	./felis_probes.h	/^  void *handle;$/;"	m	struct:felis::probes::VersionWrite
handle	./txn.h	/^    BaseTxnHandle handle;$/;"	m	struct:felis::BaseTxn::BaseTxnIndexOpContext
handle	./txn_cc.h	/^  typename Txn<TxnState>::TxnHandle handle;$/;"	m	class:felis::TxnStateCompletion
handle_ptr	./entity.h	/^  VHandle *handle_ptr;$/;"	m	class:felis::final
handles	./vhandle_cch.h	/^    std::array<VHandle *, kMaxNrBlocks> handles;$/;"	m	struct:felis::VHandleCollectionHandler::Block
has_callback	./txn_cc.h	/^  bool has_callback() const {$/;"	f	struct:felis::InvokeHandle
has_finished	./epoch.h	/^  bool has_finished() const { return finished.load(); }$/;"	f	class:felis::EpochClientBaseWorker
has_finished	./shipping.h	/^  bool has_finished() const { return finished; }$/;"	f	class:felis::BaseShipment
hash	./hashtable_index_impl.h	/^  HashFunc hash;$/;"	m	class:felis::final
head	./mem.h	/^  void * head;$/;"	m	class:mem::WeakPool
head	./module.h	/^  static Module<Type> *&head() {$/;"	f	class:felis::Module
head	./vhandle.h	/^  Entry *head; \/\/ head is the largest!$/;"	m	class:felis::LinkListVHandle
head	./vhandle_cch.h	/^  Block *head;$/;"	m	class:felis::VHandleCollectionHandler
head_lock	./vhandle_cch.h	/^  util::MCSSpinLock head_lock;$/;"	m	class:felis::VHandleCollectionHandler
heads	./mem.h	/^    std::array<uintptr_t, kMaxNrPools> heads = {};$/;"	m	struct:mem::ParallelAllocator::ConsolidateFreeList
heads_buffer	./vhandle_cch.h	/^  std::array<Block *, NodeConfiguration::kMaxNrThreads> heads_buffer;$/;"	m	class:felis::VHandleCollectionHandler
hist	./probe_utils.h	/^  long hist[N];$/;"	m	struct:agg::Histogram
hist	./probe_utils.h	/^  long hist[N];$/;"	m	struct:agg::LogHistogram
host	./node_config.h	/^    std::string host;$/;"	m	struct:felis::NodeConfiguration::NodePeerConfig
host	./tcp_node.cc	/^  std::string host;$/;"	m	class:felis::tcp::NodeRowShipmentReceiverRoutine	file:
id	./epoch.h	/^  uint64_t id() const { return epoch_nr; }$/;"	f	class:felis::Epoch
id	./index_common.h	/^  int id;$/;"	m	class:felis::Table
id	./node_config.h	/^    int id;$/;"	m	struct:felis::NodeConfiguration::NodeConfig
id	./node_config.h	/^  int id;$/;"	m	class:felis::NodeConfiguration
id	./opts.h	/^  int id;$/;"	m	struct:felis::Option
id	./slice.h	/^    int id;$/;"	m	struct:felis::SliceMappingTable::__anon7
idx	./node_config.h	/^  int idx;$/;"	m	class:felis::LocalDispatcherImpl
impl	./index.cc	/^std::map<std::string, Checkpoint *> Checkpoint::impl;$/;"	m	class:felis::Checkpoint	file:
impl	./index_common.h	/^  static std::map<std::string, Checkpoint *> impl;$/;"	m	class:felis::Checkpoint
in	./tcp_node.cc	/^  go::TcpInputChannel *in;$/;"	m	class:felis::tcp::ReceiverChannel	file:
in_degree	./pwv_graph.h	/^    std::atomic_uint in_degree;$/;"	m	struct:felis::PWVGraph::Node
in_rvp_queue	./routine_sched.cc	/^    bool in_rvp_queue;$/;"	m	struct:felis::final::FreeNodeEntry	file:
inactive	./routine_sched.cc	/^  util::GenericListNode<FreeNodeEntry> free, inactive, rvp;$/;"	m	class:felis::final	file:
incoming	./node_config.h	/^  std::array<IncomingTraffic *, kMaxNrNode> incoming;$/;"	m	class:felis::NodeConfiguration
incoming_connection	./tcp_node.h	/^  std::array<tcp::ReceiverChannel *, kMaxNrNode> incoming_connection;$/;"	m	class:felis::TcpNodeTransport
incoming_socks	./tcp_node.h	/^  std::array<go::TcpSocket *, kMaxNrNode> incoming_socks;$/;"	m	class:felis::TcpNodeTransport
indegree	./pwv_graph.h	/^  std::atomic_uint8_t indegree;$/;"	m	struct:felis::RVPInfo
index_handle	./txn.h	/^  BaseTxnHandle index_handle() { return BaseTxnHandle(sid, epoch->id()); }$/;"	f	class:felis::BaseTxn
index_handle	./txn_cc.h	/^  TxnHandle index_handle() const { return TxnHandle(sid, epoch->id()); }$/;"	f	class:felis::Txn
index_shipper_peer	./node_config.h	/^    NodePeerConfig index_shipper_peer;$/;"	m	struct:felis::NodeConfiguration::NodeConfig
info	./module.h	/^  } info;$/;"	m	class:felis::Module	typeref:struct:felis::Module::__anon5
init_time	./txn.h	/^  std::chrono::time_point<std::chrono::high_resolution_clock> init_time;$/;"	m	class:felis::BaseTxn
initial_timestamp	./masstree_index_impl.cc	/^kvtimestamp_t initial_timestamp;$/;"	v
initialize_time_ms	./epoch.h	/^    int initialize_time_ms = 0;$/;"	m	struct:felis::EpochClient::__anon2
initialized	./module.h	/^  bool initialized = false;$/;"	m	class:felis::Module
inline_handlers	./piece.h	/^  PieceRoutine *inline_handlers[kInlineLimit];$/;"	m	class:felis::BasePieceCollection
inline_pool	./vhandle.cc	/^mem::ParallelSlabPool BaseVHandle::inline_pool;$/;"	m	class:felis::BaseVHandle	file:
inline_pool	./vhandle.h	/^  static mem::ParallelSlabPool inline_pool;$/;"	m	class:felis::BaseVHandle
inline_str_base	./sqltypes.h	/^  inline_str_base() : sz(0) {}$/;"	f	class:sql::inline_str_base
inline_str_base	./sqltypes.h	/^  inline_str_base(const char *s) {$/;"	f	class:sql::inline_str_base
inline_str_base	./sqltypes.h	/^  inline_str_base(const char *s, size_t n) {$/;"	f	class:sql::inline_str_base
inline_str_base	./sqltypes.h	/^  inline_str_base(const inline_str_base &that) : sz(that.sz) {$/;"	f	class:sql::inline_str_base
inline_str_base	./sqltypes.h	/^  inline_str_base(const std::string &s) {$/;"	f	class:sql::inline_str_base
inline_str_base	./sqltypes.h	/^class inline_str_base {$/;"	c	namespace:sql
inline_used	./vhandle.h	/^  uint8_t inline_used;$/;"	m	class:felis::SortedArrayVHandle
inlined	./pwv_graph.h	/^    Edge inlined[kInlineEdges];$/;"	m	struct:felis::PWVGraph::Node
insert_time_ms	./epoch.h	/^    int insert_time_ms = 0;$/;"	m	struct:felis::EpochClient::__anon2
instance	./contention_manager.h	/^  static inline felis::ContentionManager *instance;$/;"	m	struct:util::InstanceInit
instance	./epoch.h	/^  static felis::EpochManager *instance;$/;"	m	struct:util::InstanceInit
instance	./gc.cc	/^GC *InstanceInit<GC>::instance = &g_gc;$/;"	m	class:util::InstanceInit	file:
instance	./gc.h	/^  static GC *instance;$/;"	m	struct:util::InstanceInit
instance	./node_config.h	/^  static inline felis::NodeConfiguration *instance;$/;"	m	struct:util::InstanceInit
instance	./pwv_graph.h	/^  static inline felis::PWVGraphManager *instance = nullptr;$/;"	m	struct:util::InstanceInit
instance	./slice.cc	/^  felis::SliceMappingTable *util::InstanceInit<felis::SliceMappingTable>::instance;$/;"	m	class:util::util::InstanceInit	file:
instance	./slice.h	/^  static felis::SliceMappingTable *instance;$/;"	m	struct:util::InstanceInit
instance	./slice.h	/^  static inline felis::SliceLocator<TableType> *instance;$/;"	m	struct:util::InstanceInit
instance	./tcp_node.h	/^  static inline felis::TcpNodeTransport *instance;$/;"	m	struct:util::InstanceInit
instance	./vhandle_sync.h	/^  static inline felis::SimpleSync *instance;$/;"	m	struct:util::InstanceInit
instance	./vhandle_sync.h	/^  static inline felis::SpinnerSlot *instance;$/;"	m	struct:util::InstanceInit
is_arg	./opts.h	/^  bool is_arg;$/;"	m	struct:felis::Option
is_empty	./mem.h	/^  bool is_empty() const { return stats.used == 0; }$/;"	f	class:mem::WeakPool
is_enable_inline	./index_common.h	/^  bool is_enable_inline() const { return enable_inline; }$/;"	f	class:felis::Table
is_full	./mem.h	/^  bool is_full() const { return head == nullptr; }$/;"	f	class:mem::WeakPool
is_graph_built	./routine_sched.cc	/^  std::atomic_bool is_graph_built;$/;"	m	class:felis::final	file:
is_inlined	./vhandle.h	/^  bool is_inlined() const { return inline_used != 0xFF; }$/;"	f	class:felis::SortedArrayVHandle
is_large_slab	./mem.h	/^  bool is_large_slab() const { return chunk_size >= 512_K; }$/;"	f	class:mem::SlabPool
is_node_free	./pwv_graph.h	/^  bool is_node_free(uint64_t sid) const {$/;"	f	class:felis::PWVGraph
is_read_only	./index_common.h	/^  bool is_read_only() const { return read_only; }$/;"	f	class:felis::Table
is_rvp	./pwv_graph.h	/^  bool is_rvp;$/;"	m	struct:felis::RVPInfo
is_started	./log.h	/^  bool is_started;$/;"	m	class:PerfLog
is_trace_enabled	./log.h	/^static bool is_trace_enabled(std::string_view msg = "")$/;"	f
k	./entity.h	/^  VarStr *k;$/;"	m	class:felis::final
kAutoIncrementZones	./index_common.h	/^  static constexpr size_t kAutoIncrementZones = 2048;$/;"	m	class:felis::Table
kAutoTuneThreshold	./opts.h	/^  static inline const auto kAutoTuneThreshold = Option("AutoTuneThreshold", false);$/;"	m	struct:felis::Options
kBatchAppendAlloc	./opts.h	/^  static inline const auto kBatchAppendAlloc = Option("BatchAppendAlloc");$/;"	m	struct:felis::Options
kBinpackSplitting	./opts.h	/^  static inline const auto kBinpackSplitting = Option("BinpackSplitting", false);$/;"	m	struct:felis::Options
kBlockSize	./gc.cc	/^  static constexpr size_t kBlockSize = 512;$/;"	m	struct:felis::GarbageBlock	file:
kBlockSize	./gc.cc	/^static_assert(sizeof(GarbageBlock) == GarbageBlock::kBlockSize, "Block doesn't match block size?");$/;"	m	class:felis::GarbageBlock	file:
kBlockSize	./vhandle_cch.h	/^    static constexpr size_t kBlockSize = 64;$/;"	m	struct:felis::VHandleCollectionHandler::Block
kBlockSize	./vhandle_cch.h	/^  static_assert(sizeof(Block) == Block::kBlockSize, "Block doesn't match block size?");$/;"	m	class:felis::VHandleCollectionHandler::Block
kBufferSize	./node_config.h	/^  static constexpr size_t kBufferSize = 16383;$/;"	m	class:felis::LocalDispatcherImpl
kBufferSize	./receiver.cc	/^static const size_t kBufferSize = 1 << 20;$/;"	v	file:
kCoreScaling	./opts.h	/^  static inline const auto kCoreScaling = Option("CoreScaling");$/;"	m	struct:felis::Options
kCpu	./opts.h	/^  static inline const auto kCpu = Option("cpu");$/;"	m	struct:felis::Options
kDataMigration	./opts.h	/^  static inline const auto kDataMigration = Option("DataMigrationMode", false);$/;"	m	struct:felis::Options
kEnableGranola	./opts.h	/^  static inline const auto kEnableGranola = Option("EnableGranola", false);$/;"	m	struct:felis::Options
kEnablePWV	./opts.h	/^  static inline const auto kEnablePWV = Option("EnablePWV", false);$/;"	m	struct:felis::Options
kEnablePartition	./opts.h	/^  static inline const auto kEnablePartition = Option("EnablePartition", false);$/;"	m	struct:felis::Options
kEpochMemoryLimitPerCore	./epoch.cc	/^static constexpr size_t kEpochMemoryLimitPerCore = 16_M;$/;"	m	namespace:felis	file:
kEpochPromiseAllocationMainLimit	./epoch.cc	/^static constexpr size_t kEpochPromiseAllocationMainLimit = 64_M;$/;"	m	namespace:felis	file:
kEpochPromiseAllocationWorkerLimit	./epoch.cc	/^static constexpr size_t kEpochPromiseAllocationWorkerLimit = 1024_M;$/;"	m	namespace:felis	file:
kEpochPromiseMiniBrkSize	./epoch.cc	/^static constexpr size_t kEpochPromiseMiniBrkSize = 4 * CACHE_LINE_SIZE;$/;"	m	namespace:felis	file:
kEpochQueueLength	./opts.h	/^  static inline const auto kEpochQueueLength = Option("EpochQueueLength");$/;"	m	struct:felis::Options
kEpochSize	./opts.h	/^  static inline const auto kEpochSize = Option("EpochSize");$/;"	m	struct:felis::Options
kFieldOffset	./sqltypes.h	/^  static constexpr int kFieldOffset = -1;$/;"	m	class:sql::GapField
kFieldOffset	./sqltypes.h	/^  static constexpr int kFieldOffset = PreviousFields::kFieldOffset + 1;$/;"	m	class:sql::Field
kHasInstance	./contention_manager.h	/^  static constexpr bool kHasInstance = true;$/;"	m	struct:util::InstanceInit
kHasInstance	./epoch.h	/^  static constexpr bool kHasInstance = true;$/;"	m	struct:util::InstanceInit
kHasInstance	./gc.h	/^  static constexpr bool kHasInstance = true;$/;"	m	struct:util::InstanceInit
kHasInstance	./node_config.h	/^  static constexpr bool kHasInstance = true;$/;"	m	struct:util::InstanceInit
kHasInstance	./pwv_graph.h	/^  static constexpr bool kHasInstance = true;$/;"	m	struct:util::InstanceInit
kHasInstance	./slice.h	/^  static constexpr bool kHasInstance = true;$/;"	m	struct:util::InstanceInit
kHasInstance	./tcp_node.h	/^  static constexpr bool kHasInstance = true;$/;"	m	struct:util::InstanceInit
kHasInstance	./vhandle_sync.h	/^  static constexpr bool kHasInstance = true;$/;"	m	struct:util::InstanceInit
kHashTableSize	./routine_sched.cc	/^const size_t EpochExecutionDispatchService::kHashTableSize = 100001;$/;"	m	class:felis::EpochExecutionDispatchService	file:
kHeaderSize	./mem.h	/^  static const size_t kHeaderSize = sizeof(PoolType)$/;"	m	class:mem::ParallelAllocator
kHeaderSize	./txn.h	/^    static constexpr size_t kHeaderSize =$/;"	m	struct:felis::BaseTxn::BaseTxnIndexOpContext
kHost	./console_client.cc	/^  static std::string kHost;$/;"	m	class:felis::ConfModule	file:
kHost	./console_client.cc	/^std::string ConfModule::kHost = "";$/;"	m	class:felis::ConfModule	file:
kIndexOpFlatten	./txn_cc.h	/^  static constexpr uint64_t kIndexOpFlatten = std::numeric_limits<uint32_t>::max();$/;"	m	class:felis::Txn
kInlineEdges	./pwv_graph.h	/^    static constexpr auto kInlineEdges = 1;$/;"	m	struct:felis::PWVGraph::Node
kInlineLimit	./piece.h	/^  static constexpr size_t kInlineLimit = 6;$/;"	m	class:felis::BasePieceCollection
kInlinedSize	./vhandle.h	/^  static constexpr size_t kInlinedSize = 256;$/;"	m	class:felis::BaseVHandle
kInterArrival	./opts.h	/^  static inline const auto kInterArrival = Option("InterArrival");$/;"	m	struct:felis::Options
kJsonResponseError	./console.cc	/^static const auto kJsonResponseError = json11::Json::object({$/;"	m	namespace:felis	file:
kLargeSlabPageSize	./mem.h	/^  static constexpr size_t kLargeSlabPageSize = 64_M;$/;"	m	class:mem::SlabPool
kLogFile	./opts.h	/^  static inline const auto kLogFile = Option("LogFile");$/;"	m	struct:felis::Options
kMajorGCLazy	./opts.h	/^  static inline const auto kMajorGCLazy = Option("LazyMajorGC", false);$/;"	m	struct:felis::Options
kMajorGCThreshold	./opts.h	/^  static inline const auto kMajorGCThreshold = Option("MajorGCThreshold");$/;"	m	struct:felis::Options
kMaxBatch	./contention_manager.cc	/^  static constexpr size_t kMaxBatch = 255;$/;"	m	struct:felis::VersionBuffer	file:
kMaxBufferSize	./console_client.cc	/^  static constexpr int kMaxBufferSize = (32 << 10) - 8;$/;"	m	class:felis::ConsoleClient	file:
kMaxHandlersLimit	./piece.h	/^  static constexpr int kMaxHandlersLimit = 32 + kInlineLimit;$/;"	m	class:felis::BasePieceCollection
kMaxLevels	./node_config.h	/^  static constexpr auto kMaxLevels = PromiseRoutineTransportService::kPromiseMaxLevels;$/;"	m	class:felis::TransportBatcher
kMaxMappingTableBuffer	./tcp_node.cc	/^  static constexpr auto kMaxMappingTableBuffer = 1024;$/;"	m	class:felis::tcp::ReceiverChannel	file:
kMaxNodeLimit	./opts.h	/^  static inline const auto kMaxNodeLimit = Option("MaxNodeLimit");$/;"	m	struct:felis::Options
kMaxNrBlocks	./vhandle_cch.h	/^    static constexpr int kMaxNrBlocks = kBlockSize \/ 8 - 2;$/;"	m	struct:felis::VHandleCollectionHandler::Block
kMaxNrNode	./node_config.h	/^static constexpr size_t kMaxNrNode = 254;$/;"	m	namespace:felis
kMaxNrPools	./mem.h	/^  static constexpr int kMaxNrPools = 64;$/;"	m	class:mem::ParallelAllocationPolicy
kMaxNrRelations	./index_common.h	/^  static constexpr int kMaxNrRelations = 1024;$/;"	m	class:felis::TableManager
kMaxNrRows	./gc.cc	/^  static constexpr int kMaxNrRows = kBlockSize \/ 8 - 4;$/;"	m	struct:felis::GarbageBlock	file:
kMaxNrThreads	./node_config.h	/^  static constexpr size_t kMaxNrThreads = 32;$/;"	m	class:felis::NodeConfiguration
kMaxPackedKeys	./txn.h	/^    static constexpr size_t kMaxPackedKeys = 15;$/;"	m	struct:felis::BaseTxn::BaseTxnIndexOpContext
kMaxPiecesPerPhase	./epoch.h	/^  static constexpr size_t kMaxPiecesPerPhase = 12800000;$/;"	m	class:felis::EpochClient
kMaxPools	./mem.h	/^  static const int kMaxPools = 20;$/;"	m	class:mem::ParallelRegion
kMaxPos	./contention_manager.cc	/^  static constexpr int kMaxPos = 8192;$/;"	m	struct:felis::VersionBufferHead	file:
kMaxRangeScanKeys	./txn.h	/^  static constexpr size_t kMaxRangeScanKeys = 32;$/;"	m	class:felis::BaseTxn
kMaxRoutines	./module.cc	/^    static constexpr int kMaxRoutines = 1024;$/;"	m	class:felis::CoroutineModule::CoroutineStackAllocator	file:
kMem	./opts.h	/^  static inline const auto kMem = Option("mem");$/;"	m	struct:felis::Options
kMemAllocTypeLabel	./mem.h	/^const std::string kMemAllocTypeLabel[] = {$/;"	m	namespace:mem
kNextForEnd	./hashtable_index_impl.cc	/^static HashEntry *kNextForEnd = (HashEntry *) 0xEDEDEDEDEDEDEDED;$/;"	m	namespace:felis	file:
kNextForInitializing	./hashtable_index_impl.cc	/^static HashEntry *kNextForInitializing = (HashEntry *) 0xdeadbeef00000000;$/;"	m	namespace:felis	file:
kNextForUninitialized	./hashtable_index_impl.cc	/^static HashEntry *kNextForUninitialized = (HashEntry *) 0;$/;"	m	namespace:felis	file:
kNrBins	./probe_utils.h	/^  static constexpr int kNrBins = N;$/;"	m	struct:agg::LogHistogram
kNrCorePerNode	./mem.h	/^constexpr size_t kNrCorePerNode = 16;$/;"	m	namespace:mem
kNrEpoch	./opts.h	/^  static inline const auto kNrEpoch = Option("NrEpoch");$/;"	m	struct:felis::Options
kNrMaxSlices	./slice.h	/^static constexpr int kNrMaxSlices = 256;$/;"	m	namespace:felis
kNrQueue	./gc.cc	/^  static constexpr size_t kNrQueue = 601;$/;"	m	struct:felis::GarbageBlockSlab	file:
kNrStatusNames	./console.cc	/^static const size_t kNrStatusNames = 6;$/;"	m	namespace:felis	file:
kOffset	./hashtable_index_impl.cc	/^static constexpr size_t kOffset = 96;$/;"	m	namespace:felis	file:
kOffset	./sqltypes.h	/^  static constexpr int kOffset = N;$/;"	m	class:sql::Field
kOnDemandSplitting	./opts.h	/^  static inline const auto kOnDemandSplitting = Option("OnDemandSplitting");$/;"	m	struct:felis::Options
kOutputDir	./opts.h	/^  static inline const auto kOutputDir = Option("OutputDir");$/;"	m	struct:felis::Options
kPWVGraphAlloc	./opts.h	/^  static inline const auto kPWVGraphAlloc = Option("PWVGraphAlloc");$/;"	m	struct:felis::Options
kPendingValue	./vhandle.h	/^static const uintptr_t kPendingValue = 0xFE1FE190FFFFFFFF; \/\/ hope this pointer is weird enough$/;"	m	namespace:felis
kPerThreadBuffer	./tcp_node.cc	/^  static constexpr size_t kPerThreadBuffer = 16 << 10;$/;"	m	class:felis::tcp::SendChannel	file:
kPerTxnHashSize	./commit_buffer.cc	/^constexpr auto kPerTxnHashSize = 16;$/;"	m	namespace:felis	file:
kPort	./console_client.cc	/^  static unsigned short kPort;$/;"	m	class:felis::ConfModule	file:
kPort	./console_client.cc	/^unsigned short ConfModule::kPort = 3144;$/;"	m	class:felis::ConfModule	file:
kPrealloc	./locality_manager.h	/^  static constexpr size_t kPrealloc = 1024;$/;"	m	class:felis::LocalityManager
kPreallocPerCore	./gc.cc	/^  static constexpr size_t kPreallocPerCore = 64_K;$/;"	m	struct:felis::GarbageBlockSlab	file:
kPriorityQueuePoolElementSize	./routine_sched.h	/^static constexpr size_t kPriorityQueuePoolElementSize =$/;"	m	namespace:felis
kPromiseMaxLevels	./piece.h	/^  static constexpr size_t kPromiseMaxLevels = 16;$/;"	m	class:felis::PromiseRoutineTransportService
kPromiseRoutineHeader	./piece.cc	/^static constexpr size_t kPromiseRoutineHeader = sizeof(go::Routine);$/;"	m	namespace:felis	file:
kReadOnlySliceId	./slice.h	/^static constexpr int16_t kReadOnlySliceId = std::numeric_limits<int16_t>::min();$/;"	m	namespace:felis
kRelationId	./txn_cc.h	/^  static constexpr int kRelationId = static_cast<int>(Table::kTable);$/;"	m	class:felis::KeyParam
kRelationId	./txn_cc.h	/^  static constexpr int kRelationId = static_cast<int>(Table::kTable);$/;"	m	class:felis::RangeParam
kScanningSessionActive	./shipping.cc	/^static constexpr uint64_t kScanningSessionActive = 0x00;$/;"	m	namespace:felis	file:
kScanningSessionConverged	./shipping.cc	/^static constexpr uint64_t kScanningSessionConverged = 0x03;$/;"	m	namespace:felis	file:
kScanningSessionConverging	./shipping.cc	/^static constexpr uint64_t kScanningSessionConverging = 0x02;$/;"	m	namespace:felis	file:
kScanningSessionInactive	./shipping.cc	/^static constexpr uint64_t kScanningSessionInactive = 0x01;$/;"	m	namespace:felis	file:
kScanningSessionMask	./shipping.cc	/^static constexpr uint64_t kScanningSessionMask = (1 << kScanningSessionStatusBits) - 1;$/;"	m	namespace:felis	file:
kScanningSessionStatusBits	./shipping.cc	/^static constexpr uint64_t kScanningSessionStatusBits = 2;$/;"	m	namespace:felis	file:
kSendBatch	./shipping.h	/^  static constexpr int kSendBatch = 32 * IOV_MAX;$/;"	m	class:felis::BaseShipment
kSize	./vhandle.h	/^  static constexpr size_t kSize = 128;$/;"	m	class:felis::BaseVHandle
kSlabPageSize	./mem.h	/^  static constexpr size_t kSlabPageSize = 2_M;$/;"	m	class:mem::SlabPool
kStackSize	./module.cc	/^    static constexpr int kStackSize = 500_K;$/;"	m	class:felis::CoroutineModule::CoroutineStackAllocator	file:
kStatusNames	./console.cc	/^static const std::string kStatusNames[] = {$/;"	m	namespace:felis	file:
kTotalStates	./node_config.h	/^  static constexpr int kTotalStates = 3;$/;"	m	class:felis::IncomingTraffic
kTpccHashShard	./opts.h	/^  static inline const auto kTpccHashShard = Option("TpccHashShard", false);$/;"	m	struct:felis::Options
kTpccHotWarehouseBitmap	./opts.h	/^  static inline const auto kTpccHotWarehouseBitmap = Option("TpccHotWarehouseBitmap");$/;"	m	struct:felis::Options
kTpccHotWarehouseLoad	./opts.h	/^  static inline const auto kTpccHotWarehouseLoad = Option("TpccHotWarehouseLoad");$/;"	m	struct:felis::Options
kTpccReadOnlyDelayQuery	./opts.h	/^  static inline const auto kTpccReadOnlyDelayQuery = Option("TpccReadOnlyDelayQuery", false);$/;"	m	struct:felis::Options
kTpccWarehouses	./opts.h	/^  static inline const auto kTpccWarehouses = Option("TpccWarehouses");$/;"	m	struct:felis::Options
kUpdateBatchCounter	./piece.h	/^  static constexpr size_t kUpdateBatchCounter = std::numeric_limits<uint64_t>::max() - (1ULL << 56);$/;"	m	struct:felis::PieceRoutine
kVHandleBatchAppend	./opts.h	/^  static inline const auto kVHandleBatchAppend = Option("VHandleBatchAppend", false);$/;"	m	struct:felis::Options
kVHandleLockElision	./opts.h	/^  static inline const auto kVHandleLockElision = Option("VHandleLockElision", false);$/;"	m	struct:felis::Options
kYcsbContentionKey	./opts.h	/^  static inline const auto kYcsbContentionKey = Option("YcsbContentionKey");$/;"	m	struct:felis::Options
kYcsbDependency	./opts.h	/^  static inline const auto kYcsbDependency = Option("YcsbDependency", false);$/;"	m	struct:felis::Options
kYcsbReadOnly	./opts.h	/^  static inline const auto kYcsbReadOnly = Option("YcsbReadOnly");$/;"	m	struct:felis::Options
kYcsbSkewFactor	./opts.h	/^  static inline const auto kYcsbSkewFactor = Option("YcsbSkewFactor");$/;"	m	struct:felis::Options
key	./index_common.h	/^    const VarStrView &key() const { return cur_key; }$/;"	f	class:felis::Table::Iterator
key	./routine_sched.cc	/^    uint64_t key;$/;"	m	struct:felis::final::PriorityQueueHeapEntry	file:
key	./routine_sched.h	/^  uint64_t key;$/;"	m	struct:felis::PriorityQueueHashEntry
key	./stdmap_index_impl.h	/^    const VarStr &key() const { return current->first; }$/;"	f	struct:dolly::StdMapIndex::StdMapIteratorImpl
key_data	./txn.h	/^    const uint8_t *key_data[kMaxPackedKeys];$/;"	m	struct:felis::BaseTxn::BaseTxnIndexOpContext
key_len	./index_common.h	/^  size_t key_len;$/;"	m	class:felis::Table
key_len	./txn.h	/^    uint16_t key_len[kMaxPackedKeys];$/;"	m	struct:felis::BaseTxn::BaseTxnIndexOpContext
key_length	./index_common.h	/^  size_t key_length() const { return key_len; }$/;"	f	class:felis::Table
keys_bitmap	./txn.h	/^    uint16_t keys_bitmap;$/;"	m	struct:felis::BaseTxn::BaseTxnIndexOpContext
label	./epoch.h	/^  const char *label;$/;"	m	class:felis::EpochCallback
large_slab	./mem.cc	/^  bool large_slab = false;$/;"	m	class:mem::MetaSlab	file:
last	./piece.h	/^  PieceRoutine *&last() {$/;"	f	class:felis::BasePieceCollection
last_version	./vhandle.h	/^  uint64_t last_version() const { return versions[size - 1]; }$/;"	f	class:felis::SortedArrayVHandle
latest_version	./vhandle.h	/^  std::atomic_int latest_version; \/\/ the latest written version's offset in *versions$/;"	m	class:felis::SortedArrayVHandle
lb	./node_config.h	/^  LocalDispatcherImpl *lb;$/;"	m	class:felis::LocalTransport
left_over	./completion.h	/^  unsigned long left_over() const {$/;"	f	class:felis::CompletionObject
len	./console_client.cc	/^  int len;$/;"	m	class:felis::ConsoleClient	file:
len	./mem.h	/^  size_t len;$/;"	m	class:mem::WeakPool
len	./txn_cc.h	/^  int len;$/;"	m	class:felis::KeyParam
len	./txn_cc.h	/^  uint8_t len;$/;"	m	class:felis::NodeBitmap
len	./varstr.h	/^  uint16_t len;$/;"	m	class:felis::final
length	./varstr.h	/^  uint16_t length() const { return 0x00ff & w; }$/;"	f	class:felis::final
length	./varstr.h	/^  uint16_t length() const { return len; }$/;"	f	class:felis::final
level	./piece.h	/^  uint8_t level;$/;"	m	struct:felis::PieceRoutine
limit	./mem.h	/^  size_t limit;$/;"	m	class:mem::Brk
limit	./piece.h	/^  int limit;$/;"	m	class:felis::BasePieceCollection
load	./felis_probes.h	/^  long load;$/;"	m	struct:felis::probes::LocalitySchedule
load	./locality_manager.h	/^    long load;$/;"	m	struct:felis::LocalityManager::WeightDist
local_batch	./node_config.h	/^  } *local_batch;$/;"	m	class:felis::NodeConfiguration	typeref:struct:felis::NodeConfiguration::LocalBatch
local_batch_completed	./node_config.h	/^  std::atomic_ulong local_batch_completed;$/;"	m	class:felis::NodeConfiguration
local_buffer_plan_counters	./node_config.h	/^  std::atomic_ulong *local_buffer_plan_counters() const {$/;"	f	class:felis::NodeConfiguration
local_graph	./pwv_graph.cc	/^PWVGraph *PWVGraphManager::local_graph()$/;"	f	class:felis::PWVGraphManager
local_rand	./locality_manager.cc	/^static thread_local util::XORRandom64 local_rand;$/;"	m	namespace:felis	file:
local_ti	./hashtable_index_impl.cc	/^static thread_local ThreadInfo *local_ti = nullptr;$/;"	m	namespace:felis	file:
lock	./gc.cc	/^  util::MCSSpinLock lock;$/;"	m	struct:felis::GarbageBlockSlab	file:
lock	./mem.h	/^  util::SpinLock lock;$/;"	m	class:mem::Pool
lock	./node_config.h	/^    util::SpinLock lock;$/;"	m	struct:felis::LocalDispatcherImpl::Queue
lock	./shipping.h	/^  std::mutex lock;$/;"	m	class:felis::BaseShipment
lock	./slice.h	/^  std::mutex lock;$/;"	m	struct:felis::SliceQueue
lock	./tcp_node.cc	/^    std::atomic_bool lock;$/;"	m	struct:felis::tcp::SendChannel::Channel	file:
lock	./tcp_node.cc	/^  std::atomic_bool lock;$/;"	m	class:felis::tcp::ReceiverChannel	file:
lock	./vhandle.h	/^  std::atomic_bool lock;$/;"	m	class:felis::CalvinVHandle
lock	./vhandle.h	/^  std::atomic_bool lock;$/;"	m	class:felis::LinkListVHandle
lock	./vhandle.h	/^  util::MCSSpinLock lock;$/;"	m	class:felis::SortedArrayVHandle
log_arr	./epoch.h	/^  std::vector<long long>* log_arr;$/;"	m	class:felis::EpochClient
log_len	./epoch.h	/^  uint32_t log_len;$/;"	m	class:felis::EpochDispatcher
logging_module	./module.cc	/^static LoggingModule logging_module;$/;"	m	namespace:felis	file:
ltp	./tcp_node.h	/^  LocalTransport ltp;$/;"	m	class:felis::TcpNodeTransport
m	./probe_utils.h	/^  std::mutex m;$/;"	m	class:agg::Agg
magic	./node_config.h	/^    unsigned long magic;$/;"	m	struct:felis::NodeConfiguration::LocalBatch
main	./main.cc	/^int main(int argc, char *argv[])$/;"	f
main	./receiver.cc	/^int main(int argc, char *argv[])$/;"	f
map	./stdmap_index_impl.h	/^  std::map<VarStr, VHandle> map;$/;"	m	class:dolly::StdMapIndex
mark	./pwv_graph.h	/^    bool mark;$/;"	m	struct:felis::PWVGraph::Node
max_node_id	./node_config.h	/^  size_t max_node_id;$/;"	m	class:felis::NodeConfiguration
max_seed	./felis_probes.h	/^  uint64_t max_seed;$/;"	m	struct:felis::probes::LocalitySchedule
max_size	./sqltypes.h	/^  max_size() const {$/;"	f	class:sql::inline_str_base
mem	./epoch.h	/^  EpochMemory *mem;$/;"	m	class:felis::Epoch
mem	./epoch.h	/^  EpochMemory *mem;$/;"	m	class:felis::EpochManager
mem	./mem.cc	/^namespace mem {$/;"	n	file:
mem	./mem.h	/^namespace mem {$/;"	n
mem	./tcp_node.cc	/^    uint8_t *mem;$/;"	m	struct:felis::tcp::SendChannel::Channel	file:
mem_func	./epoch.h	/^  TxnMemberFunc mem_func;$/;"	m	class:felis::CallTxnsWorker
metaslab_page_size	./mem.h	/^  size_t metaslab_page_size() const { return PageSize(is_large_slab()); }$/;"	f	class:mem::SlabPool
minibrks	./epoch.h	/^  mem::Brk *minibrks[NodeConfiguration::kMaxNrThreads + 1]; \/\/ for mini objects$/;"	m	class:felis::EpochPromiseAllocationService
mmap_buf	./epoch.h	/^    uint8_t *mmap_buf;$/;"	m	struct:felis::EpochMemory::__anon3
mutex	./console.h	/^  std::mutex mutex;$/;"	m	class:felis::Console
mutex	./shipping.h	/^  std::mutex &mutex() { return lock; }$/;"	f	class:felis::BaseShipment
name	./module.h	/^    std::string name;$/;"	m	struct:felis::Module::__anon5
name	./node_config.h	/^    std::string name;$/;"	m	struct:felis::NodeConfiguration::NodeConfig
need_lock	./slice.h	/^  bool need_lock;$/;"	m	struct:felis::SliceQueue
need_scan	./node_config.h	/^    std::atomic_bool need_scan = false;$/;"	m	struct:felis::LocalDispatcherImpl::Queue
need_unmap	./mem.h	/^  bool need_unmap;$/;"	m	class:mem::WeakPool
newcap	./felis_probes.h	/^  unsigned int newcap;$/;"	m	struct:felis::probes::VHandleExpand
neworder_cnt	./felis_probes.cc	/^  agg::Agg<agg::Histogram<32, 0, 1>> neworder_cnt;$/;"	m	struct:ProbeMain	file:
next	./commit_buffer.h	/^    std::atomic<Entry *> next = nullptr;$/;"	m	struct:felis::CommitBuffer::Entry
next	./hashtable_index_impl.h	/^  std::atomic<HashEntry *> next;$/;"	m	struct:felis::HashEntry
next	./module.h	/^  Module<Type> *next;$/;"	m	class:felis::Module
next	./piece.h	/^  BasePieceCollection *next;$/;"	m	struct:felis::PieceRoutine
next	./vhandle.h	/^    struct Entry *next;$/;"	m	struct:felis::LinkListVHandle::Entry	typeref:struct:felis::LinkListVHandle::Entry::Entry
next	./vhandle_cch.h	/^    Block *next;$/;"	m	struct:felis::VHandleCollectionHandler::Block
next_buffer_head	./contention_manager.cc	/^  VersionBufferHead *next_buffer_head;$/;"	m	struct:felis::VersionBufferHead	file:
next_node	./slice.h	/^  std::atomic<int> next_node;$/;"	m	class:felis::SliceMappingTable
node	./pwv_graph.h	/^    Node *node = nullptr;$/;"	m	struct:felis::PWVGraph::Edge
node_compress	./slice.h	/^  int node_compress[kMaxNrNode];$/;"	m	class:felis::SliceMappingTable
node_config	./tcp_node.h	/^  static NodeConfiguration &node_config() {$/;"	f	class:felis::TcpNodeTransport
node_id	./epoch.h	/^  int node_id;$/;"	m	class:felis::EpochObject
node_id	./node_config.h	/^    unsigned long node_id;$/;"	m	struct:felis::NodeConfiguration::LocalBatch
node_id	./node_config.h	/^  int node_id() const { return id; }$/;"	f	class:felis::NodeConfiguration
node_id	./piece.h	/^  uint8_t node_id;$/;"	m	struct:felis::PieceRoutine
node_mem	./epoch.h	/^  } node_mem[kMaxNrNode];$/;"	m	class:felis::EpochMemory	typeref:struct:felis::EpochMemory::__anon3
node_name	./console.h	/^  std::string node_name;$/;"	m	class:felis::Console
nodes	./pwv_graph.h	/^  Node *nodes;$/;"	m	class:felis::PWVGraph
noexcept	./console.h	/^  template <typename T> friend T &util::Instance() noexcept;$/;"	m	class:felis::Console
noexcept	./epoch.h	/^  template <typename T> friend T &util::Instance() noexcept;$/;"	m	class:felis::EpochPromiseAllocationService
noexcept	./index_common.h	/^  template <typename T> friend T &util::Instance() noexcept;$/;"	m	class:felis::TableManager
noexcept	./masstree_index_impl.h	/^  MasstreeIndex(std::tuple<bool> conf) noexcept; \/\/ no configuration required$/;"	m	class:felis::final
noexcept	./slice.h	/^  template <typename T> friend T &util::Instance() noexcept;$/;"	m	class:felis::SliceManager
nr	./epoch.h	/^    size_t nr;$/;"	m	struct:felis::EpochTxnSet::TxnSet
nr	./epoch.h	/^  uint64_t nr() const { return epoch_nr; }$/;"	f	class:felis::EpochObject
nr	./felis_probes.h	/^  unsigned long nr;$/;"	m	struct:felis::probes::NumVersionsOnGC
nr	./node_config.h	/^      size_t nr;$/;"	m	struct:felis::LocalDispatcherImpl::Queue::__anon6
nr	./txn_cc.h	/^  int nr;$/;"	m	class:felis::PlaceholderParam
nr_active	./pwv_graph.h	/^  int nr_active;$/;"	m	class:felis::PWVGraph
nr_batched	./felis_probes.h	/^  uint64_t nr_batched;$/;"	m	struct:felis::probes::OnDemandSplit
nr_blocks	./gc.h	/^    int nr_rows, nr_blocks;$/;"	m	struct:felis::GC::__anon4
nr_buckets	./hashtable_index_impl.h	/^  size_t nr_buckets;$/;"	m	class:felis::final
nr_buffer	./mem.h	/^  unsigned int nr_buffer;$/;"	m	class:mem::SlabPool
nr_bytes	./gc.h	/^    size_t nr_bytes;$/;"	m	struct:felis::GC::__anon4
nr_capacity	./vhandle.h	/^  const size_t nr_capacity() const { return capacity; }$/;"	f	class:felis::SortedArrayVHandle
nr_dist	./locality_manager.h	/^    size_t nr_dist;$/;"	m	struct:felis::LocalityManager::WeightDist
nr_empty	./mem.h	/^  unsigned int nr_empty;$/;"	m	class:mem::SlabPool
nr_free	./routine_sched.cc	/^  std::atomic_ulong nr_free;$/;"	m	class:felis::final	file:
nr_handlers	./piece.h	/^  int nr_handlers;$/;"	m	class:felis::BasePieceCollection
nr_handles	./vhandle_cch.h	/^    int nr_handles;$/;"	m	struct:felis::VHandleCollectionHandler::Block
nr_left	./tcp_node.cc	/^  std::atomic_long nr_left;$/;"	m	class:felis::tcp::ReceiverChannel	file:
nr_nodes	./node_config.h	/^  int nr_nodes() const { return max_node_id; }$/;"	f	class:felis::NodeConfiguration
nr_nodes	./slice.h	/^  int nr_nodes;$/;"	m	class:felis::SliceMappingTable
nr_ondemand_split	./vhandle.h	/^  int nr_ondemand_split() const { return nr_ondsplt; }$/;"	f	class:felis::SortedArrayVHandle
nr_ondsplt	./vhandle.h	/^  int nr_ondsplt;$/;"	m	class:felis::SortedArrayVHandle
nr_resources	./pwv_graph.h	/^    uint16_t nr_resources; \/\/ out_degree$/;"	m	struct:felis::PWVGraph::Node
nr_routines	./piece.h	/^  size_t nr_routines() const { return nr_handlers; }$/;"	f	class:felis::BasePieceCollection
nr_rows	./gc.h	/^    int nr_rows, nr_blocks;$/;"	m	struct:felis::GC::__anon4
nr_slices	./slice.h	/^  size_t nr_slices;$/;"	m	class:felis::SliceManager
nr_splitted	./felis_probes.h	/^  uint64_t nr_splitted;$/;"	m	struct:felis::probes::OnDemandSplit
nr_splitted	./threshold_autotune.h	/^  uint64_t nr_splitted = std::numeric_limits<uint32_t>::max();$/;"	m	class:felis::ThresholdAutoTuneController
nr_threads	./epoch.h	/^  int nr_threads;$/;"	m	class:felis::EpochClientBaseWorker
nr_update	./felis_probes.h	/^  int nr_update;$/;"	m	struct:felis::probes::TpccDelivery
nr_update	./felis_probes.h	/^  int nr_update;$/;"	m	struct:felis::probes::TpccNewOrder
nr_update	./felis_probes.h	/^  int nr_update;$/;"	m	struct:felis::probes::TpccPayment
nr_updated	./vhandle.h	/^  unsigned int nr_updated() const { return latest_version.load(std::memory_order_relaxed) + 1; }$/;"	f	class:felis::SortedArrayVHandle
nr_versions	./vhandle.h	/^  const size_t nr_versions() const { return size; }$/;"	f	class:felis::CalvinVHandle
nr_versions	./vhandle.h	/^  const size_t nr_versions() const { return size; }$/;"	f	class:felis::LinkListVHandle
nr_versions	./vhandle.h	/^  const size_t nr_versions() const { return size; }$/;"	f	class:felis::SortedArrayVHandle
numa_node	./mem.h	/^  unsigned int numa_node;$/;"	m	class:mem::SlabPool
obj	./sqltypes.h	/^    T *obj;$/;"	m	struct:sql::GapField::FieldBuilder
obj	./stdmap_index_impl.h	/^    const VarStr *obj;$/;"	m	struct:dolly::StdMapIndex::StdMapIteratorImpl
obj	./vhandle.h	/^  VarStr *obj;$/;"	m	class:felis::CalvinVHandle
object	./shipping.h	/^  T *object;$/;"	m	struct:felis::ObjectShippingHandle
object	./stdmap_index_impl.h	/^    const VarStr *object() const { return obj; }$/;"	f	struct:dolly::StdMapIndex::StdMapIteratorImpl
object	./vhandle.h	/^    uintptr_t object;$/;"	m	struct:felis::LinkListVHandle::Entry
object_coreid	./vhandle.h	/^  uint8_t object_coreid() const { return this_coreid; }$/;"	f	class:felis::SortedArrayVHandle
offset	./epoch.h	/^  uint64_t offset;$/;"	m	class:felis::EpochObject
offset	./mem.h	/^  std::atomic_size_t offset;$/;"	m	class:mem::Brk
oldcap	./felis_probes.h	/^  unsigned int oldcap;$/;"	m	struct:felis::probes::VHandleExpand
on_node_free	./pwv_graph.h	/^    void (*on_node_free)(void *);$/;"	m	struct:felis::PWVGraph::Node
on_node_rvp_change	./pwv_graph.h	/^    void (*on_node_rvp_change)(void *);$/;"	m	struct:felis::PWVGraph::Node
ondsplt_cnt	./contention_manager.cc	/^  uint32_t ondsplt_cnt;$/;"	m	struct:felis::VersionBuffer	file:
operator !=	./sqltypes.h	/^  bool operator!=(const Char &other) const {$/;"	f	class:sql::Char
operator !=	./sqltypes.h	/^  bool operator!=(const inline_str_base &other) const {$/;"	f	class:sql::inline_str_base
operator !=	./varstr.h	/^  bool operator!=(const VarStrView &rhs) const {$/;"	f	class:felis::final
operator ()	./completion.h	/^  void operator()() {$/;"	f	class:felis::CompletionObject
operator ()	./epoch.cc	/^void EpochCallback::operator()(unsigned long cnt)$/;"	f	class:felis::EpochCallback
operator ()	./probe_utils.h	/^  Impl operator()() {$/;"	f	class:agg::Agg
operator ()	./txn.h	/^    BaseTxnRow operator()(VHandle *vhandle) const { return BaseTxnRow(sid, epoch_nr, vhandle); }$/;"	f	class:felis::BaseTxn::BaseTxnHandle
operator ()	./txn_cc.h	/^    TxnRow operator()(VHandle *vhandle) const { return TxnRow(sid, epoch_nr, vhandle); }$/;"	f	class:felis::Txn::TxnHandle
operator +=	./txn_cc.h	/^  NodeBitmap & operator+=(const NodeBitmap &rhs) {$/;"	f	class:felis::NodeBitmap
operator ->	./epoch.h	/^  T *operator->() const {$/;"	f	class:felis::GenericEpochObject
operator <	./varstr.h	/^  bool operator<(const VarStrView &rhs) const {$/;"	f	class:felis::final
operator <<	./probe_utils.h	/^  Average &operator<<(const Average &rhs) {$/;"	f	struct:agg::Average
operator <<	./probe_utils.h	/^  Average &operator<<(long value) {$/;"	f	struct:agg::Average
operator <<	./probe_utils.h	/^  Histogram &operator<<(const Histogram &rhs) {$/;"	f	struct:agg::Histogram
operator <<	./probe_utils.h	/^  Histogram &operator<<(long value) {$/;"	f	struct:agg::Histogram
operator <<	./probe_utils.h	/^  LogHistogram &operator<<(const LogHistogram &rhs) {$/;"	f	struct:agg::LogHistogram
operator <<	./probe_utils.h	/^  LogHistogram &operator<<(long value) {$/;"	f	struct:agg::LogHistogram
operator <<	./probe_utils.h	/^  Sum &operator<<(const Sum &rhs) {$/;"	f	struct:agg::Sum
operator <<	./probe_utils.h	/^  Sum &operator<<(long value) {$/;"	f	struct:agg::Sum
operator <<	./probe_utils.h	/^static inline std::ostream &operator<<(std::ostream &out, const Average &avg)$/;"	f	namespace:agg
operator <<	./probe_utils.h	/^static inline std::ostream &operator<<(std::ostream &out, const Sum &s)$/;"	f	namespace:agg
operator <<	./probe_utils.h	/^std::ostream &operator<<(std::ostream &out, const Histogram<N, Offset, Bucket>& h)$/;"	f	namespace:agg
operator <<	./probe_utils.h	/^std::ostream &operator<<(std::ostream &out, const LogHistogram<N, Offset, Base> &h)$/;"	f	namespace:agg
operator =	./mem.h	/^  Brk &operator =(Brk &&rhs) {$/;"	f	class:mem::Brk
operator =	./mem.h	/^  ParallelPool &operator=(ParallelPool &&rhs) {$/;"	f	class:mem::ParallelPool
operator =	./mem.h	/^  ParallelSlabPool &operator=(ParallelSlabPool &&rhs) {$/;"	f	class:mem::ParallelSlabPool
operator =	./mem.h	/^  Pool &operator=(Pool &&rhs) {$/;"	f	class:mem::Pool
operator =	./mem.h	/^  WeakPool &operator=(WeakPool &&rhs) {$/;"	f	class:mem::WeakPool
operator =	./sqltypes.h	/^  operator=(const Char &that) {$/;"	f	class:sql::Char
operator =	./sqltypes.h	/^  operator=(const inline_str_base &that) {$/;"	f	class:sql::inline_str_base
operator =	./txn_cc.h	/^  const FutureValue<void> &operator=(const FutureValue<void> &rhs) {$/;"	f	class:felis::FutureValue
operator ==	./sqltypes.h	/^  bool operator==(const Char &other) const {$/;"	f	class:sql::Char
operator ==	./sqltypes.h	/^  bool operator==(const inline_str_base &other) const {$/;"	f	class:sql::inline_str_base
operator ==	./varstr.h	/^  bool operator==(const VarStrView &rhs) const {$/;"	f	class:felis::final
operator T*	./epoch.h	/^  operator T*() const {$/;"	f	class:felis::GenericEpochObject
operator []	./pwv_graph.h	/^  PWVGraph *operator[](int idx) { return graphs.at(idx); }$/;"	f	class:felis::PWVGraphManager
operator []	./txn_cc.h	/^  const typename Table::Key &operator[](int idx) { return start[idx]; }$/;"	f	class:felis::KeyParam
operator []	./txn_cc.h	/^  const typename Table::Key &operator[](int idx) {$/;"	f	class:felis::RangeParam
operator []	./varstr.h	/^  uint8_t operator[](size_t idx) const {$/;"	f	class:felis::final
operator bool	./opts.h	/^  operator bool() const { return g_present[id]; }$/;"	f	struct:felis::Option
operator delete	./entity.h	/^  static void operator delete(void *p) {$/;"	f	class:felis::final
operator delete	./masstree_index_impl.cc	/^    static void operator delete(void *p) {}$/;"	f	struct:felis::MasstreeMap::Iterator
operator delete	./masstree_index_impl.cc	/^void MasstreeIndex::operator delete(void *p)$/;"	f	class:felis::MasstreeIndex
operator delete	./piece.h	/^    static void operator delete(void *ptr) {}$/;"	f	class:felis::BasePieceCollection::ExecutionRoutine
operator delete	./txn.h	/^  static void operator delete(void *ptr) {}$/;"	f	class:felis::BaseTxn
operator delete	./varstr.h	/^  static void operator delete(void *) { std::abort(); } \/\/ No, you cannot delete this class.$/;"	f	class:felis::final
operator delete	./varstr.h	/^  static void operator delete(void *ptr) {$/;"	f	class:felis::final
operator delete	./vhandle.h	/^    static void operator delete(void *ptr) {$/;"	f	struct:felis::LinkListVHandle::Entry
operator delete	./vhandle.h	/^  static void operator delete(void *ptr) {$/;"	f	class:felis::CalvinVHandle
operator delete	./vhandle.h	/^  static void operator delete(void *ptr) {$/;"	f	class:felis::LinkListVHandle
operator delete	./vhandle.h	/^  static void operator delete(void *ptr) {$/;"	f	class:felis::SortedArrayVHandle
operator delete	./vhandle_cch.h	/^    static void operator delete(void *ptr) {$/;"	f	struct:felis::VHandleCollectionHandler::Block
operator new	./entity.h	/^  static void *operator new(size_t s) {$/;"	f	class:felis::final
operator new	./masstree_index_impl.cc	/^    static void *operator new(size_t sz) {$/;"	f	struct:felis::MasstreeMap::Iterator
operator new	./masstree_index_impl.cc	/^void *MasstreeIndex::operator new(size_t sz)$/;"	f	class:felis::MasstreeIndex
operator new	./piece.cc	/^void *BasePieceCollection::operator new(std::size_t size)$/;"	f	class:felis::BasePieceCollection
operator new	./piece.h	/^    static void *operator new(std::size_t size) {$/;"	f	class:felis::BasePieceCollection::ExecutionRoutine
operator new	./txn.h	/^  static void *operator new(size_t nr_bytes) { return g_brk[g_cur_numa_node]->Alloc(nr_bytes); }$/;"	f	class:felis::BaseTxn
operator new	./varstr.h	/^  static void *operator new(size_t s) { std::abort(); } \/\/ No, you cannot new this class.$/;"	f	class:felis::final
operator new	./vhandle.h	/^    static void *operator new(size_t nr_bytes) {$/;"	f	struct:felis::LinkListVHandle::Entry
operator new	./vhandle.h	/^  static void *operator new(size_t nr_bytes) {$/;"	f	class:felis::CalvinVHandle
operator new	./vhandle.h	/^  static void *operator new(size_t nr_bytes) {$/;"	f	class:felis::LinkListVHandle
operator new	./vhandle_cch.h	/^    static void *operator new(size_t) {$/;"	f	struct:felis::VHandleCollectionHandler::Block
origin_node_id	./epoch.h	/^  int origin_node_id() const { return node_id; }$/;"	f	class:felis::EpochObject
out	./tcp_node.cc	/^    go::TcpOutputChannel *out;$/;"	m	class:felis::tcp::SendChannel::FlusherRoutine	file:
out	./tcp_node.cc	/^  go::TcpOutputChannel *out;$/;"	m	class:felis::tcp::SendChannel	file:
outgoing	./node_config.h	/^  std::array<OutgoingTraffic *, kMaxNrNode> outgoing;$/;"	m	class:felis::NodeConfiguration
outgoing_channels	./tcp_node.h	/^  std::array<tcp::SendChannel *, kMaxNrNode> outgoing_channels;$/;"	m	class:felis::TcpNodeTransport
outgoing_socks	./tcp_node.h	/^  std::array<go::TcpSocket *, kMaxNrNode> outgoing_socks;$/;"	m	class:felis::TcpNodeTransport
override	./epoch.h	/^  void *Alloc(size_t size) final override;$/;"	m	class:felis::EpochPromiseAllocationService
override	./epoch.h	/^  void Reset() final override;$/;"	m	class:felis::EpochPromiseAllocationService
override	./hashtable_index_impl.h	/^  VHandle *Search(const VarStrView &k) override;$/;"	m	class:felis::final
override	./hashtable_index_impl.h	/^  VHandle *SearchOrCreate(const VarStrView &k) override;$/;"	m	class:felis::final
override	./hashtable_index_impl.h	/^  VHandle *SearchOrCreate(const VarStrView &k, bool *created) override;$/;"	m	class:felis::final
override	./masstree_index_impl.h	/^  Table::Iterator *IndexReverseIterator(const VarStrView &start) override;$/;"	m	class:felis::final
override	./masstree_index_impl.h	/^  Table::Iterator *IndexReverseIterator(const VarStrView &start, const VarStrView &end) override;$/;"	m	class:felis::final
override	./masstree_index_impl.h	/^  Table::Iterator *IndexSearchIterator(const VarStrView &start) override;$/;"	m	class:felis::final
override	./masstree_index_impl.h	/^  Table::Iterator *IndexSearchIterator(const VarStrView &start, const VarStrView &end) override;$/;"	m	class:felis::final
override	./masstree_index_impl.h	/^  VHandle *Search(const VarStrView &k) override;$/;"	m	class:felis::final
override	./masstree_index_impl.h	/^  VHandle *SearchOrCreate(const VarStrView &k) override;$/;"	m	class:felis::final
override	./masstree_index_impl.h	/^  VHandle *SearchOrCreate(const VarStrView &k, bool *created) override;$/;"	m	class:felis::final
override	./node_config.h	/^  void TransportPromiseRoutine(PieceRoutine *routine) final override;$/;"	m	class:felis::LocalTransport
override	./piece.h	/^    void AddToReadyQueue(go::Scheduler::Queue *q, bool next_ready = false) final override;$/;"	m	class:felis::BasePieceCollection::ExecutionRoutine
override	./piece.h	/^    void Run() final override;$/;"	m	class:felis::BasePieceCollection::ExecutionRoutine
override	./routine_sched.cc	/^                             std::atomic_uint *pq_start, std::atomic_uint *pq_end) override;$/;"	m	class:felis::final	file:
override	./routine_sched.cc	/^  PriorityQueueValue *Pick() override;$/;"	m	class:felis::final	file:
override	./routine_sched.cc	/^  bool ShouldPickWaiting(const WaitState &ws) override;$/;"	m	class:felis::final	file:
override	./routine_sched.cc	/^  void Consume(PriorityQueueValue *value) override;$/;"	m	class:felis::final	file:
override	./routine_sched.cc	/^  void IngestPending(PriorityQueueHashEntry *hent, PriorityQueueValue *value) override;$/;"	m	class:felis::final	file:
override	./routine_sched.cc	/^  void Reset() override;$/;"	m	class:felis::final	file:
override	./shipping.h	/^  void Run() final override;$/;"	m	class:felis::RowScannerRoutine
override	./tcp_node.cc	/^    void Run() final override;$/;"	m	class:felis::tcp::SendChannel::FlusherRoutine	file:
override	./tcp_node.cc	/^  void DoFlush(bool async = false) final override;$/;"	m	class:felis::tcp::SendChannel	file:
override	./tcp_node.cc	/^  void Run() final override;$/;"	m	class:felis::tcp::NodeRowShipmentReceiverRoutine	file:
override	./tcp_node.h	/^  bool PeriodicIO(int core) final override;$/;"	m	class:felis::TcpNodeTransport
override	./tcp_node.h	/^  void FinishCompletion(int level) final override;$/;"	m	class:felis::TcpNodeTransport
override	./tcp_node.h	/^  void PrefetchInbound() final override;$/;"	m	class:felis::TcpNodeTransport
override	./tcp_node.h	/^  void TransportPromiseRoutine(PieceRoutine *routine) final override;$/;"	m	class:felis::TcpNodeTransport
override	./vhandle_sync.h	/^  long GetWaitCountStat(int core) final override;$/;"	m	class:felis::SimpleSync
override	./vhandle_sync.h	/^  long GetWaitCountStat(int core) final override;$/;"	m	class:felis::SpinnerSlot
override	./vhandle_sync.h	/^  void ClearWaitCountStats() final override;$/;"	m	class:felis::SimpleSync
override	./vhandle_sync.h	/^  void ClearWaitCountStats() final override;$/;"	m	class:felis::SpinnerSlot
override	./vhandle_sync.h	/^  void OfferData(volatile uintptr_t *addr, uintptr_t obj) final override;$/;"	m	class:felis::SimpleSync
override	./vhandle_sync.h	/^  void OfferData(volatile uintptr_t *addr, uintptr_t obj) final override;$/;"	m	class:felis::SpinnerSlot
override	./vhandle_sync.h	/^  void WaitForData(volatile uintptr_t *addr, uint64_t sid, uint64_t ver, void *handle) final override;$/;"	m	class:felis::SimpleSync
override	./vhandle_sync.h	/^  void WaitForData(volatile uintptr_t *addr, uint64_t sid, uint64_t ver, void *handle) final override;$/;"	m	class:felis::SpinnerSlot
owned	./slice.h	/^    std::bitset<kNrMaxSlices> owned[NumOwnerTypes];$/;"	m	struct:felis::SliceMappingTable::__anon7
owner_core	./contention_manager.cc	/^  int owner_core;$/;"	m	struct:felis::VersionBufferHead	file:
owner_numa_zone	./contention_manager.cc	/^  int owner_numa_zone;$/;"	m	struct:felis::VersionBufferHeadAllocation	file:
p	./mem.cc	/^  uint8_t *p;$/;"	m	struct:mem::SlabMemory	file:
padding	./gc.h	/^    uint32_t padding[11];$/;"	m	struct:felis::GC::__anon4
page_size	./mem.cc	/^  uint64_t page_size;$/;"	m	struct:mem::SlabMemory	file:
pairs	./txn_cc.h	/^  Pair pairs[BaseTxn::BaseTxnIndexOpContext::kMaxPackedKeys];$/;"	m	class:felis::NodeBitmap
parent	./probe_utils.h	/^    Agg *parent;$/;"	m	struct:agg::Agg::Value
payment_cnt	./felis_probes.cc	/^  agg::Agg<agg::Histogram<32, 0, 1>> payment_cnt;$/;"	m	struct:ProbeMain	file:
per_core_cnts	./epoch.h	/^  unsigned long *per_core_cnts[NodeConfiguration::kMaxNrThreads];$/;"	m	class:felis::EpochClient
per_core_q	./slice.h	/^  std::array<util::CacheAligned<SliceQueue>, NodeConfiguration::kMaxNrThreads> per_core_q;$/;"	m	class:felis::Slice
per_core_txns	./epoch.h	/^  std::array<TxnSet *, NodeConfiguration::kMaxNrThreads> per_core_txns;$/;"	m	struct:felis::EpochTxnSet
per_core_weights	./locality_manager.h	/^  } *per_core_weights[64]; \/\/ 64 maximum number of cores.$/;"	m	class:felis::LocalityManager	typeref:struct:felis::LocalityManager::WeightDist
perf	./epoch.h	/^  PerfLog perf;$/;"	m	class:felis::EpochCallback
perf	./epoch.h	/^  PerfLog perf;$/;"	m	class:felis::EpochClient
phase	./epoch.h	/^  EpochPhase phase;$/;"	m	class:felis::EpochCallback
phase_id	./felis_probes.h	/^  int phase_id;$/;"	m	struct:felis::probes::EndOfPhase
piece_id	./felis_probes.h	/^  int piece_id;$/;"	m	struct:felis::probes::TpccDelivery
piece_id	./felis_probes.h	/^  int piece_id;$/;"	m	struct:felis::probes::TpccNewOrder
piece_id	./felis_probes.h	/^  int piece_id;$/;"	m	struct:felis::probes::TpccPayment
pointer	./sqltypes.h	/^  ImplType *pointer() { return FieldValue<N>::ptr(); }$/;"	f	class:sql::Field
pointer	./sqltypes.h	/^  const ImplType *pointer() const { return FieldValue<N>::ptr(); }$/;"	f	class:sql::Field
pool	./contention_manager.cc	/^  mem::Pool pool;$/;"	m	struct:felis::VersionBufferHeadAllocation	file:
pool	./entity.cc	/^mem::ParallelSlabPool RowEntity::pool;$/;"	m	class:felis::RowEntity	file:
pool	./entity.h	/^  static mem::ParallelSlabPool pool;$/;"	m	class:felis::final
pool	./mem.cc	/^  BasicPool pool;$/;"	m	class:mem::Slab	file:
pool	./mem.cc	/^  Pool pool;$/;"	m	struct:mem::SlabMemory	file:
pool	./vhandle.cc	/^mem::ParallelSlabPool BaseVHandle::pool;$/;"	m	class:felis::BaseVHandle	file:
pool	./vhandle.h	/^  static mem::ParallelSlabPool pool;$/;"	m	class:felis::BaseVHandle
pools	./mem.h	/^  ParallelSlabPool pools[32];$/;"	m	class:mem::ParallelRegion
pools	./mem.h	/^  std::array<PoolType *, kMaxNrPools> pools;$/;"	m	class:mem::ParallelAllocator
pools	./module.cc	/^    mem::Pool pools[NodeConfiguration::kMaxNrThreads \/ mem::kNrCorePerNode];$/;"	m	class:felis::CoroutineModule::CoroutineStackAllocator	file:
pools	./vhandle.cc	/^mem::Pool *LinkListVHandle::Entry::pools;$/;"	m	class:felis::LinkListVHandle::Entry	file:
pools	./vhandle.h	/^    static mem::Pool *pools;$/;"	m	struct:felis::LinkListVHandle::Entry
port	./node_config.h	/^    uint16_t port;$/;"	m	struct:felis::NodeConfiguration::NodePeerConfig
port	./tcp_node.cc	/^  unsigned short port;$/;"	m	class:felis::tcp::NodeRowShipmentReceiverRoutine	file:
pos	./contention_manager.cc	/^  std::atomic_int pos;$/;"	m	struct:felis::VersionBufferHead	file:
pos	./contention_manager.cc	/^  std::atomic_int pos;$/;"	m	struct:felis::VersionBufferHeadAllocation	file:
pos	./contention_manager.h	/^  long pos;$/;"	m	struct:felis::VersionBufferHandle
pos	./felis_probes.h	/^  long pos;$/;"	m	struct:felis::probes::VersionWrite
pos	./vhandle.h	/^  std::atomic_llong pos;$/;"	m	class:felis::CalvinVHandle
prealloc_ptr	./contention_manager.h	/^  uint8_t *prealloc_ptr;$/;"	m	struct:felis::VersionBufferHandle
preempt_ts	./routine_sched.h	/^  uint64_t preempt_ts;$/;"	m	struct:felis::WaitState
prefix	./opts.h	/^  std::string prefix;$/;"	m	struct:felis::Option
probes	./felis_probes.h	/^namespace probes {$/;"	n	namespace:felis
proposed_caps	./mem.h	/^  size_t proposed_caps[32];$/;"	m	class:mem::ParallelRegion
ptr	./contention_manager.cc	/^  uint8_t *ptr;$/;"	m	struct:felis::VersionPrealloc	file:
ptr	./epoch.cc	/^uint8_t *EpochManager::ptr(uint64_t epoch_nr, int node_id, uint64_t offset) const$/;"	f	class:felis::EpochManager
ptr	./felis_probes.h	/^  uintptr_t ptr;$/;"	m	struct:felis::probes::WaitCounters
ptr	./mem.cc	/^  uint8_t *ptr;$/;"	m	class:mem::MetaSlab	file:
ptr	./mem.h	/^  uint8_t *ptr() const { return data; }$/;"	f	class:mem::Brk
q	./routine_sched.cc	/^  PriorityQueueHeapEntry q[];$/;"	m	class:felis::final	file:
q_idx	./gc.cc	/^  int q_idx;$/;"	m	struct:felis::GarbageBlock	file:
qlock	./routine_sched.cc	/^  util::MCSSpinLock qlock;$/;"	m	class:felis::final	file:
queue	./shipping.h	/^  std::list<T *> queue;$/;"	m	class:felis::Shipment
queue	./slice.h	/^  util::ListNode queue;$/;"	m	struct:felis::SliceQueue
queues	./node_config.h	/^  std::array<Queue *, NodeConfiguration::kMaxNrThreads + 1> queues;$/;"	m	class:felis::LocalDispatcherImpl
rcu_epoch	./hashtable_index_impl.h	/^  uint64_t rcu_epoch;$/;"	m	struct:felis::HashEntry
read_only	./index_common.h	/^  bool read_only;$/;"	m	class:felis::Table
read_pos	./epoch.h	/^  char* read_pos;$/;"	m	class:felis::EpochDispatcher
read_top	./epoch.h	/^  char* read_top;$/;"	m	class:felis::EpochDispatcher
ready	./txn_cc.h	/^  std::atomic_bool ready = false;$/;"	m	class:felis::FutureValue
ready_epoch_nr	./epoch.h	/^  std::atomic_uint64_t ready_epoch_nr;$/;"	m	class:felis::EpochManager
ref_hashtable	./commit_buffer.h	/^  std::atomic<Entry *> *ref_hashtable;$/;"	m	class:felis::CommitBuffer
ref_hashtable_size	./commit_buffer.h	/^  unsigned long ref_hashtable_size;$/;"	m	class:felis::CommitBuffer
region_id	./varstr.h	/^  int16_t region_id;$/;"	m	class:felis::final
region_id	./vhandle.h	/^  uint8_t region_id() const { return alloc_by_regionid; }$/;"	f	class:felis::SortedArrayVHandle
rel_id	./entity.h	/^  int rel_id;$/;"	m	class:felis::final
relation_id	./index_common.h	/^  int relation_id() { return id; }$/;"	f	class:felis::Table
relation_id	./stdmap_index_impl.h	/^    int relation_id;$/;"	m	struct:dolly::StdMapIndex::StdMapIteratorImpl
relation_ids	./txn.h	/^    int16_t relation_ids[kMaxPackedKeys];$/;"	m	struct:felis::BaseTxn::BaseTxnIndexOpContext
rels_bitmap	./txn.h	/^    uint16_t rels_bitmap;$/;"	m	struct:felis::BaseTxn::BaseTxnIndexOpContext
required	./module.h	/^  bool required = false;$/;"	m	class:felis::Module
resize	./sqltypes.h	/^  void resize(size_t n, char c = 0) {$/;"	f	class:sql::inline_str_base
resize_junk	./sqltypes.h	/^  void resize_junk(size_t n) {$/;"	f	class:sql::inline_str_base
resource	./pwv_graph.h	/^    Resource resource = nullptr;$/;"	m	struct:felis::PWVGraph::Edge
result	./felis_probes.h	/^  uint64_t result;$/;"	m	struct:felis::probes::LocalitySchedule
rhs	./console.h	/^  Console(const Console &rhs) = delete;$/;"	m	class:felis::Console
rhs	./entity.h	/^  RowEntity(const RowEntity &rhs) = delete; \/\/ C++17 has guaranteed copy-elision! :)$/;"	m	class:felis::final
rhs	./mem.h	/^  ParallelAllocator(const ParallelAllocator<PoolType>& rhs) = delete;$/;"	m	class:mem::ParallelAllocator
rhs	./mem.h	/^  WeakPool(const WeakPool &rhs) = delete;$/;"	m	class:mem::WeakPool
rhs	./node_config.h	/^  LocalTransport(const LocalTransport &rhs) = delete;$/;"	m	class:felis::LocalTransport
rhs	./varstr.h	/^  VarStr(VarStr &&rhs) = delete;$/;"	m	class:felis::final
rhs	./varstr.h	/^  VarStr(const VarStr &rhs) = delete;$/;"	m	class:felis::final
rhs	./vhandle.h	/^  CalvinVHandle(CalvinVHandle &&rhs) = delete;$/;"	m	class:felis::CalvinVHandle
rhs	./vhandle.h	/^  LinkListVHandle(LinkListVHandle &&rhs) = delete;$/;"	m	class:felis::LinkListVHandle
root	./txn_cc.h	/^  PieceCollection *root;$/;"	m	class:felis::Txn
routine	./piece.h	/^  PieceRoutine *&routine(int idx) {$/;"	f	class:felis::BasePieceCollection
routine	./routine_sched.h	/^  PieceRoutine *routine;$/;"	m	struct:felis::PriorityQueueValue
routines	./node_config.h	/^      std::array<PieceRoutine *, kBufferSize> routines;$/;"	m	struct:felis::LocalDispatcherImpl::Queue::__anon6
routines	./node_config.h	/^    std::array<PieceRoutine *, kBufferSize> routines;$/;"	m	struct:felis::LocalDispatcherImpl::Queue
row	./index_common.h	/^    VHandle *row() { return vhandle; }$/;"	f	class:felis::Table::Iterator
row	./index_common.h	/^    const VHandle *row() const { return vhandle; }$/;"	f	class:felis::Table::Iterator
row	./txn_cc.h	/^  VHandle *row = nullptr;$/;"	m	struct:felis::InvokeHandle
row_entity	./vhandle.h	/^  util::OwnPtr<RowEntity> row_entity;$/;"	m	class:felis::SortedArrayVHandle
row_shipper_peer	./node_config.h	/^    NodePeerConfig row_shipper_peer;$/;"	m	struct:felis::NodeConfiguration::NodeConfig
row_size	./index_common.h	/^  size_t row_size() const {$/;"	f	class:felis::Table
row_slice_scanners	./slice.h	/^  RowSliceScanner **row_slice_scanners;$/;"	m	class:felis::SliceManager
row_slices	./slice.h	/^  Slice **row_slices;$/;"	m	class:felis::SliceManager
rows	./gc.cc	/^  std::array<VHandle *, kMaxNrRows> rows;$/;"	m	struct:felis::GarbageBlock	file:
rvp	./routine_sched.cc	/^  util::GenericListNode<FreeNodeEntry> free, inactive, rvp;$/;"	m	class:felis::final	file:
sample_count	./epoch.h	/^  int sample_count = 3;$/;"	m	class:felis::EpochClient
sched	./routine_sched.cc	/^    PWVScheduler *sched;$/;"	m	struct:felis::final::FreeNodeEntry	file:
sched_entry	./pwv_graph.h	/^    std::atomic<void *> sched_entry;$/;"	m	struct:felis::PWVGraph::Node
sched_key	./piece.h	/^  uint64_t sched_key; \/\/ Optional. 0 for unset. For scheduling only.$/;"	m	struct:felis::PieceRoutine
sched_key	./routine_sched.h	/^  uint64_t sched_key;$/;"	m	struct:felis::WaitState
seed	./felis_probes.h	/^  uint64_t seed;$/;"	m	struct:felis::probes::LocalitySchedule
self	./node_config.h	/^  T *self() { return (T *) this; }$/;"	f	class:felis::Flushable
sent_generation	./shipping.h	/^  std::atomic_ullong sent_generation;$/;"	m	class:felis::ShippingHandle
serial_id	./txn.h	/^    uint64_t serial_id() const { return sid; }$/;"	f	class:felis::BaseTxn::BaseTxnHandle
serial_id	./txn.h	/^    uint64_t serial_id() const { return sid; }$/;"	f	class:felis::BaseTxn::BaseTxnRow
serial_id	./txn.h	/^  uint64_t serial_id() const { return sid; }$/;"	f	class:felis::BaseTxn
serv	./tcp_node.h	/^  tcp::NodeServerRoutine *serv;$/;"	m	class:felis::TcpNodeTransport
server_module	./module.cc	/^static NodeServerModule server_module;$/;"	m	namespace:felis	file:
server_node_name	./console.h	/^  std::string server_node_name() const { return node_name; }$/;"	f	class:felis::Console
server_status	./console.h	/^  ServerStatus server_status = ServerStatus::Booting;$/;"	m	class:felis::Console
set	./sqltypes.h	/^  void set(const typename TupleFieldType<N, TupleField, Types...>::ValueType &val) {$/;"	f	class:sql::TupleImpl
set_extra	./txn_cc.h	/^    void set_extra(const Extra &rhs) {$/;"	f	struct:felis::Txn::TxnIndexOpContextEx
set_function	./epoch.h	/^  void set_function(TxnMemberFunc func) { mem_func = func; }$/;"	f	class:felis::CallTxnsWorker
set_id	./index_common.h	/^  void set_id(int relation_id) { id = relation_id; }$/;"	f	class:felis::Table
set_iterator_end_key	./index_common.h	/^  void set_iterator_end_key(Iterator *it, const VarStrView &end) {$/;"	f	class:felis::Table
set_key_length	./index_common.h	/^  void set_key_length(size_t l) { key_len = l; }$/;"	f	class:felis::Table
set_pool_capacity	./mem.h	/^  void set_pool_capacity(size_t sz, size_t cap) {$/;"	f	class:mem::ParallelRegion
set_read_only	./index_common.h	/^  void set_read_only(bool v) { read_only = v; }$/;"	f	class:felis::Table
set_server_node_name	./console.h	/^  void set_server_node_name(std::string name) { node_name = name; }$/;"	f	class:felis::Console
set_suppress_warning	./mem.h	/^  void set_suppress_warning(bool suppress_warning) {$/;"	f	class:mem::BasicPool
set_thread_safe	./mem.h	/^  void set_thread_safe(bool safe) {$/;"	f	class:mem::Brk
shandle	./entity.h	/^  ObjectShippingHandle<RowEntity> shandle;$/;"	m	class:felis::final
shared_q	./slice.h	/^  util::CacheAligned<SliceQueue> shared_q;$/;"	m	class:felis::Slice
ship	./shipping.h	/^  Shipment<T> *ship;$/;"	m	class:felis::ObjectSliceScanner
shipment	./shipping.h	/^  Shipment<T> *shipment() { return ship; }$/;"	f	class:felis::ObjectSliceScanner
shipping_handle	./entity.h	/^  ShippingHandle *shipping_handle() { return &shandle; }$/;"	f	class:felis::final
short_sid	./commit_buffer.h	/^    uint32_t short_sid; \/\/ sid inside the epoch.$/;"	m	struct:felis::CommitBuffer::Entry
show_usage	./main.cc	/^void show_usage(const char *progname)$/;"	f
sid	./felis_probes.h	/^  uint64_t sid;$/;"	m	struct:felis::probes::VHandleAppend
sid	./felis_probes.h	/^  uint64_t sid;$/;"	m	struct:felis::probes::WaitCounters
sid	./txn.h	/^    uint64_t sid;$/;"	m	class:felis::BaseTxn::BaseTxnHandle
sid	./txn.h	/^    uint64_t sid;$/;"	m	class:felis::BaseTxn::BaseTxnRow
sid	./txn.h	/^  uint64_t sid;$/;"	m	class:felis::BaseTxn
size	./felis_probes.h	/^  int size;$/;"	m	struct:felis::probes::VHandleAbsorb
size	./slice.h	/^  size_t size;$/;"	m	struct:felis::SliceQueue
size	./sqltypes.h	/^  size_t size() const {$/;"	f	class:sql::Char
size	./sqltypes.h	/^  size_t size() const {$/;"	f	class:sql::inline_str_base
size	./txn_cc.h	/^  int size() const { return 2; }$/;"	f	class:felis::RangeParam
size	./txn_cc.h	/^  int size() const { return len; }$/;"	f	class:felis::KeyParam
size	./txn_cc.h	/^  int size() const { return nr; }$/;"	f	class:felis::PlaceholderParam
size	./txn_cc.h	/^  uint8_t size() const { return len; }$/;"	f	class:felis::NodeBitmap
size	./vhandle.h	/^  size_t size;$/;"	m	class:felis::CalvinVHandle
size	./vhandle.h	/^  size_t size;$/;"	m	class:felis::LinkListVHandle
size	./vhandle.h	/^  unsigned int size;$/;"	m	class:felis::SortedArrayVHandle
slabs	./mem.cc	/^  uint8_t slabs[32 * sizeof(Slab)];$/;"	m	class:mem::MetaSlab	file:
slice	./entity.h	/^  int slice;$/;"	m	class:felis::final
slice	./shipping.h	/^  Slice * slice;$/;"	m	class:felis::SliceScanner
slice_id	./entity.h	/^  int slice_id() const { return slice; }$/;"	f	class:felis::final
slice_id	./slice.h	/^  int slice_id;$/;"	m	class:felis::Slice
slice_ids	./txn.h	/^    int16_t slice_ids[kMaxPackedKeys];$/;"	m	struct:felis::BaseTxn::BaseTxnIndexOpContext
slice_owners	./slice.h	/^  } slice_owners[kMaxNrNode];$/;"	m	class:felis::SliceMappingTable	typeref:struct:felis::SliceMappingTable::__anon7
slices_bitmap	./txn.h	/^    uint16_t slices_bitmap;$/;"	m	struct:felis::BaseTxn::BaseTxnIndexOpContext
slot	./vhandle_sync.cc	/^SpinnerSlotData *SpinnerSlot::slot(int idx)$/;"	f	class:felis::SpinnerSlot
sock	./shipping.h	/^  go::TcpSocket *sock;$/;"	m	class:felis::ShipmentReceiver
sql	./sqltypes.h	/^namespace sql {$/;"	n
src_node_id	./node_config.h	/^  int src_node_id = 0;$/;"	m	class:felis::IncomingTraffic
stack_space	./module.cc	/^      uint8_t stack_space[kStackSize];$/;"	m	struct:felis::CoroutineModule::CoroutineStackAllocator::Chunk	file:
start	./txn_cc.h	/^  const typename Table::Key *start;$/;"	m	class:felis::KeyParam
start	./txn_cc.h	/^  const typename Table::Key *start;$/;"	m	class:felis::RangeParam
state	./node_config.h	/^  std::atomic_ulong state = kTotalStates - 1;$/;"	m	class:felis::IncomingTraffic
state	./routine_sched.h	/^  BasePieceCollection::ExecutionRoutine *state;$/;"	m	struct:felis::PriorityQueueValue
state	./routine_sched.h	/^  BasePieceCollection::ExecutionRoutine *state;$/;"	m	struct:felis::WaitState
state	./txn.h	/^    EpochObject state;$/;"	m	struct:felis::BaseTxn::BaseTxnIndexOpContext
state	./txn_cc.h	/^  GenericEpochObject<TxnState> state;$/;"	m	class:felis::TxnStateCompletion
state	./txn_cc.h	/^  State state;$/;"	m	class:felis::Txn
stats	./epoch.h	/^  } stats;$/;"	m	class:felis::EpochClient	typeref:struct:felis::EpochClient::__anon2
stats	./gc.h	/^  } stats[NodeConfiguration::kMaxNrThreads];$/;"	m	class:felis::GC	typeref:struct:felis::GC::__anon4
stats	./mem.h	/^  PoolStatistics stats;$/;"	m	class:mem::SlabPool
stats	./mem.h	/^  PoolStatistics stats;$/;"	m	class:mem::WeakPool
std	./sqltypes.h	/^namespace std {$/;"	n
str	./sqltypes.h	/^  inline std::string str(bool zeropad = false) const {$/;"	f	class:sql::inline_str_base
str	./sqltypes.h	/^  std::string str() const {$/;"	f	class:sql::Char
straggler	./gc.h	/^    bool straggler;$/;"	m	struct:felis::GC::__anon4
sum	./felis_probes.h	/^  uint64_t sum;$/;"	m	struct:felis::probes::OnDemandSplit
sum	./probe_utils.h	/^  long sum = 0;$/;"	m	struct:agg::Average
sum	./probe_utils.h	/^  long sum = 0;$/;"	m	struct:agg::Sum
suppress_warning	./mem.h	/^  bool suppress_warning = false;$/;"	m	class:mem::BasicPool
sync	./vhandle.cc	/^VHandleSyncService &BaseVHandle::sync()$/;"	f	class:felis::BaseVHandle
sz	./sqltypes.h	/^  IntSizeType sz;$/;"	m	class:sql::inline_str_base
t	./epoch.h	/^  int t;$/;"	m	class:felis::EpochClientBaseWorker
table	./hashtable_index_impl.h	/^  uint8_t *table;$/;"	m	class:felis::final
tables	./index_common.h	/^  std::array<Table *, kMaxNrRelations> tables;$/;"	m	class:felis::TableManager
task_buffer	./node_config.h	/^    } task_buffer[NodeConfiguration::kMaxNrThreads];$/;"	m	struct:felis::LocalDispatcherImpl::Queue	typeref:struct:felis::LocalDispatcherImpl::Queue::__anon6
tcp	./tcp_node.cc	/^namespace tcp {$/;"	n	namespace:felis	file:
tcp	./tcp_node.h	/^namespace tcp {$/;"	n	namespace:felis
this_coreid	./vhandle.h	/^  int this_coreid;$/;"	m	class:felis::LinkListVHandle
this_coreid	./vhandle.h	/^  short this_coreid;$/;"	m	class:felis::CalvinVHandle
this_coreid	./vhandle.h	/^  uint8_t this_coreid;$/;"	m	class:felis::SortedArrayVHandle
thre	./threshold_autotune.h	/^  long thre = 0;$/;"	m	class:felis::ThresholdAutoTuneController
thread_local_data	./node_config.h	/^  std::array<LocalMetadata *, 32> thread_local_data;$/;"	m	class:felis::TransportBatcher
thread_safe	./mem.h	/^  bool thread_safe;$/;"	m	class:mem::Brk
threadinfo_type	./masstree_index_impl.cc	/^  typedef threadinfo threadinfo_type;$/;"	t	struct:felis::MasstreeDollyParam	file:
ti	./masstree_index_impl.cc	/^    threadinfo *ti;$/;"	m	struct:felis::MasstreeMap::Iterator	file:
tot_resources	./pwv_graph.h	/^    uint16_t tot_resources;$/;"	m	struct:felis::PWVGraph::Node
total_batch_counters	./node_config.h	/^  std::atomic_ulong *total_batch_counters;$/;"	m	class:felis::NodeConfiguration
total_cap	./mem.h	/^  size_t total_cap;$/;"	m	class:mem::ParallelAllocator
total_capacity	./mem.h	/^  size_t total_capacity() const { return capacity; }$/;"	f	class:mem::WeakPool
total_nr_txn	./epoch.h	/^  unsigned long total_nr_txn;$/;"	m	class:felis::EpochClient
trace	./log.h	/^static void trace(std::string_view fmt, T... args)$/;"	f
transport	./tcp_node.cc	/^  felis::TcpNodeTransport *transport;$/;"	m	class:felis::tcp::NodeServerRoutine	file:
transport	./tcp_node.cc	/^  felis::TcpNodeTransport *transport;$/;"	m	class:felis::tcp::ReceiverChannel	file:
transport_batcher	./node_config.h	/^  TransportBatcher transport_batcher;$/;"	m	class:felis::NodeConfiguration
tuple_element	./sqltypes.h	/^struct tuple_element<N, sql::Object<sql::TupleImpl<T, Types...>>> {$/;"	s	namespace:std
tuple_size	./sqltypes.h	/^struct tuple_size<sql::Object<sql::TupleImpl<T, Types...>>> {$/;"	s	namespace:std
tv	./log.h	/^  struct timeval tv;$/;"	m	class:PerfLog	typeref:struct:PerfLog::timeval
txn_indexop_affinity	./txn_cc.h	/^  uint64_t txn_indexop_affinity = kIndexOpFlatten;$/;"	m	class:felis::Txn
txns	./epoch.h	/^    BaseTxn *txns[];$/;"	m	struct:felis::EpochTxnSet::TxnSet
u	./commit_buffer.h	/^    } u;$/;"	m	struct:felis::CommitBuffer::Entry	typeref:union:felis::CommitBuffer::Entry::__anon1
update_crc32	./csum.h	/^update_crc32(const unsigned char *data, unsigned int length, unsigned int *crc)$/;"	f
used	./mem.h	/^  long long used;$/;"	m	struct:mem::PoolStatistics
util	./contention_manager.cc	/^namespace util {$/;"	n	file:
util	./contention_manager.h	/^namespace util {$/;"	n
util	./epoch.cc	/^namespace util {$/;"	n	file:
util	./epoch.h	/^namespace util {$/;"	n
util	./gc.cc	/^namespace util {$/;"	n	file:
util	./gc.h	/^namespace util {$/;"	n
util	./iface.cc	/^namespace util {$/;"	n	file:
util	./node_config.h	/^namespace util {$/;"	n
util	./pwv_graph.h	/^namespace util {$/;"	n
util	./slice.cc	/^namespace util {$/;"	n	file:
util	./slice.h	/^namespace util {$/;"	n
util	./tcp_node.h	/^namespace util {$/;"	n
util	./vhandle_sync.h	/^namespace util {$/;"	n
v	./entity.h	/^  VarStr *v;$/;"	m	class:felis::final
value	./commit_buffer.h	/^      VarStr *value;$/;"	m	union:felis::CommitBuffer::Entry::__anon1
value	./hashtable_index_impl.cc	/^VHandle *HashEntry::value() const$/;"	f	class:felis::HashEntry
value	./sqltypes.h	/^  T value;$/;"	m	struct:sql::TupleField
value	./sqltypes.h	/^  static constexpr size_t value = sizeof...(Types) + 1;$/;"	m	struct:std::tuple_size
value	./txn_cc.h	/^  T value;$/;"	m	class:felis::FutureValue
value_type	./masstree_index_impl.cc	/^  typedef VHandle* value_type;$/;"	t	struct:felis::MasstreeDollyParam	file:
values	./probe_utils.h	/^  std::set<Value *> values;$/;"	m	class:agg::Agg
values	./routine_sched.h	/^  util::GenericListNode<PriorityQueueValue> values;$/;"	m	struct:felis::PriorityQueueHashEntry
version	./vhandle.h	/^    uint64_t version;$/;"	m	struct:felis::LinkListVHandle::Entry
version_buffers	./contention_manager.cc	/^  VersionBuffer *version_buffers() {$/;"	f	struct:felis::VersionPrealloc
version_id	./felis_probes.h	/^  uint64_t version_id;$/;"	m	struct:felis::probes::WaitCounters
versions	./contention_manager.cc	/^  uint64_t versions[kMaxBatch];$/;"	m	struct:felis::VersionBuffer	file:
versions	./felis_probes.cc	/^  agg::Agg<agg::LogHistogram<18, 0, 2>> versions;$/;"	m	struct:ProbeMain	file:
versions	./vhandle.h	/^  uint64_t *versions;$/;"	m	class:felis::SortedArrayVHandle
vhandle	./commit_buffer.h	/^    VHandle *vhandle;$/;"	m	struct:felis::CommitBuffer::Entry
vhandle	./index_common.h	/^    VHandle *vhandle;$/;"	m	class:felis::Table::Iterator
vhandle	./txn.h	/^    VHandle *vhandle;$/;"	m	class:felis::BaseTxn::BaseTxnRow
w	./varstr.h	/^  uint64_t w;$/;"	m	class:felis::final
wait_cnt	./felis_probes.cc	/^  agg::Agg<agg::Histogram<128, 0, 256>> wait_cnt;$/;"	m	struct:ProbeMain	file:
wait_cnt	./felis_probes.h	/^  unsigned long wait_cnt;$/;"	m	struct:felis::probes::WaitCounters
wait_cnt	./vhandle_sync.cc	/^  long wait_cnt;$/;"	m	struct:felis::SimpleSyncData	file:
wait_cnt	./vhandle_sync.cc	/^  long wait_cnt;$/;"	m	struct:felis::SpinnerSlotData	file:
warehouse_coreid	./felis_probes.h	/^  int warehouse_coreid;$/;"	m	struct:felis::probes::TpccPayment
warned_during_poll	./tcp_node.cc	/^  bool warned_during_poll = false;$/;"	m	class:felis::tcp::ReceiverChannel	file:
watermark	./mem.h	/^  long long watermark;$/;"	m	struct:mem::PoolStatistics
wcnt	./commit_buffer.h	/^    std::atomic_int32_t wcnt;$/;"	m	struct:felis::CommitBuffer::Entry
weight	./felis_probes.h	/^  int weight;$/;"	m	struct:felis::probes::LocalitySchedule
weight	./locality_manager.h	/^    long weight;$/;"	m	struct:felis::LocalityManager::WeightDist
weights_per_core	./locality_manager.h	/^    long weights_per_core[];$/;"	m	struct:felis::LocalityManager::WeightDist
worker_peer	./node_config.h	/^    NodePeerConfig worker_peer;$/;"	m	struct:felis::NodeConfiguration::NodeConfig
workers	./epoch.h	/^  EpochWorkers *workers[NodeConfiguration::kMaxNrThreads];$/;"	m	class:felis::EpochClient
write_cnt	./felis_probes.cc	/^  agg::Agg<agg::Histogram<32, 0, 1>> write_cnt;$/;"	m	struct:ProbeMain	file:
~BaseTxn	./txn.h	/^  virtual ~BaseTxn() {}$/;"	f	class:felis::BaseTxn
~Brk	./mem.h	/^  ~Brk() {}$/;"	f	class:mem::Brk
~ConservativePriorityScheduler	./routine_sched.cc	/^  ~ConservativePriorityScheduler() {}$/;"	f	class:felis::final	file:
~CoroutineModule	./module.cc	/^  ~CoroutineModule() {$/;"	f	class:felis::CoroutineModule
~EpochClient	./epoch.h	/^  virtual ~EpochClient() {}$/;"	f	class:felis::EpochClient
~EpochMemory	./epoch.cc	/^EpochMemory::~EpochMemory()$/;"	f	class:felis::EpochMemory
~EpochTxnSet	./epoch.cc	/^EpochTxnSet::~EpochTxnSet()$/;"	f	class:felis::EpochTxnSet
~LocalTransport	./node_config.cc	/^LocalTransport::~LocalTransport() { delete lb; }$/;"	f	class:felis::LocalTransport
~LocalityManager	./locality_manager.cc	/^LocalityManager::~LocalityManager()$/;"	f	class:felis::LocalityManager
~PWVScheduler	./routine_sched.cc	/^  ~PWVScheduler() {}$/;"	f	class:felis::final	file:
~ParallelPool	./mem.cc	/^ParallelPool::~ParallelPool()$/;"	f	class:mem::ParallelPool
~ParallelSlabPool	./mem.cc	/^ParallelSlabPool::~ParallelSlabPool()$/;"	f	class:mem::ParallelSlabPool
~RowEntity	./entity.h	/^  ~RowEntity() {}$/;"	f	class:felis::final
~RowShipmentReceiver	./shipping.h	/^  ~RowShipmentReceiver() { delete sock; }$/;"	f	class:felis::RowShipmentReceiver
~Value	./probe_utils.h	/^    ~Value() {$/;"	f	struct:agg::Agg::Value
~WeakPool	./mem.cc	/^WeakPool::~WeakPool()$/;"	f	class:mem::WeakPool
