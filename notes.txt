EpochClient::PopulateTxnsFromLogs() || GenerateBenchmarks()

EpochClient::Start()
  - control.Reset(InitializeEpoch)
    - CallTxn (Insert): setup func and state for both control and worker routines
    - EpochClient::CallTxns(epoch_nr, func, label) is the generic function that triggers
    each of the epoch phases, tagged by 'label'.
  - WakeUp(&control)

CallBack
  - OnInsertComplete
    - CallTxns(Initialize):
      - RMWTxn::Prepare():
        - batching append versions (incl. pending) to version arrays (BaseTxn::BaseTxnRow)
  - OnInitializeComplete: CallTxns(Execute)
    - CallTxns(Execute):
      - set ContentionManager
      - RMWTxn::Run()
        - Spawn futures of WriteRow operations
        - invoke futures and execute the rest read operations

EpochExecutionDispatchService (scheduling txns during execution)
  - routine_sched.cc
  - queues of pieces (work element for workers)
  - queue->pq.sched_pol, i.e., PriorityQueue scheduling policy (Ycsb: ConservativePriorityScheduler)
    - make_heap could form a pq, since pop_heap will pop out the maximum value

User-level threading - gopp
  - InitThreadPool(NrThreads)
  - GetSchedulerFromPool(core_id)->WakeUp(go::routine) # could pin thread id here

Streaming Design
  - Pin a long-running dispatcher (always active) to a core
    - class EpochDispatcher : public go::Routine
    - under EpochClient, so is visible to the all_txns struct
  - Dispatcher inits the txn for an epoch according to an external source (log, network requests)
  - Then, triggers the first epoch. Keeps processing external sources and populate txn
  - OnExecuctionComplete: check if next epoch is already settled to begin (via flag[NrEpoch])
  - Hack
    - Pin dispatcher routine to the last core (biggest core id)
    - Decrement iterations of loops involving nr_threads or NodeConfiguration::g_nr_threads by 1

YCSB workloads
  - Loader - init tables and modules (config, coroutines, allocator)

Log Latency
  - struct RMWStruct { uint64_t keys[kTotal]; };
  - RMWTxn::RMWTxn(Client *client, uint64_t serial_id, char* &input)
      : Txn<RMWState>(serial_id), RMWStruct(client->ParseTransactionInput<RMWStruct>(input)),
        client(client) {}
    - Txn(uint64_t serial_id) : BaseTxn(serial_id) {}
  - Txn Logic: RMWTxn::Run() {}
  - client->per_core_txns[thread_id] is of type: *TxnSet
  - struct TxnSet {
      size_t nr;
      BaseTxn *txns[];
      ts *init_times[];
    }
  - per_core_txns[t]->txns[pos] = client->ParseAndPopulateTxn(id, read_pos);
  - ParseAndPopulateTxn(id, input)
    { return new RMWTxn(this, serial_id, input); };
